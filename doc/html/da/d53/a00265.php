<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
		<meta http-equiv="X-UA-Compatible" content="IE=9"/>
		<meta name="generator" content="Doxygen 1.8.20"/>
		<title>C++: mcd Namespace Reference</title>
		<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
		<script type="text/javascript" src="../../jquery.js"></script>
		<script type="text/javascript" src="../../dynsections.js"></script>
		<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
		<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
		<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
		<link href="../../doxystyle.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
			<div id="titlearea">
				<table cellspacing="0" cellpadding="0">
					<tbody>
						<tr style="height: 56px;">
							<td id="projectalign" style="padding-left: 0.5em;">
								<div id="projectname">C++
									&#160;<span id="projectnumber">1.6.0.0</span>
								</div>
								<div id="projectbrief">My own C++ features</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<?php
				$text = "Generated on Wed Oct 28 2020 16:13:45 for C++ by";
				$text = substr($text, 0, sizeof($text) - 4);
				$tmp = substr($text, 17);
				$tmp = substr($tmp, 0, strpos($tmp, " for"));
				$lastModif = date("l jS \of F Y \a\\t H:i:s", strtotime($tmp));
			?>
		<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/d53/a00265.php','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">mcd Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:db/d12/a00268"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d12/a00268.php">Check</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d5/d35/a00266"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d35/a00266.php">natural</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d5/d42/a00269"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d42/a00269.php">Tests</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d1/dd4/a00267"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dd4/a00267.php">this_thread</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/df3/a01085.php">Animal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An animal.  <a href="../../d2/df3/a01085.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/dc4/a01089.php">Ant</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An ant.  <a href="../../d3/dc4/a01089.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d1c/a01093.php">Arguments</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage the arguments.  <a href="../../de/d1c/a01093.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d8b/a01117.php">Assert</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">My assert's implementation.  <a href="../../d6/d8b/a01117.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/de4/a01121.php">AssertionException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An exception thrown by my assert's implementation.  <a href="../../dd/de4/a01121.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d8/ded/a01113"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d8/ded/a01113">AssertionLocationStruct</a></td></tr>
<tr class="separator:d8/ded/a01113"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/dc4/a01125.php">Big</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A new huge arithmetic variable.  <a href="../../d6/dc4/a01125.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d9/d17/a01129"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d9/d17/a01129">Binary</a></td></tr>
<tr class="memdesc:d9/d17/a01129"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage binary values easily.  <a href="../../da/d53/a00265.php#d9/d17/a01129">More...</a><br /></td></tr>
<tr class="separator:d9/d17/a01129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d28/a01133.php">Binary&lt; T, typename std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, void &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d0b/a01253.php">Cesar</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to use the cesar algorithm for encryption.  <a href="../../d3/d0b/a01253.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d04/a01209.php">Clock</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A clock to measure the elapsed time.  <a href="../../de/d04/a01209.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d3f/a01221.php">Cls</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the console.  <a href="../../dd/d3f/a01221.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d54/a01213.php">Color</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the text color in the console.  <a href="../../d5/d54/a01213.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d53/a01225.php">ConsoleCursor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to play with the cursor in the console.  <a href="../../d8/d53/a01225.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d07/a01241.php">ConsoleTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to print a table in the console.  <a href="../../d3/d07/a01241.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d31/a01245.php">Contraption</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A contraption.  <a href="../../d1/d31/a01245.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d2/d1d/a01277"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d2/d1d/a01277">ContraptionAttr</a></td></tr>
<tr class="memdesc:d2/d1d/a01277"><td class="mdescLeft">&#160;</td><td class="mdescRight">A struct to define <b><a class="el" href="../../d1/d31/a01245.php" title="A contraption.">Contraption</a></b> attributes.  <a href="../../da/d53/a00265.php#d2/d1d/a01277">More...</a><br /></td></tr>
<tr class="separator:d2/d1d/a01277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d7b/a01249.php">Crypto</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to be the parent for every crypt class.  <a href="../../d3/d7b/a01249.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d16/a01269.php">Date</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to play with dates.  <a href="../../d6/d16/a01269.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d85/a01273.php">DateTime</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to play with dates and times.  <a href="../../de/d85/a01273.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d6f/a01281.php">Entity</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An entity.  <a href="../../d5/d6f/a01281.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d1a/a01285.php">exception</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to call custom exceptions.  <a href="../../d1/d1a/a01285.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dda/a01289.php">Fraction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage fractions.  <a href="../../d9/dda/a01289.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d8c/a01297.php">Hostile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to derivate from when the thing can attack.  <a href="../../dc/d8c/a01297.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d07/a01301.php">Identifier</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to store some identify datas.  <a href="../../d3/d07/a01301.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d9e/a01305.php">IOConfig</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to configure inputs and outputs.  <a href="../../dc/d9e/a01305.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d4b/a01309.php">Json</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage <a class="el" href="../../db/d4b/a01309.php" title="A class to manage Json formatted data.">Json</a> formatted data.  <a href="../../db/d4b/a01309.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d90/a01313.php">JsonException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to throw <a class="el" href="../../db/d4b/a01309.php" title="A class to manage Json formatted data.">Json</a> exceptions.  <a href="../../de/d90/a01313.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/db8/a01317.php">Logger</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to log some messages.  <a href="../../df/db8/a01317.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d29/a01329.php">Map</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage a map and that implement some pathfinding algorithms.  <a href="../../df/d29/a01329.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:dd/d5d/a01325"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#dd/d5d/a01325">MapMove</a></td></tr>
<tr class="memdesc:dd/d5d/a01325"><td class="mdescLeft">&#160;</td><td class="mdescRight">A struct to know informations about th movement of something in the map.  <a href="../../da/d53/a00265.php#dd/d5d/a01325">More...</a><br /></td></tr>
<tr class="separator:dd/d5d/a01325"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d2a/a01333.php">Matrix</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to represent matrix.  <a href="../../dc/d2a/a01333.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/dec/a01337.php">Mushroom</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A mushroom.  <a href="../../db/dec/a01337.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d34/a01261.php">MyCrypt</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to test a homemade algorithm for encryption.  <a href="../../de/d34/a01261.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d1/d3b/a01429"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d1/d3b/a01429">Node</a></td></tr>
<tr class="memdesc:d1/d3b/a01429"><td class="mdescLeft">&#160;</td><td class="mdescRight">A struct to define a node for the tree.  <a href="../../da/d53/a00265.php#d1/d3b/a01429">More...</a><br /></td></tr>
<tr class="separator:d1/d3b/a01429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/da0/a01341.php">NotCopyable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to let some other not to be copyable.  <a href="../../de/da0/a01341.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/deb/a01345.php">NotInstantiable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Let a class being only an abstract class.  <a href="../../d4/deb/a01345.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d6c/a01349.php">Object</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An object.  <a href="../../de/d6c/a01349.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d10/a01357.php">Path</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage a path computed by the map.  <a href="../../df/d10/a01357.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d1f/a01361.php">Pathfinding</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to implement some pathfinding algorithms.  <a href="../../d2/d1f/a01361.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d81/a01365.php">PathfindingDijkstra</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the Dijkstra algorithm.  <a href="../../d7/d81/a01365.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d17/a01369.php">PathfindingException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">All exceptions that could be thrown by the pathfinding algorithm.  <a href="../../d1/d17/a01369.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dad/a01353.php">PathfindingNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A node for the path.  <a href="../../d4/dad/a01353.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d38/a01373.php">PathfindingProblem</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to group every pathfinding problems in one way to use it.  <a href="../../d7/d38/a01373.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/dea/a01377.php">Plant</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A plant.  <a href="../../d3/dea/a01377.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d77/a01381.php">Player</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A player that can be a child from any class.  <a href="../../da/d77/a01381.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d68/a01385.php">PlayerAbstraction</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A player that can be a child from any class.  <a href="../../df/d68/a01385.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d6f/a01445.php">Point</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A struct to define a point in space.  <a href="../../d9/d6f/a01445.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d1c/a01397.php">PureVirtual</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to make some other to be abstract class.  <a href="../../d7/d1c/a01397.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d5/df9/a01441"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a></td></tr>
<tr class="memdesc:d5/df9/a01441"><td class="mdescLeft">&#160;</td><td class="mdescRight">A container for four values.  <a href="../../da/d53/a00265.php#d5/df9/a01441">More...</a><br /></td></tr>
<tr class="separator:d5/df9/a01441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d1d/a01105.php">queue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of std::queue.  <a href="../../de/d1d/a01105.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/df4/a01401.php">Referenced</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to have a reference to the class' pointer.  <a href="../../dc/df4/a01401.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d19/a01217.php">Reinit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../da/d19/a01217.php" title="Reinit the color in the console.">Reinit</a> the color in the console.  <a href="../../da/d19/a01217.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d1a/a01405.php">RNG</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to simplify the use of random.  <a href="../../d4/d1a/a01405.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dd8/a01265.php">RSA</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to use the <a class="el" href="../../da/dd8/a01265.php" title="A class to use the RSA algorithm for encryption.">RSA</a> algorithm for encryption.  <a href="../../da/dd8/a01265.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/dab/a01237.php">SetPrecision</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the precision of a std::ostream and save the default value.  <a href="../../dc/dab/a01237.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/de7/a01257.php">SHA2</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of sha256 encryption.  <a href="../../d9/de7/a01257.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dfa/a01097.php">stack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of std::stack.  <a href="../../d1/dfa/a01097.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d6e/a01409.php">Stone</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A stone.  <a href="../../d9/d6e/a01409.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbf/a01109.php">t_queue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An thread-safe implementation of queue.  <a href="../../d8/dbf/a01109.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d99/a01101.php">t_stack</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An thread-safe implementation of stack.  <a href="../../de/d99/a01101.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/daf/a01417.php">Threadable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to let another one to be threadable with update() member in a thread.  <a href="../../de/daf/a01417.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/da1/a01233.php">ThreadCout</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to use std::cout thread safe.  <a href="../../d6/da1/a01233.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d1c/a01229.php">ThreadEndlCout</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to use std::endl in <a class="el" href="../../d6/da1/a01233.php" title="A class to use std::cout thread safe.">ThreadCout</a>.  <a href="../../db/d1c/a01229.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d20/a01421.php">Time</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to play with dates.  <a href="../../d4/d20/a01421.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/df2/a01425.php">Timer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A timer to do something at the end.  <a href="../../db/df2/a01425.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d9b/a01433.php">Tree</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class to manage a binary tree.  <a href="../../d2/d9b/a01433.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d9/db0/a01437"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a></td></tr>
<tr class="memdesc:d9/db0/a01437"><td class="mdescLeft">&#160;</td><td class="mdescRight">A container for three values.  <a href="../../da/d53/a00265.php#d9/db0/a01437">More...</a><br /></td></tr>
<tr class="separator:d9/db0/a01437"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d95/a01449.php">vector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add some features to std::vector.  <a href="../../d2/d95/a01449.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dae/a01453.php">Vegetal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A vegetal.  <a href="../../d9/dae/a01453.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d9/d5c/a01321"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#d9/d5c/a01321">WorldDimensions</a></td></tr>
<tr class="memdesc:d9/d5c/a01321"><td class="mdescLeft">&#160;</td><td class="mdescRight">An object to group the dimensions of the world.  <a href="../../da/d53/a00265.php#d9/d5c/a01321">More...</a><br /></td></tr>
<tr class="separator:d9/d5c/a01321"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aba609827ae566c40802bf828ab5a5a3c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aba609827ae566c40802bf828ab5a5a3c">pair_str</a> = std::pair&lt; std::string, std::string &gt;</td></tr>
<tr class="memdesc:aba609827ae566c40802bf828ab5a5a3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias.  <a href="../../da/d53/a00265.php#aba609827ae566c40802bf828ab5a5a3c">More...</a><br /></td></tr>
<tr class="separator:aba609827ae566c40802bf828ab5a5a3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac34b1d11dd4820f0cfdee1e16a1c275"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aac34b1d11dd4820f0cfdee1e16a1c275">VI</a> = std::vector&lt; int &gt;</td></tr>
<tr class="memdesc:aac34b1d11dd4820f0cfdee1e16a1c275"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias.  <a href="../../da/d53/a00265.php#aac34b1d11dd4820f0cfdee1e16a1c275">More...</a><br /></td></tr>
<tr class="separator:aac34b1d11dd4820f0cfdee1e16a1c275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71d7894d7ddf1920b361bca7a2bb1ae5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a71d7894d7ddf1920b361bca7a2bb1ae5">vector_str</a> = std::vector&lt; std::string &gt;</td></tr>
<tr class="memdesc:a71d7894d7ddf1920b361bca7a2bb1ae5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias.  <a href="../../da/d53/a00265.php#a71d7894d7ddf1920b361bca7a2bb1ae5">More...</a><br /></td></tr>
<tr class="separator:a71d7894d7ddf1920b361bca7a2bb1ae5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3aa994c4b6d9eccce0cf840e6c0a731"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ab3aa994c4b6d9eccce0cf840e6c0a731">map_str</a> = std::map&lt; std::string, std::string &gt;</td></tr>
<tr class="memdesc:ab3aa994c4b6d9eccce0cf840e6c0a731"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias.  <a href="../../da/d53/a00265.php#ab3aa994c4b6d9eccce0cf840e6c0a731">More...</a><br /></td></tr>
<tr class="separator:ab3aa994c4b6d9eccce0cf840e6c0a731"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc72a1c83ec918a79447dfa996951da3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#abc72a1c83ec918a79447dfa996951da3">MapLine</a> = std::vector&lt; <a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9ede">Tile</a> &gt;</td></tr>
<tr class="separator:abc72a1c83ec918a79447dfa996951da3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb393906487fbd42d8ae5f6831423fbb"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aeb393906487fbd42d8ae5f6831423fbb">MapArray</a> = std::vector&lt; <a class="el" href="../../da/d53/a00265.php#abc72a1c83ec918a79447dfa996951da3">MapLine</a> &gt;</td></tr>
<tr class="separator:aeb393906487fbd42d8ae5f6831423fbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21976f3e9e8d360ccff90c8ead193a5e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a21976f3e9e8d360ccff90c8ead193a5e">thread</a> = std::thread</td></tr>
<tr class="separator:a21976f3e9e8d360ccff90c8ead193a5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7139c2a1e77039f963009520820d8c87"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a7139c2a1e77039f963009520820d8c87">mutex</a> = std::mutex</td></tr>
<tr class="separator:a7139c2a1e77039f963009520820d8c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3d39a7992ee9e893a83ab18066f79d"><td class="memItemLeft" align="right" valign="top">typedef long double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a></td></tr>
<tr class="separator:a0d3d39a7992ee9e893a83ab18066f79d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6982966fec37b802e584caec858e2e29"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6982966fec37b802e584caec858e2e29">double32_t</a> = double</td></tr>
<tr class="separator:a6982966fec37b802e584caec858e2e29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda27badcbfcfc854854c6ab094cf34e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> = long double</td></tr>
<tr class="separator:adda27badcbfcfc854854c6ab094cf34e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75c328d040057a44e61caef894c02afe"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a75c328d040057a44e61caef894c02afe">trio_str</a> = <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; std::string &gt;</td></tr>
<tr class="separator:a75c328d040057a44e61caef894c02afe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3efdc3dde9fecbe97dcf74de1df3165d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a3efdc3dde9fecbe97dcf74de1df3165d">quatuor_str</a> = <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; std::string &gt;</td></tr>
<tr class="separator:a3efdc3dde9fecbe97dcf74de1df3165d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ae124ce77f8e386663ac11e2e35e6070a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070a">Colors</a> { <br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa4648822616bc86180727464a1e6c6312">Colors::BLACK_F</a> = 30, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa6c91c7a0d965eea06426a9d94fed419f">Colors::RED_F</a> = 31, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aac9cc84994b2dc998400606f509a5f39d">Colors::GREEN_F</a> = 32, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aac1cfbf30b4d84302148c80564f09a2f7">Colors::YELLOW_F</a> = 33, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aaaac26079ece66386f4c2cf268d474795">Colors::BLUE_F</a> = 34, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aab8176b797e421a3d45ed5a872d872591">Colors::PURPLE_F</a> = 35, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa131f0f8b48b6ef48d2d3093b20081110">Colors::CYAN_F</a> = 36, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa38ead0a9861da91e3e5aad34b7a1dbfe">Colors::GREY_F</a> = 37, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aaa86522df36b902b8e14c670dda459f1f">Colors::LIGHT_BLACK_F</a> = 90, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa889b14723d6bc4c0ac8bb1e13480ad6e">Colors::LIGHT_RED_F</a> = 91, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa9a372d70c82fc984f7c475342784fb25">Colors::LIGHT_GREEN_F</a> = 92, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa8a64c210ea569e6832792e099c006157">Colors::LIGHT_YELLOW_F</a> = 93, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa383a03eb7a3c8a6e508915b5abfd1f55">Colors::LIGHT_BLUE_F</a> = 94, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aaf7fa27f9a891a06e7aab7764b7c87744">Colors::LIGHT_PURPLE_F</a> = 95, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa1016baf606406c4b466ae02d7e8d249b">Colors::LIGHT_CYAN_F</a> = 96, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aaf0d423059b6f4ad707d65956c1a43402">Colors::LIGHT_GREY_F</a> = 97, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aabfc78599c77b7eb3c037c23f1bde963a">Colors::BLACK_B</a> = 40, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa07262f1edc5408b021950dc9a12837c7">Colors::RED_B</a> = 41, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa3bfe655ef7bb19c04ebf9a5ebabe975e">Colors::GREEN_B</a> = 42, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa62a3874ee2f47d3a664fda4a63c193a3">Colors::YELLOW_B</a> = 43, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa19995eb9ec42ffbe11647f8090e9f4fe">Colors::BLUE_B</a> = 44, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aab754547a82033c3c904e91984b530326">Colors::PURPLE_B</a> = 45, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aae0f5f8e09d8f4e0925884dd94fc3e870">Colors::CYAN_B</a> = 46, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa90bd0646259d8ab65dd352bcd1ead16e">Colors::GREY_B</a> = 47, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aadf2fe24817131afc02153bf31759d18b">Colors::LIGHT_BLACK_B</a> = 100, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa3a29105a7f33b752d0342ec1e44023af">Colors::LIGHT_RED_B</a> = 101, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa79f2fcacd6d4451c79096ed3e460e1e9">Colors::LIGHT_GREEN_B</a> = 102, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa73f0b577c984186157b9d89348faf4f3">Colors::LIGHT_YELLOW_B</a> = 103, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa77891b4842905f3aa098fae908dd5db9">Colors::LIGHT_BLUE_B</a> = 104, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa10435c0f4e6c9f1df07383e39da2064e">Colors::LIGHT_PURPLE_B</a> = 105, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa1d4b785bf14640105bb7b6e45d1d5528">Colors::LIGHT_CYAN_B</a> = 106, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aaa548ce608701dcb3a6b2146e2e6b7f73">Colors::LIGHT_GREY_B</a> = 107, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa1e23852820b9154316c7c06e2b7ba051">Colors::NORMAL</a> = 0, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa2909dd0e0336f10b6da9735b859a3d19">Colors::BOLD</a> = 1, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa8160fba05a5a291372a94bc22b55f62b">Colors::SHADOW</a> = 2, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa25093123b8943308104129e1d762f3b7">Colors::ITALIC</a> = 3, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa0086c73c90c261db630b4dc8aea09bcf">Colors::UNDERLINE</a> = 4, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aaa2727ae72447eea06d4cc0ef67187280">Colors::INVERT</a> = 7, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa1e50e487f8672658546e3609404b53df">Colors::HIDE</a> = 8, 
<a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070aa04dd53a8e6c2306e9bbf944c1d6047f2">Colors::CROSS</a> = 9
<br />
 }</td></tr>
<tr class="memdesc:ae124ce77f8e386663ac11e2e35e6070a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colors list.  <a href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070a">More...</a><br /></td></tr>
<tr class="separator:ae124ce77f8e386663ac11e2e35e6070a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55fd359a467c1bfe9d2f72c227bb1706"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a55fd359a467c1bfe9d2f72c227bb1706">Direction</a> { <br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898afbaedde498cdead4f2780217646e9ba1">UP</a> = 0, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898ac4e0e4e3118472beeb2ae75827450f1f">DOWN</a> = 1, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a21507b40c80068eda19865706fdc2403">RIGHT</a> = 2, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a684d325a7303f52e64011467ff5c5758">LEFT</a> = 3, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898ab50339a10e1de285ac99d4c3990b8693">NONE</a> = 4
<br />
 }</td></tr>
<tr class="memdesc:a55fd359a467c1bfe9d2f72c227bb1706"><td class="mdescLeft">&#160;</td><td class="mdescRight">Directions to move.  <a href="../../da/d53/a00265.php#a55fd359a467c1bfe9d2f72c227bb1706">More...</a><br /></td></tr>
<tr class="separator:a55fd359a467c1bfe9d2f72c227bb1706"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7350be9df9566241dfb80071a89f9ede"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9ede">Tile</a> { <a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9edeab50339a10e1de285ac99d4c3990b8693">Tile::NONE</a> = 0, 
<a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9edea2399122c182da0d5946e2937bb73edf2">Tile::OBSTACLE</a>, 
<a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9edeadedcb56e75fe1488e20865e0ea36d0b9">Tile::GROUND</a>, 
<a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9edeabb1ca97ec761fc37101737ba0aa2e7c5">Tile::ERROR</a>
 }</td></tr>
<tr class="memdesc:a7350be9df9566241dfb80071a89f9ede"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tiles of the map.  <a href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9ede">More...</a><br /></td></tr>
<tr class="separator:a7350be9df9566241dfb80071a89f9ede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a372ef82d72716aed789680d0a84c06d3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3">CaractSet</a> { <br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3a198de4e683a1a1dbd64f56f1796e360c">ALPHA</a> = 1, 
<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3a9faad38e6204b43f9a15f1adecb9609a">LOWER</a> = 2, 
<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3abe645a90a98231a6ec57513cbcd0d7e2">UPPER</a> = 4, 
<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3a4c8dd61045696a4703edd23b8a21e4d7">NUM</a> = 8, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3a0d613d61e790e44c8751022bbc7f2555">SPEC</a> = 16, 
<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3accd227a8556bcfc0c096afc4f3ecce59">READ</a> = 32, 
<a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3abe31a72161ed89098d2ab77b3d258ff5">ALL</a> = 512
<br />
 }</td></tr>
<tr class="separator:a372ef82d72716aed789680d0a84c06d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a476a24d6aeedfa55efcaee6379946a75"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a476a24d6aeedfa55efcaee6379946a75">TREE_SORT</a> { <a class="el" href="../../da/d53/a00265.php#a476a24d6aeedfa55efcaee6379946a75a8f22891e42808a1ec2280811f4954151">ASC</a>, 
<a class="el" href="../../da/d53/a00265.php#a476a24d6aeedfa55efcaee6379946a75acec043bd98e586f6d34ee5a4aefda509">DESC</a>
 }</td></tr>
<tr class="memdesc:a476a24d6aeedfa55efcaee6379946a75"><td class="mdescLeft">&#160;</td><td class="mdescRight">The sorting order of the tree.  <a href="../../da/d53/a00265.php#a476a24d6aeedfa55efcaee6379946a75">More...</a><br /></td></tr>
<tr class="separator:a476a24d6aeedfa55efcaee6379946a75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ee27656d8eb6e8a09407841cd00898"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898">TREE_DIRECTION</a> { <br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a13d6f38e0f10d479e85a13dcf6a8957f">RIGHT</a>, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a52aa7e4298499294d2e07e10c6af50a7">LEFT</a>, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a2d73725011f55395bc0e113263b5b874">NONE</a>, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898afbaedde498cdead4f2780217646e9ba1">UP</a> = 0, 
<br />
&#160;&#160;<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898ac4e0e4e3118472beeb2ae75827450f1f">DOWN</a> = 1, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a21507b40c80068eda19865706fdc2403">RIGHT</a> = 2, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898a684d325a7303f52e64011467ff5c5758">LEFT</a> = 3, 
<a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898ab50339a10e1de285ac99d4c3990b8693">NONE</a> = 4
<br />
 }</td></tr>
<tr class="separator:ae3ee27656d8eb6e8a09407841cd00898"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ad751f3d04e342cbe86c561683c3bd99c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad751f3d04e342cbe86c561683c3bd99c"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad751f3d04e342cbe86c561683c3bd99c">implode</a> (const std::vector&lt; T &gt; &amp;a, const std::string &amp;glue=&quot;&quot;)</td></tr>
<tr class="memdesc:ad751f3d04e342cbe86c561683c3bd99c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stick the <em>a</em> vector with the <em>glue</em> given.  <a href="../../da/d53/a00265.php#ad751f3d04e342cbe86c561683c3bd99c">More...</a><br /></td></tr>
<tr class="separator:ad751f3d04e342cbe86c561683c3bd99c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0029a835651d350c925a43fd718ab590"><td class="memTemplParams" colspan="2">template&lt;typename Array &gt; </td></tr>
<tr class="memitem:a0029a835651d350c925a43fd718ab590"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0029a835651d350c925a43fd718ab590">print_r</a> (const Array &amp;a)</td></tr>
<tr class="memdesc:a0029a835651d350c925a43fd718ab590"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the content of an array.  <a href="../../da/d53/a00265.php#a0029a835651d350c925a43fd718ab590">More...</a><br /></td></tr>
<tr class="separator:a0029a835651d350c925a43fd718ab590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71d86de24ac44a702d65c29bcb96c686"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a71d86de24ac44a702d65c29bcb96c686"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; V &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a71d86de24ac44a702d65c29bcb96c686">rewrite</a> (const std::vector&lt; V &gt; &amp;table, unsigned index)</td></tr>
<tr class="memdesc:a71d86de24ac44a702d65c29bcb96c686"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rewrite a vector array without the value at the given index.  <a href="../../da/d53/a00265.php#a71d86de24ac44a702d65c29bcb96c686">More...</a><br /></td></tr>
<tr class="separator:a71d86de24ac44a702d65c29bcb96c686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad53bf266a5db5dc112e71ebe3c78946e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad53bf266a5db5dc112e71ebe3c78946e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad53bf266a5db5dc112e71ebe3c78946e">contains</a> (const std::vector&lt; T &gt; &amp;table, T value)</td></tr>
<tr class="memdesc:ad53bf266a5db5dc112e71ebe3c78946e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verify if a vector contains or not something.  <a href="../../da/d53/a00265.php#ad53bf266a5db5dc112e71ebe3c78946e">More...</a><br /></td></tr>
<tr class="separator:ad53bf266a5db5dc112e71ebe3c78946e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5996fcf8097a903a5461a6035ff0f98d"><td class="memTemplParams" colspan="2">template&lt;typename Something &gt; </td></tr>
<tr class="memitem:a5996fcf8097a903a5461a6035ff0f98d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a5996fcf8097a903a5461a6035ff0f98d">print_all</a> (const Something &amp;data, bool change=false)</td></tr>
<tr class="memdesc:a5996fcf8097a903a5461a6035ff0f98d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints approximately everything.  <a href="../../da/d53/a00265.php#a5996fcf8097a903a5461a6035ff0f98d">More...</a><br /></td></tr>
<tr class="separator:a5996fcf8097a903a5461a6035ff0f98d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1c42a8b9412d2afa3b486c5e629f752"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af1c42a8b9412d2afa3b486c5e629f752">array2Dto1D</a> (size_t x, size_t y, size_t maxX)</td></tr>
<tr class="separator:af1c42a8b9412d2afa3b486c5e629f752"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25ccd89a356e58d7653bd783306d2942"><td class="memItemLeft" align="right" valign="top">std::pair&lt; size_t, size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a25ccd89a356e58d7653bd783306d2942">array1Dto2D</a> (size_t index, size_t maxX)</td></tr>
<tr class="separator:a25ccd89a356e58d7653bd783306d2942"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a33cf86c36584f92495307f8e68a00"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a53a33cf86c36584f92495307f8e68a00">array2Dto1D</a> (const <a class="el" href="../../d9/d6f/a01445.php">Point</a> &amp;pt, size_t maxX)</td></tr>
<tr class="separator:a53a33cf86c36584f92495307f8e68a00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9364f91b9303a9a63793512ad3f18e4"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:aa9364f91b9303a9a63793512ad3f18e4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa9364f91b9303a9a63793512ad3f18e4">vector2DPrint</a> (const std::vector&lt; std::vector&lt; T &gt; &gt; values, int autosize=0, std::ostream &amp;os=std::cout)</td></tr>
<tr class="separator:aa9364f91b9303a9a63793512ad3f18e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac3317dd3d37f382f940ee207bd4dd8e"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:aac3317dd3d37f382f940ee207bd4dd8e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aac3317dd3d37f382f940ee207bd4dd8e">vector2DPrintInverted</a> (const std::vector&lt; std::vector&lt; T &gt; &gt; values, int autosize=0, std::ostream &amp;os=std::cout, int shift=0)</td></tr>
<tr class="separator:aac3317dd3d37f382f940ee207bd4dd8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3638871c13207c94b12eb5760dadf6f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:af3638871c13207c94b12eb5760dadf6f"><td class="memTemplItemLeft" align="right" valign="top">std::set&lt; std::pair&lt; T, U &gt;, std::function&lt; bool(std::pair&lt; T, U &gt;, std::pair&lt; T, U &gt;) &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af3638871c13207c94b12eb5760dadf6f">sortMapValuesAsc</a> (std::map&lt; T, U &gt; array)</td></tr>
<tr class="separator:af3638871c13207c94b12eb5760dadf6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ed3b7735514675ef4f03b28d5b7b4a3"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U &gt; </td></tr>
<tr class="memitem:a5ed3b7735514675ef4f03b28d5b7b4a3"><td class="memTemplItemLeft" align="right" valign="top">std::set&lt; std::pair&lt; T, U &gt;, std::function&lt; bool(std::pair&lt; T, U &gt;, std::pair&lt; T, U &gt;) &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a5ed3b7735514675ef4f03b28d5b7b4a3">sortMapValuesDesc</a> (std::map&lt; T, U &gt; array)</td></tr>
<tr class="separator:a5ed3b7735514675ef4f03b28d5b7b4a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66e560b6579bb202abdcee37283121a0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a66e560b6579bb202abdcee37283121a0"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a66e560b6579bb202abdcee37283121a0">toBigVal</a> (T in)</td></tr>
<tr class="memdesc:a66e560b6579bb202abdcee37283121a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a value from something to std::string.  <a href="../../da/d53/a00265.php#a66e560b6579bb202abdcee37283121a0">More...</a><br /></td></tr>
<tr class="separator:a66e560b6579bb202abdcee37283121a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea3616a95b7e00c3c401fe7f5d907ba8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aea3616a95b7e00c3c401fe7f5d907ba8">fromBigVal</a> (char in)</td></tr>
<tr class="memdesc:aea3616a95b7e00c3c401fe7f5d907ba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a char in an int.  <a href="../../da/d53/a00265.php#aea3616a95b7e00c3c401fe7f5d907ba8">More...</a><br /></td></tr>
<tr class="separator:aea3616a95b7e00c3c401fe7f5d907ba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ebc06a4ba39c08505854aa29dcd0f0e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6ebc06a4ba39c08505854aa29dcd0f0e">fromBigVal</a> (const std::string &amp;in)</td></tr>
<tr class="memdesc:a6ebc06a4ba39c08505854aa29dcd0f0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a std::string in an int.  <a href="../../da/d53/a00265.php#a6ebc06a4ba39c08505854aa29dcd0f0e">More...</a><br /></td></tr>
<tr class="separator:a6ebc06a4ba39c08505854aa29dcd0f0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49c8e33d55da52fabdb3f09f2fd3e5b2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a49c8e33d55da52fabdb3f09f2fd3e5b2">operator==</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b) noexcept</td></tr>
<tr class="memdesc:a49c8e33d55da52fabdb3f09f2fd3e5b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>.  <a href="../../da/d53/a00265.php#a49c8e33d55da52fabdb3f09f2fd3e5b2">More...</a><br /></td></tr>
<tr class="separator:a49c8e33d55da52fabdb3f09f2fd3e5b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72149c6d15e16114c649ecb03aec7f81"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a72149c6d15e16114c649ecb03aec7f81">operator&lt;</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b) noexcept</td></tr>
<tr class="memdesc:a72149c6d15e16114c649ecb03aec7f81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>.  <a href="../../da/d53/a00265.php#a72149c6d15e16114c649ecb03aec7f81">More...</a><br /></td></tr>
<tr class="separator:a72149c6d15e16114c649ecb03aec7f81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8106aa588d48c9fbed5e30e22fd55f76"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a8106aa588d48c9fbed5e30e22fd55f76">operator!=</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b) noexcept</td></tr>
<tr class="memdesc:a8106aa588d48c9fbed5e30e22fd55f76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>.  <a href="../../da/d53/a00265.php#a8106aa588d48c9fbed5e30e22fd55f76">More...</a><br /></td></tr>
<tr class="separator:a8106aa588d48c9fbed5e30e22fd55f76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61257b7f63f915629b98d2b57933d65e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a61257b7f63f915629b98d2b57933d65e">operator&lt;=</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b) noexcept</td></tr>
<tr class="memdesc:a61257b7f63f915629b98d2b57933d65e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>.  <a href="../../da/d53/a00265.php#a61257b7f63f915629b98d2b57933d65e">More...</a><br /></td></tr>
<tr class="separator:a61257b7f63f915629b98d2b57933d65e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83c8849718e8a8532282e6f1c80ceca0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a83c8849718e8a8532282e6f1c80ceca0">operator&gt;=</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b) noexcept</td></tr>
<tr class="memdesc:a83c8849718e8a8532282e6f1c80ceca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>.  <a href="../../da/d53/a00265.php#a83c8849718e8a8532282e6f1c80ceca0">More...</a><br /></td></tr>
<tr class="separator:a83c8849718e8a8532282e6f1c80ceca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31eb09e89b0015d54768c4510e59c780"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a31eb09e89b0015d54768c4510e59c780">sq</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a)</td></tr>
<tr class="memdesc:a31eb09e89b0015d54768c4510e59c780"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the square of <em>a</em>.  <a href="../../da/d53/a00265.php#a31eb09e89b0015d54768c4510e59c780">More...</a><br /></td></tr>
<tr class="separator:a31eb09e89b0015d54768c4510e59c780"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3a712e4de66375b1a188fa464c968e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae3a712e4de66375b1a188fa464c968e2">sqrt</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a)</td></tr>
<tr class="memdesc:ae3a712e4de66375b1a188fa464c968e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the squareroot of <em>a</em>.  <a href="../../da/d53/a00265.php#ae3a712e4de66375b1a188fa464c968e2">More...</a><br /></td></tr>
<tr class="separator:ae3a712e4de66375b1a188fa464c968e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6ca3061a339d883c257105bd831efd1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad6ca3061a339d883c257105bd831efd1">ppcm</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b)</td></tr>
<tr class="memdesc:ad6ca3061a339d883c257105bd831efd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the ppcm.  <a href="../../da/d53/a00265.php#ad6ca3061a339d883c257105bd831efd1">More...</a><br /></td></tr>
<tr class="separator:ad6ca3061a339d883c257105bd831efd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23f629777bd39a54b33491cb1223da01"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a23f629777bd39a54b33491cb1223da01">isDivisor</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a, const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;b)</td></tr>
<tr class="memdesc:a23f629777bd39a54b33491cb1223da01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return <b>true</b> if <em>a</em> / <em>b</em> = 0.  <a href="../../da/d53/a00265.php#a23f629777bd39a54b33491cb1223da01">More...</a><br /></td></tr>
<tr class="separator:a23f629777bd39a54b33491cb1223da01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50868f33f43952d24f8449e883d3fd99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a50868f33f43952d24f8449e883d3fd99">abs</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;a)</td></tr>
<tr class="memdesc:a50868f33f43952d24f8449e883d3fd99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the absolute value of <em>a</em>.  <a href="../../da/d53/a00265.php#a50868f33f43952d24f8449e883d3fd99">More...</a><br /></td></tr>
<tr class="separator:a50868f33f43952d24f8449e883d3fd99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a164a9c100a128e971c6becd38fe7db82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a164a9c100a128e971c6becd38fe7db82">operator++</a> (<a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;in, int) noexcept</td></tr>
<tr class="memdesc:a164a9c100a128e971c6becd38fe7db82"><td class="mdescLeft">&#160;</td><td class="mdescRight">++<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>  <a href="../../da/d53/a00265.php#a164a9c100a128e971c6becd38fe7db82">More...</a><br /></td></tr>
<tr class="separator:a164a9c100a128e971c6becd38fe7db82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd0ec761914252fc66c1180845c1fb36"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#afd0ec761914252fc66c1180845c1fb36">operator++</a> (<a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;in) noexcept</td></tr>
<tr class="memdesc:afd0ec761914252fc66c1180845c1fb36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Big++.  <a href="../../da/d53/a00265.php#afd0ec761914252fc66c1180845c1fb36">More...</a><br /></td></tr>
<tr class="separator:afd0ec761914252fc66c1180845c1fb36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69988c1c7ee2ad5814c297f749588e78"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a69988c1c7ee2ad5814c297f749588e78">operator--</a> (<a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;in, int) noexcept</td></tr>
<tr class="memdesc:a69988c1c7ee2ad5814c297f749588e78"><td class="mdescLeft">&#160;</td><td class="mdescRight">&ndash;<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>  <a href="../../da/d53/a00265.php#a69988c1c7ee2ad5814c297f749588e78">More...</a><br /></td></tr>
<tr class="separator:a69988c1c7ee2ad5814c297f749588e78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad41a22ed7df2868dc7c42872004fc957"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad41a22ed7df2868dc7c42872004fc957">operator--</a> (<a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;in) noexcept</td></tr>
<tr class="memdesc:ad41a22ed7df2868dc7c42872004fc957"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>&ndash;.  <a href="../../da/d53/a00265.php#ad41a22ed7df2868dc7c42872004fc957">More...</a><br /></td></tr>
<tr class="separator:ad41a22ed7df2868dc7c42872004fc957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68941be2cb0a91ce0a75b0992c772e19"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a68941be2cb0a91ce0a75b0992c772e19">operator+</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;in) noexcept</td></tr>
<tr class="memdesc:a68941be2cb0a91ce0a75b0992c772e19"><td class="mdescLeft">&#160;</td><td class="mdescRight">+<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>  <a href="../../da/d53/a00265.php#a68941be2cb0a91ce0a75b0992c772e19">More...</a><br /></td></tr>
<tr class="separator:a68941be2cb0a91ce0a75b0992c772e19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa34a809adea5c0391ccc070f4b6fac4b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa34a809adea5c0391ccc070f4b6fac4b">operator-</a> (const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;in) noexcept</td></tr>
<tr class="memdesc:aa34a809adea5c0391ccc070f4b6fac4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">-<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>  <a href="../../da/d53/a00265.php#aa34a809adea5c0391ccc070f4b6fac4b">More...</a><br /></td></tr>
<tr class="separator:aa34a809adea5c0391ccc070f4b6fac4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace8a4328114062b56cf578ad92df821f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ace8a4328114062b56cf578ad92df821f">collidesC</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> r1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> x1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> y1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> r2, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> x2, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> y2)</td></tr>
<tr class="memdesc:ace8a4328114062b56cf578ad92df821f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute if there is a collision between two circles.  <a href="../../da/d53/a00265.php#ace8a4328114062b56cf578ad92df821f">More...</a><br /></td></tr>
<tr class="separator:ace8a4328114062b56cf578ad92df821f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab43dbb509e6ac3b52cd7767a1fb6bdaa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ab43dbb509e6ac3b52cd7767a1fb6bdaa">collidesR</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> x1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> y1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> w1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> h1, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> x2, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> y2, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> w2, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> h2)</td></tr>
<tr class="memdesc:ab43dbb509e6ac3b52cd7767a1fb6bdaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute if there is a collision between two rectangles.  <a href="../../da/d53/a00265.php#ab43dbb509e6ac3b52cd7767a1fb6bdaa">More...</a><br /></td></tr>
<tr class="separator:ab43dbb509e6ac3b52cd7767a1fb6bdaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbb1b1f3a194f48bab3af872f65b9757"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#adbb1b1f3a194f48bab3af872f65b9757">collidesRC</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> rx, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> ry, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> w, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> h, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> cx, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> cy, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> r)</td></tr>
<tr class="memdesc:adbb1b1f3a194f48bab3af872f65b9757"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute if there is a collision between a rectangle and a circle.  <a href="../../da/d53/a00265.php#adbb1b1f3a194f48bab3af872f65b9757">More...</a><br /></td></tr>
<tr class="separator:adbb1b1f3a194f48bab3af872f65b9757"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae694a8102421f25c163a0ef7a9e903e2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae694a8102421f25c163a0ef7a9e903e2">collidesPC</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> cx, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> cy, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> r, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> x, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> y)</td></tr>
<tr class="memdesc:ae694a8102421f25c163a0ef7a9e903e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute if there is a collision between a point and a circle.  <a href="../../da/d53/a00265.php#ae694a8102421f25c163a0ef7a9e903e2">More...</a><br /></td></tr>
<tr class="separator:ae694a8102421f25c163a0ef7a9e903e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c001118da32a4466802e0b378af661b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a3c001118da32a4466802e0b378af661b">collidesPR</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> rx, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> ry, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> w, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> h, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> x, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> y)</td></tr>
<tr class="memdesc:a3c001118da32a4466802e0b378af661b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute if there is a collision between a point and a rectangle.  <a href="../../da/d53/a00265.php#a3c001118da32a4466802e0b378af661b">More...</a><br /></td></tr>
<tr class="separator:a3c001118da32a4466802e0b378af661b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f9411fa8041c4f9f81519deeba4a0a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af6f9411fa8041c4f9f81519deeba4a0a">ProjectionSurSegment</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> Cx, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> Cy, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> Ax, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> Ay, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> Bx, <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> By)</td></tr>
<tr class="memdesc:af6f9411fa8041c4f9f81519deeba4a0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute if there is a collision on a segment.  <a href="../../da/d53/a00265.php#af6f9411fa8041c4f9f81519deeba4a0a">More...</a><br /></td></tr>
<tr class="separator:af6f9411fa8041c4f9f81519deeba4a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae057a7c5042a3cacb444199a2b6b7598"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae057a7c5042a3cacb444199a2b6b7598"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598">tos</a> (const Type &amp;in)</td></tr>
<tr class="memdesc:ae057a7c5042a3cacb444199a2b6b7598"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> in a string.  <a href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598">More...</a><br /></td></tr>
<tr class="separator:ae057a7c5042a3cacb444199a2b6b7598"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a476d57ae34f933a4192553496ec91208"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a476d57ae34f933a4192553496ec91208"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a476d57ae34f933a4192553496ec91208">toi</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a476d57ae34f933a4192553496ec91208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in int.  <a href="../../da/d53/a00265.php#a476d57ae34f933a4192553496ec91208">More...</a><br /></td></tr>
<tr class="separator:a476d57ae34f933a4192553496ec91208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c6193ba2e9669603892d2508cbc6668"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a3c6193ba2e9669603892d2508cbc6668"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a3c6193ba2e9669603892d2508cbc6668">tod</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a3c6193ba2e9669603892d2508cbc6668"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in double.  <a href="../../da/d53/a00265.php#a3c6193ba2e9669603892d2508cbc6668">More...</a><br /></td></tr>
<tr class="separator:a3c6193ba2e9669603892d2508cbc6668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ed92c0cecb59861393802ac313a2b0f"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a6ed92c0cecb59861393802ac313a2b0f"><td class="memTemplItemLeft" align="right" valign="top">float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6ed92c0cecb59861393802ac313a2b0f">tof</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a6ed92c0cecb59861393802ac313a2b0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in float.  <a href="../../da/d53/a00265.php#a6ed92c0cecb59861393802ac313a2b0f">More...</a><br /></td></tr>
<tr class="separator:a6ed92c0cecb59861393802ac313a2b0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a818831d2e74dbfa3be2150c38a9afa31"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a818831d2e74dbfa3be2150c38a9afa31"><td class="memTemplItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a818831d2e74dbfa3be2150c38a9afa31">tou</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a818831d2e74dbfa3be2150c38a9afa31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in unsigned int.  <a href="../../da/d53/a00265.php#a818831d2e74dbfa3be2150c38a9afa31">More...</a><br /></td></tr>
<tr class="separator:a818831d2e74dbfa3be2150c38a9afa31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21f9e69f4ccff705b65007a1ac7063ef"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a21f9e69f4ccff705b65007a1ac7063ef"><td class="memTemplItemLeft" align="right" valign="top">unsigned long long int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a21f9e69f4ccff705b65007a1ac7063ef">tov</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a21f9e69f4ccff705b65007a1ac7063ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in unsigned long long int.  <a href="../../da/d53/a00265.php#a21f9e69f4ccff705b65007a1ac7063ef">More...</a><br /></td></tr>
<tr class="separator:a21f9e69f4ccff705b65007a1ac7063ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917e4be62e6930b138038ae16ebc7904"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a917e4be62e6930b138038ae16ebc7904"><td class="memTemplItemLeft" align="right" valign="top">size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a917e4be62e6930b138038ae16ebc7904">tost</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a917e4be62e6930b138038ae16ebc7904"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in size_t.  <a href="../../da/d53/a00265.php#a917e4be62e6930b138038ae16ebc7904">More...</a><br /></td></tr>
<tr class="separator:a917e4be62e6930b138038ae16ebc7904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfea444e2cb8e428b7c9604d77076ad1"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:adfea444e2cb8e428b7c9604d77076ad1"><td class="memTemplItemLeft" align="right" valign="top">short&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#adfea444e2cb8e428b7c9604d77076ad1">tosh</a> (const V &amp;in)</td></tr>
<tr class="memdesc:adfea444e2cb8e428b7c9604d77076ad1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in short.  <a href="../../da/d53/a00265.php#adfea444e2cb8e428b7c9604d77076ad1">More...</a><br /></td></tr>
<tr class="separator:adfea444e2cb8e428b7c9604d77076ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b322c51a82629ed6b2325f2f938eae3"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a7b322c51a82629ed6b2325f2f938eae3"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a7b322c51a82629ed6b2325f2f938eae3">tob</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a7b322c51a82629ed6b2325f2f938eae3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in boolean.  <a href="../../da/d53/a00265.php#a7b322c51a82629ed6b2325f2f938eae3">More...</a><br /></td></tr>
<tr class="separator:a7b322c51a82629ed6b2325f2f938eae3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71458bb6c1d0939bd975cdf25e864599"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a71458bb6c1d0939bd975cdf25e864599"><td class="memTemplItemLeft" align="right" valign="top">std::chrono::milliseconds&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a71458bb6c1d0939bd975cdf25e864599">tomilli</a> (const V &amp;in)</td></tr>
<tr class="memdesc:a71458bb6c1d0939bd975cdf25e864599"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert <em>in</em> variable in std::chrono::milliseconds.  <a href="../../da/d53/a00265.php#a71458bb6c1d0939bd975cdf25e864599">More...</a><br /></td></tr>
<tr class="separator:a71458bb6c1d0939bd975cdf25e864599"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74705a4e1fb16838be02655f4ea61e11"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a74705a4e1fb16838be02655f4ea61e11">operator&lt;</a> (const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;a, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;b)</td></tr>
<tr class="separator:a74705a4e1fb16838be02655f4ea61e11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91f197d1381e789ce2295059d4d02c13"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a91f197d1381e789ce2295059d4d02c13">operator==</a> (const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;a, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;b)</td></tr>
<tr class="separator:a91f197d1381e789ce2295059d4d02c13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8ebb26f5618a66bc7e9bf3317a0477f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad8ebb26f5618a66bc7e9bf3317a0477f">operator!=</a> (const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;a, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;b)</td></tr>
<tr class="separator:ad8ebb26f5618a66bc7e9bf3317a0477f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4390d2726279039c439ba3b866fa2e50"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a4390d2726279039c439ba3b866fa2e50">operator&gt;</a> (const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;a, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;b)</td></tr>
<tr class="separator:a4390d2726279039c439ba3b866fa2e50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57c7184396da7d8b9972ac64f37fc019"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a57c7184396da7d8b9972ac64f37fc019">operator&lt;=</a> (const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;a, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;b)</td></tr>
<tr class="separator:a57c7184396da7d8b9972ac64f37fc019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacc2b27f076a57eb6664e7d920a52c7e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aacc2b27f076a57eb6664e7d920a52c7e">operator&gt;=</a> (const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;a, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;b)</td></tr>
<tr class="separator:aacc2b27f076a57eb6664e7d920a52c7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e76ac5c4df82149886b58edcfc7090a"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0e76ac5c4df82149886b58edcfc7090a">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;date)</td></tr>
<tr class="separator:a0e76ac5c4df82149886b58edcfc7090a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94817d75f824097e42c5a7fdf72907f9"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a94817d75f824097e42c5a7fdf72907f9">operator&lt;&lt;</a> (std::ostream &amp;os, <a class="el" href="../../de/d85/a01273.php">DateTime</a> datetime)</td></tr>
<tr class="separator:a94817d75f824097e42c5a7fdf72907f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a14f66f0c6eba0c77338364977658e1"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:a1a14f66f0c6eba0c77338364977658e1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a1a14f66f0c6eba0c77338364977658e1">error_log</a> (size_t line, T in, Args... args)</td></tr>
<tr class="memdesc:a1a14f66f0c6eba0c77338364977658e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the given text like an error.  <a href="../../da/d53/a00265.php#a1a14f66f0c6eba0c77338364977658e1">More...</a><br /></td></tr>
<tr class="separator:a1a14f66f0c6eba0c77338364977658e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac625de83fcace96567aecd1363297776"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:ac625de83fcace96567aecd1363297776"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ac625de83fcace96567aecd1363297776">warning_log</a> (size_t line, T in, Args... args)</td></tr>
<tr class="memdesc:ac625de83fcace96567aecd1363297776"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the given text like a warning.  <a href="../../da/d53/a00265.php#ac625de83fcace96567aecd1363297776">More...</a><br /></td></tr>
<tr class="separator:ac625de83fcace96567aecd1363297776"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b4fd6390d33edc9719d42b26f6e29f"><td class="memTemplParams" colspan="2">template&lt;class T , class... Args&gt; </td></tr>
<tr class="memitem:af0b4fd6390d33edc9719d42b26f6e29f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af0b4fd6390d33edc9719d42b26f6e29f">info_log</a> (size_t line, T in, Args... args)</td></tr>
<tr class="memdesc:af0b4fd6390d33edc9719d42b26f6e29f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the given text like an information.  <a href="../../da/d53/a00265.php#af0b4fd6390d33edc9719d42b26f6e29f">More...</a><br /></td></tr>
<tr class="separator:af0b4fd6390d33edc9719d42b26f6e29f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aada88379a63c49987a295485391aa192"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aada88379a63c49987a295485391aa192">fileFormat</a> (std::string &amp;line)</td></tr>
<tr class="memdesc:aada88379a63c49987a295485391aa192"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format a given <em>line</em> for files.  <a href="../../da/d53/a00265.php#aada88379a63c49987a295485391aa192">More...</a><br /></td></tr>
<tr class="separator:aada88379a63c49987a295485391aa192"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae44c2e346da18a7424d97535fb654448"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae44c2e346da18a7424d97535fb654448">fileExists</a> (const std::string &amp;path)</td></tr>
<tr class="memdesc:ae44c2e346da18a7424d97535fb654448"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if the file exists.  <a href="../../da/d53/a00265.php#ae44c2e346da18a7424d97535fb654448">More...</a><br /></td></tr>
<tr class="separator:ae44c2e346da18a7424d97535fb654448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97dfa91f19b9e2175dddbf65285663a2"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a97dfa91f19b9e2175dddbf65285663a2">getFileSize</a> (const std::string &amp;path)</td></tr>
<tr class="memdesc:a97dfa91f19b9e2175dddbf65285663a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the file size.  <a href="../../da/d53/a00265.php#a97dfa91f19b9e2175dddbf65285663a2">More...</a><br /></td></tr>
<tr class="separator:a97dfa91f19b9e2175dddbf65285663a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fa98622f290e9789bf929fb66ee3a4c"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a7fa98622f290e9789bf929fb66ee3a4c">getlines</a> (std::ifstream &amp;input)</td></tr>
<tr class="memdesc:a7fa98622f290e9789bf929fb66ee3a4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all the lines in a given file.  <a href="../../da/d53/a00265.php#a7fa98622f290e9789bf929fb66ee3a4c">More...</a><br /></td></tr>
<tr class="separator:a7fa98622f290e9789bf929fb66ee3a4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08a1c8da74e7ca2634c1a2a4f4a3ac9d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a08a1c8da74e7ca2634c1a2a4f4a3ac9d">setlines</a> (std::ofstream &amp;output, const std::vector&lt; std::string &gt; &amp;lines)</td></tr>
<tr class="memdesc:a08a1c8da74e7ca2634c1a2a4f4a3ac9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write all the lines in a given file.  <a href="../../da/d53/a00265.php#a08a1c8da74e7ca2634c1a2a4f4a3ac9d">More...</a><br /></td></tr>
<tr class="separator:a08a1c8da74e7ca2634c1a2a4f4a3ac9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab001b84d20c0fffe59c7a55ed872d300"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ab001b84d20c0fffe59c7a55ed872d300">isLuhn</a> (const std::string &amp;num)</td></tr>
<tr class="memdesc:ab001b84d20c0fffe59c7a55ed872d300"><td class="mdescLeft">&#160;</td><td class="mdescRight">Validate a number like a card number, a SIRET number, ...  <a href="../../da/d53/a00265.php#ab001b84d20c0fffe59c7a55ed872d300">More...</a><br /></td></tr>
<tr class="separator:ab001b84d20c0fffe59c7a55ed872d300"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a176933d706495ddff7385a68319e7169"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a176933d706495ddff7385a68319e7169">luhn</a> (const std::string &amp;num)</td></tr>
<tr class="memdesc:a176933d706495ddff7385a68319e7169"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the checksum number.  <a href="../../da/d53/a00265.php#a176933d706495ddff7385a68319e7169">More...</a><br /></td></tr>
<tr class="separator:a176933d706495ddff7385a68319e7169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9443ebf71fe196006831fe344a09f13"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:af9443ebf71fe196006831fe344a09f13"><td class="memTemplItemLeft" align="right" valign="top">V&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af9443ebf71fe196006831fe344a09f13">wholePart</a> (V a)</td></tr>
<tr class="memdesc:af9443ebf71fe196006831fe344a09f13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the whole part of the given number.  <a href="../../da/d53/a00265.php#af9443ebf71fe196006831fe344a09f13">More...</a><br /></td></tr>
<tr class="separator:af9443ebf71fe196006831fe344a09f13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0598b7abd7e7441f6553f1b486053945"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a0598b7abd7e7441f6553f1b486053945"><td class="memTemplItemLeft" align="right" valign="top">V&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0598b7abd7e7441f6553f1b486053945">decimalPart</a> (V a)</td></tr>
<tr class="memdesc:a0598b7abd7e7441f6553f1b486053945"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the decimal part of the given number.  <a href="../../da/d53/a00265.php#a0598b7abd7e7441f6553f1b486053945">More...</a><br /></td></tr>
<tr class="separator:a0598b7abd7e7441f6553f1b486053945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af44c5ff8cc0a054f720ed177e7e44265"><td class="memTemplParams" colspan="2">template&lt;typename V , typename U &gt; </td></tr>
<tr class="memitem:af44c5ff8cc0a054f720ed177e7e44265"><td class="memTemplItemLeft" align="right" valign="top">V&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af44c5ff8cc0a054f720ed177e7e44265">mod</a> (V a, U b, bool positive=false)</td></tr>
<tr class="memdesc:af44c5ff8cc0a054f720ed177e7e44265"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the modulo of two numbers.  <a href="../../da/d53/a00265.php#af44c5ff8cc0a054f720ed177e7e44265">More...</a><br /></td></tr>
<tr class="separator:af44c5ff8cc0a054f720ed177e7e44265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f68c011df46f54833bbda0ac9de04e2"><td class="memTemplParams" colspan="2">template&lt;typename V , typename U &gt; </td></tr>
<tr class="memitem:a6f68c011df46f54833bbda0ac9de04e2"><td class="memTemplItemLeft" align="right" valign="top">V&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6f68c011df46f54833bbda0ac9de04e2">invmod</a> (V a, U b, bool positive=false)</td></tr>
<tr class="memdesc:a6f68c011df46f54833bbda0ac9de04e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the modular inverse of a number.  <a href="../../da/d53/a00265.php#a6f68c011df46f54833bbda0ac9de04e2">More...</a><br /></td></tr>
<tr class="separator:a6f68c011df46f54833bbda0ac9de04e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f3f4e24615446479ff59ce15ce61cde"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a0f3f4e24615446479ff59ce15ce61cde"><td class="memTemplItemLeft" align="right" valign="top">V&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0f3f4e24615446479ff59ce15ce61cde">pgcd</a> (V a, V b)</td></tr>
<tr class="memdesc:a0f3f4e24615446479ff59ce15ce61cde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the result of the pgcd.  <a href="../../da/d53/a00265.php#a0f3f4e24615446479ff59ce15ce61cde">More...</a><br /></td></tr>
<tr class="separator:a0f3f4e24615446479ff59ce15ce61cde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10764d50321a1ff81cc7cd4a9f7e42bc"><td class="memTemplParams" colspan="2">template&lt;typename V &gt; </td></tr>
<tr class="memitem:a10764d50321a1ff81cc7cd4a9f7e42bc"><td class="memTemplItemLeft" align="right" valign="top">V&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a10764d50321a1ff81cc7cd4a9f7e42bc">eucl</a> (V a, V b)</td></tr>
<tr class="memdesc:a10764d50321a1ff81cc7cd4a9f7e42bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the result of the euclidian function.  <a href="../../da/d53/a00265.php#a10764d50321a1ff81cc7cd4a9f7e42bc">More...</a><br /></td></tr>
<tr class="separator:a10764d50321a1ff81cc7cd4a9f7e42bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d75f23c9b03fd2c56324895d0ff3c58"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a4d75f23c9b03fd2c56324895d0ff3c58"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a4d75f23c9b03fd2c56324895d0ff3c58">dist</a> (T x1, T x2, T y1, T y2, T z1=0, T z2=0)</td></tr>
<tr class="memdesc:a4d75f23c9b03fd2c56324895d0ff3c58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the distance of the given coordinates.  <a href="../../da/d53/a00265.php#a4d75f23c9b03fd2c56324895d0ff3c58">More...</a><br /></td></tr>
<tr class="separator:a4d75f23c9b03fd2c56324895d0ff3c58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a900f9e45ac94dbf01c4b67fb40682118"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a900f9e45ac94dbf01c4b67fb40682118">dist</a> (const <a class="el" href="../../d9/d6f/a01445.php">Point</a> &amp;ptA, const <a class="el" href="../../d9/d6f/a01445.php">Point</a> &amp;ptB)</td></tr>
<tr class="memdesc:a900f9e45ac94dbf01c4b67fb40682118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the distance between the two given points.  <a href="../../da/d53/a00265.php#a900f9e45ac94dbf01c4b67fb40682118">More...</a><br /></td></tr>
<tr class="separator:a900f9e45ac94dbf01c4b67fb40682118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9adc0354f681800c75d220e526377397"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a9adc0354f681800c75d220e526377397"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a9adc0354f681800c75d220e526377397">sq</a> (T in)</td></tr>
<tr class="memdesc:a9adc0354f681800c75d220e526377397"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the square of the given number.  <a href="../../da/d53/a00265.php#a9adc0354f681800c75d220e526377397">More...</a><br /></td></tr>
<tr class="separator:a9adc0354f681800c75d220e526377397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4af7738b8b199b0b0868819828bf3f4f"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a4af7738b8b199b0b0868819828bf3f4f"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a4af7738b8b199b0b0868819828bf3f4f">abs</a> (T in)</td></tr>
<tr class="memdesc:a4af7738b8b199b0b0868819828bf3f4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the absolute value of the given number.  <a href="../../da/d53/a00265.php#a4af7738b8b199b0b0868819828bf3f4f">More...</a><br /></td></tr>
<tr class="separator:a4af7738b8b199b0b0868819828bf3f4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc683613235e8674b000071c25747728"><td class="memTemplParams" colspan="2">template&lt;typename T , typename V , typename U  = typename std::conditional&lt;                  std::is_integral&lt; T &gt;::value &amp;&amp; std::is_integral&lt; V &gt;::value ||                      std::is_floating_point&lt; T &gt;::value &amp;&amp; std::is_floating_point&lt; V &gt;::value,                  typename std::conditional&lt; sizeof(T) &gt;= sizeof(V), T, V &gt;::type, typename std::conditional&lt; std::is_floating_point&lt; T &gt;::value &amp;&amp;std::is_integral&lt; V &gt;::value, T, typename std::conditional&lt; std::is_floating_point&lt; V &gt;::value &amp;&amp;std::is_integral&lt; T &gt;::value, V, V &gt;::type &gt;::type &gt; </td></tr>
<tr class="memitem:abc683613235e8674b000071c25747728"><td class="memTemplItemLeft" align="right" valign="top">::type U&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#abc683613235e8674b000071c25747728">min</a> (T a, V b)</td></tr>
<tr class="memdesc:abc683613235e8674b000071c25747728"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the minimum of the arguments.  <a href="../../da/d53/a00265.php#abc683613235e8674b000071c25747728">More...</a><br /></td></tr>
<tr class="separator:abc683613235e8674b000071c25747728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50e5370a188b7230c0dce47cc746f533"><td class="memTemplParams" colspan="2">template&lt;typename T , typename V , typename U  = typename std::conditional&lt;                  std::is_integral&lt; T &gt;::value &amp;&amp; std::is_integral&lt; V &gt;::value ||                      std::is_floating_point&lt; T &gt;::value &amp;&amp; std::is_floating_point&lt; V &gt;::value,                  typename std::conditional&lt; sizeof(T) &gt;= sizeof(V), T, V &gt;::type, typename std::conditional&lt; std::is_floating_point&lt; T &gt;::value &amp;&amp;std::is_integral&lt; V &gt;::value, T, typename std::conditional&lt; std::is_floating_point&lt; V &gt;::value &amp;&amp;std::is_integral&lt; T &gt;::value, V, V &gt;::type &gt;::type &gt; </td></tr>
<tr class="memitem:a50e5370a188b7230c0dce47cc746f533"><td class="memTemplItemLeft" align="right" valign="top">::type U&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a50e5370a188b7230c0dce47cc746f533">max</a> (T a, V b)</td></tr>
<tr class="memdesc:a50e5370a188b7230c0dce47cc746f533"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the maximum of the arguments.  <a href="../../da/d53/a00265.php#a50e5370a188b7230c0dce47cc746f533">More...</a><br /></td></tr>
<tr class="separator:a50e5370a188b7230c0dce47cc746f533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e1c88cc52e517f309354a546e78f403"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a7e1c88cc52e517f309354a546e78f403"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a7e1c88cc52e517f309354a546e78f403">round</a> (T a, int zeros=0)</td></tr>
<tr class="memdesc:a7e1c88cc52e517f309354a546e78f403"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the round of the given number.  <a href="../../da/d53/a00265.php#a7e1c88cc52e517f309354a546e78f403">More...</a><br /></td></tr>
<tr class="separator:a7e1c88cc52e517f309354a546e78f403"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3913978376bb08e036a7bf0b21d6b50"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad3913978376bb08e036a7bf0b21d6b50">isPrime</a> (float nb)</td></tr>
<tr class="memdesc:ad3913978376bb08e036a7bf0b21d6b50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if the given number is prime, false either.  <a href="../../da/d53/a00265.php#ad3913978376bb08e036a7bf0b21d6b50">More...</a><br /></td></tr>
<tr class="separator:ad3913978376bb08e036a7bf0b21d6b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a0096efe278298f80c641af617dd216"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6a0096efe278298f80c641af617dd216">isNumber</a> (char c)</td></tr>
<tr class="memdesc:a6a0096efe278298f80c641af617dd216"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return true if the caracter is a number.  <a href="../../da/d53/a00265.php#a6a0096efe278298f80c641af617dd216">More...</a><br /></td></tr>
<tr class="separator:a6a0096efe278298f80c641af617dd216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d67b0e24c6216a693a903f5bc8c31a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a2d67b0e24c6216a693a903f5bc8c31a0">sigmoide</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> in)</td></tr>
<tr class="memdesc:a2d67b0e24c6216a693a903f5bc8c31a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the result of the sigmoide function.  <a href="../../da/d53/a00265.php#a2d67b0e24c6216a693a903f5bc8c31a0">More...</a><br /></td></tr>
<tr class="separator:a2d67b0e24c6216a693a903f5bc8c31a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9042d2e8e9a6311b4260c6f376f4072c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a9042d2e8e9a6311b4260c6f376f4072c">dsigmoide</a> (<a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> in)</td></tr>
<tr class="memdesc:a9042d2e8e9a6311b4260c6f376f4072c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute with the derivated sigmoide.  <a href="../../da/d53/a00265.php#a9042d2e8e9a6311b4260c6f376f4072c">More...</a><br /></td></tr>
<tr class="separator:a9042d2e8e9a6311b4260c6f376f4072c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69d6be0b9d139073dda5e708c76dccdd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a69d6be0b9d139073dda5e708c76dccdd">log2p</a> (int x)</td></tr>
<tr class="memdesc:a69d6be0b9d139073dda5e708c76dccdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do the log of x in base 2.  <a href="../../da/d53/a00265.php#a69d6be0b9d139073dda5e708c76dccdd">More...</a><br /></td></tr>
<tr class="separator:a69d6be0b9d139073dda5e708c76dccdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77f16d62ba2ac4c7ad44d4459f149b2e"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a77f16d62ba2ac4c7ad44d4459f149b2e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a77f16d62ba2ac4c7ad44d4459f149b2e">Q_rsqrt</a> (T number)</td></tr>
<tr class="memdesc:a77f16d62ba2ac4c7ad44d4459f149b2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the inverse square root with a float precision.  <a href="../../da/d53/a00265.php#a77f16d62ba2ac4c7ad44d4459f149b2e">More...</a><br /></td></tr>
<tr class="separator:a77f16d62ba2ac4c7ad44d4459f149b2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac10f5cb91293579d36d9ea767825d5bb"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac10f5cb91293579d36d9ea767825d5bb"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value||<a class="el" href="../../d0/d95/a01389.php">Check::is_minded_ptr</a>&lt; T &gt;::value &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ac10f5cb91293579d36d9ea767825d5bb">deletePtr</a> (T &amp;pointer)</td></tr>
<tr class="memdesc:ac10f5cb91293579d36d9ea767825d5bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delete a pointer.  <a href="../../da/d53/a00265.php#ac10f5cb91293579d36d9ea767825d5bb">More...</a><br /></td></tr>
<tr class="separator:ac10f5cb91293579d36d9ea767825d5bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25c5de928e67bd9c01f720f39329f04c"><td class="memTemplParams" colspan="2">template&lt;class C &gt; </td></tr>
<tr class="memitem:a25c5de928e67bd9c01f720f39329f04c"><td class="memTemplItemLeft" align="right" valign="top">C &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a25c5de928e67bd9c01f720f39329f04c">ref</a> (C *obj)</td></tr>
<tr class="separator:a25c5de928e67bd9c01f720f39329f04c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf93d7765c51ab825641e2f1de5fb2c9"><td class="memTemplParams" colspan="2">template&lt;class C &gt; </td></tr>
<tr class="memitem:abf93d7765c51ab825641e2f1de5fb2c9"><td class="memTemplItemLeft" align="right" valign="top">C &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#abf93d7765c51ab825641e2f1de5fb2c9">ref</a> (std::shared_ptr&lt; C &gt; obj)</td></tr>
<tr class="separator:abf93d7765c51ab825641e2f1de5fb2c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95489209bc34099d9508c0e22a279bb0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U  = double&gt; </td></tr>
<tr class="memitem:a95489209bc34099d9508c0e22a279bb0"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a95489209bc34099d9508c0e22a279bb0">rngRange</a> (T a, U b=0.1)</td></tr>
<tr class="memdesc:a95489209bc34099d9508c0e22a279bb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute a random number in a computed range.  <a href="../../da/d53/a00265.php#a95489209bc34099d9508c0e22a279bb0">More...</a><br /></td></tr>
<tr class="separator:a95489209bc34099d9508c0e22a279bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a1aa5f89ff57aa7dc4e6d136c9c315f"><td class="memTemplParams" colspan="2">template&lt;typename Key , typename Value &gt; </td></tr>
<tr class="memitem:a0a1aa5f89ff57aa7dc4e6d136c9c315f"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0a1aa5f89ff57aa7dc4e6d136c9c315f">sortAsc</a> (const std::map&lt; Key, Value &gt; &amp;map)</td></tr>
<tr class="memdesc:a0a1aa5f89ff57aa7dc4e6d136c9c315f"><td class="mdescLeft">&#160;</td><td class="mdescRight">sort a map ascendently  <a href="../../da/d53/a00265.php#a0a1aa5f89ff57aa7dc4e6d136c9c315f">More...</a><br /></td></tr>
<tr class="separator:a0a1aa5f89ff57aa7dc4e6d136c9c315f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45ad9c2ac4a373fdad27e51c1c741d76"><td class="memTemplParams" colspan="2">template&lt;class Key , class Value &gt; </td></tr>
<tr class="memitem:a45ad9c2ac4a373fdad27e51c1c741d76"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a45ad9c2ac4a373fdad27e51c1c741d76">sortDesc</a> (const std::map&lt; Key, Value &gt; &amp;map)</td></tr>
<tr class="memdesc:a45ad9c2ac4a373fdad27e51c1c741d76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sort a map descendently.  <a href="../../da/d53/a00265.php#a45ad9c2ac4a373fdad27e51c1c741d76">More...</a><br /></td></tr>
<tr class="separator:a45ad9c2ac4a373fdad27e51c1c741d76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1e8ca2394e07c20ed9c391a37a62322"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad1e8ca2394e07c20ed9c391a37a62322">split</a> (const std::string &amp;in, char separator=' ')</td></tr>
<tr class="memdesc:ad1e8ca2394e07c20ed9c391a37a62322"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explode a string in an array with the given caracter.  <a href="../../da/d53/a00265.php#ad1e8ca2394e07c20ed9c391a37a62322">More...</a><br /></td></tr>
<tr class="separator:ad1e8ca2394e07c20ed9c391a37a62322"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad53f932fcd1da3c4e7eeca04def94f13"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad53f932fcd1da3c4e7eeca04def94f13">split</a> (const std::string &amp;in, const std::string &amp;c)</td></tr>
<tr class="memdesc:ad53f932fcd1da3c4e7eeca04def94f13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explode a string in an array with the given string.  <a href="../../da/d53/a00265.php#ad53f932fcd1da3c4e7eeca04def94f13">More...</a><br /></td></tr>
<tr class="separator:ad53f932fcd1da3c4e7eeca04def94f13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a5719217b3760cbe64206000529fba8"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a9a5719217b3760cbe64206000529fba8">split</a> (const std::string &amp;in, std::vector&lt; std::string &gt; cars)</td></tr>
<tr class="memdesc:a9a5719217b3760cbe64206000529fba8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Explode a string in an array with the given separators.  <a href="../../da/d53/a00265.php#a9a5719217b3760cbe64206000529fba8">More...</a><br /></td></tr>
<tr class="separator:a9a5719217b3760cbe64206000529fba8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05a9ea6944b5f2bf87c0eb17a5e0b32f"><td class="memTemplParams" colspan="2">template&lt;typename... Args&gt; </td></tr>
<tr class="memitem:a05a9ea6944b5f2bf87c0eb17a5e0b32f"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a05a9ea6944b5f2bf87c0eb17a5e0b32f">explode</a> (Args &amp;&amp;... args) -&gt; decltype(<a class="el" href="../../da/d53/a00265.php#ad1e8ca2394e07c20ed9c391a37a62322">split</a>(std::forward&lt; Args &gt;(args)...))</td></tr>
<tr class="memdesc:a05a9ea6944b5f2bf87c0eb17a5e0b32f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for <b>split</b>.  <a href="../../da/d53/a00265.php#a05a9ea6944b5f2bf87c0eb17a5e0b32f">More...</a><br /></td></tr>
<tr class="separator:a05a9ea6944b5f2bf87c0eb17a5e0b32f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa97708c3c4ad49b7e60d30c66bfad80a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa97708c3c4ad49b7e60d30c66bfad80a">trim</a> (std::string &amp;in)</td></tr>
<tr class="memdesc:aa97708c3c4ad49b7e60d30c66bfad80a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delete all the too-much spaces in the given string.  <a href="../../da/d53/a00265.php#aa97708c3c4ad49b7e60d30c66bfad80a">More...</a><br /></td></tr>
<tr class="separator:aa97708c3c4ad49b7e60d30c66bfad80a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a334e09619932c4b2c193abe4fc9c3306"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a334e09619932c4b2c193abe4fc9c3306">uppercase</a> (const std::string &amp;str, std::string::iterator begin, std::string::iterator end)</td></tr>
<tr class="memdesc:a334e09619932c4b2c193abe4fc9c3306"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the given interval to uppercase.  <a href="../../da/d53/a00265.php#a334e09619932c4b2c193abe4fc9c3306">More...</a><br /></td></tr>
<tr class="separator:a334e09619932c4b2c193abe4fc9c3306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c6d83e8654926ceebd7777a9ada0652"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0c6d83e8654926ceebd7777a9ada0652">lowercase</a> (const std::string &amp;str, std::string::iterator begin, std::string::iterator end)</td></tr>
<tr class="memdesc:a0c6d83e8654926ceebd7777a9ada0652"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the given interval to lowercase.  <a href="../../da/d53/a00265.php#a0c6d83e8654926ceebd7777a9ada0652">More...</a><br /></td></tr>
<tr class="separator:a0c6d83e8654926ceebd7777a9ada0652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39b79dedb67710e8708dfec2985c6406"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a39b79dedb67710e8708dfec2985c6406">uppercase</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:a39b79dedb67710e8708dfec2985c6406"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the given string to uppercase.  <a href="../../da/d53/a00265.php#a39b79dedb67710e8708dfec2985c6406">More...</a><br /></td></tr>
<tr class="separator:a39b79dedb67710e8708dfec2985c6406"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0762354667dfb9f9e539e501399a9a00"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0762354667dfb9f9e539e501399a9a00">lowercase</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:a0762354667dfb9f9e539e501399a9a00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the given string to lowercase.  <a href="../../da/d53/a00265.php#a0762354667dfb9f9e539e501399a9a00">More...</a><br /></td></tr>
<tr class="separator:a0762354667dfb9f9e539e501399a9a00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae61cb7564bc3b0ccbcad0b991b74635d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae61cb7564bc3b0ccbcad0b991b74635d">replace</a> (const std::string &amp;str, const std::string &amp;from, const std::string &amp;to, bool regex=false, bool word=false, bool insensitive=false)</td></tr>
<tr class="memdesc:ae61cb7564bc3b0ccbcad0b991b74635d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace something by something else in a string using regex_replace.  <a href="../../da/d53/a00265.php#ae61cb7564bc3b0ccbcad0b991b74635d">More...</a><br /></td></tr>
<tr class="separator:ae61cb7564bc3b0ccbcad0b991b74635d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ddd069f38e7407563a5d8e763d7dc90"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a1ddd069f38e7407563a5d8e763d7dc90">randStr</a> (size_t nb, unsigned short flags=CaractSet::ALL)</td></tr>
<tr class="memdesc:a1ddd069f38e7407563a5d8e763d7dc90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a random string.  <a href="../../da/d53/a00265.php#a1ddd069f38e7407563a5d8e763d7dc90">More...</a><br /></td></tr>
<tr class="separator:a1ddd069f38e7407563a5d8e763d7dc90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95be8eb46f76298e1218183421d13825"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a95be8eb46f76298e1218183421d13825">count</a> (const std::string &amp;text, char c)</td></tr>
<tr class="memdesc:a95be8eb46f76298e1218183421d13825"><td class="mdescLeft">&#160;</td><td class="mdescRight">Count the number of appearances.  <a href="../../da/d53/a00265.php#a95be8eb46f76298e1218183421d13825">More...</a><br /></td></tr>
<tr class="separator:a95be8eb46f76298e1218183421d13825"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b44ab9ee6b692aa036d6f7d0285e909"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; std::string &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a2b44ab9ee6b692aa036d6f7d0285e909">getall</a> (const std::string &amp;str_regex, const std::string &amp;str, bool insensitive=false)</td></tr>
<tr class="memdesc:a2b44ab9ee6b692aa036d6f7d0285e909"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return all occurences of a regex in a string.  <a href="../../da/d53/a00265.php#a2b44ab9ee6b692aa036d6f7d0285e909">More...</a><br /></td></tr>
<tr class="separator:a2b44ab9ee6b692aa036d6f7d0285e909"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685af449d029b7793f497633bbafbcbb"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a685af449d029b7793f497633bbafbcbb">removeAccents</a> (const std::string &amp;str)</td></tr>
<tr class="memdesc:a685af449d029b7793f497633bbafbcbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace all the accents of a string.  <a href="../../da/d53/a00265.php#a685af449d029b7793f497633bbafbcbb">More...</a><br /></td></tr>
<tr class="separator:a685af449d029b7793f497633bbafbcbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d72a06346182146581ff63f2fa70580"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0d72a06346182146581ff63f2fa70580">exec</a> (const std::string &amp;cmd, bool force=false)</td></tr>
<tr class="memdesc:a0d72a06346182146581ff63f2fa70580"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use system in an IF and say if there is an error.  <a href="../../da/d53/a00265.php#a0d72a06346182146581ff63f2fa70580">More...</a><br /></td></tr>
<tr class="separator:a0d72a06346182146581ff63f2fa70580"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcc09c3d97d72792032b5615d41aa1c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#abcc09c3d97d72792032b5615d41aa1c5">servLog</a> (const std::string &amp;str, bool server=false, const std::string &amp;name=&quot;Server&quot;)</td></tr>
<tr class="memdesc:abcc09c3d97d72792032b5615d41aa1c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a string in cout like in a server.  <a href="../../da/d53/a00265.php#abcc09c3d97d72792032b5615d41aa1c5">More...</a><br /></td></tr>
<tr class="separator:abcc09c3d97d72792032b5615d41aa1c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3a0bfd8107f1a0512e3daccbe8ec32a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ab3a0bfd8107f1a0512e3daccbe8ec32a">operator&lt;</a> (const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;a, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;b)</td></tr>
<tr class="separator:ab3a0bfd8107f1a0512e3daccbe8ec32a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b7c3b86bf4f3323ec303cf6caf4657d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a1b7c3b86bf4f3323ec303cf6caf4657d">operator==</a> (const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;a, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;b)</td></tr>
<tr class="separator:a1b7c3b86bf4f3323ec303cf6caf4657d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4a4fa2bc9dc1a79ba1c4e1326c4e86"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6e4a4fa2bc9dc1a79ba1c4e1326c4e86">operator!=</a> (const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;a, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;b)</td></tr>
<tr class="separator:a6e4a4fa2bc9dc1a79ba1c4e1326c4e86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0eb9966b5003b5c69b1c19cf2c91da5b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0eb9966b5003b5c69b1c19cf2c91da5b">operator&gt;</a> (const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;a, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;b)</td></tr>
<tr class="separator:a0eb9966b5003b5c69b1c19cf2c91da5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35feb7b77517c8a067a4f631d0c01903"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a35feb7b77517c8a067a4f631d0c01903">operator&lt;=</a> (const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;a, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;b)</td></tr>
<tr class="separator:a35feb7b77517c8a067a4f631d0c01903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2490b5d2fcccd5d4fcd7539a3e9ec8f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ab2490b5d2fcccd5d4fcd7539a3e9ec8f">operator&gt;=</a> (const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;a, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;b)</td></tr>
<tr class="separator:ab2490b5d2fcccd5d4fcd7539a3e9ec8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac056cce1809ed32482358d31064dac84"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ac056cce1809ed32482358d31064dac84">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;time)</td></tr>
<tr class="separator:ac056cce1809ed32482358d31064dac84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49144605ea2f1f8a9463ae309c293628"><td class="memItemLeft" align="right" valign="top">std::time_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a49144605ea2f1f8a9463ae309c293628">getSec</a> ()</td></tr>
<tr class="memdesc:a49144605ea2f1f8a9463ae309c293628"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of seconds since the Epoch.  <a href="../../da/d53/a00265.php#a49144605ea2f1f8a9463ae309c293628">More...</a><br /></td></tr>
<tr class="separator:a49144605ea2f1f8a9463ae309c293628"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4573282fe9cf6a0af8de786baaf6456"><td class="memItemLeft" align="right" valign="top">std::chrono::milliseconds&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ac4573282fe9cf6a0af8de786baaf6456">getMilli</a> ()</td></tr>
<tr class="memdesc:ac4573282fe9cf6a0af8de786baaf6456"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the milliseconds since the Epoch.  <a href="../../da/d53/a00265.php#ac4573282fe9cf6a0af8de786baaf6456">More...</a><br /></td></tr>
<tr class="separator:ac4573282fe9cf6a0af8de786baaf6456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0003c12a7cc73a35e488f59ad14770bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a0003c12a7cc73a35e488f59ad14770bf">sleep</a> (size_t duration)</td></tr>
<tr class="memdesc:a0003c12a7cc73a35e488f59ad14770bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sleep the thread during <em>duration</em> seconds.  <a href="../../da/d53/a00265.php#a0003c12a7cc73a35e488f59ad14770bf">More...</a><br /></td></tr>
<tr class="separator:a0003c12a7cc73a35e488f59ad14770bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30ed8e5c290433011b9855598cfc050a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a30ed8e5c290433011b9855598cfc050a">milliSleep</a> (size_t duration)</td></tr>
<tr class="memdesc:a30ed8e5c290433011b9855598cfc050a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sleep the thread during <em>duration</em> milliseconds.  <a href="../../da/d53/a00265.php#a30ed8e5c290433011b9855598cfc050a">More...</a><br /></td></tr>
<tr class="separator:a30ed8e5c290433011b9855598cfc050a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a773d8ead6e35e10f86f4285f3f79ecb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a773d8ead6e35e10f86f4285f3f79ecb9">microSleep</a> (size_t duration)</td></tr>
<tr class="memdesc:a773d8ead6e35e10f86f4285f3f79ecb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sleep the thread during <em>duration</em> microseconds.  <a href="../../da/d53/a00265.php#a773d8ead6e35e10f86f4285f3f79ecb9">More...</a><br /></td></tr>
<tr class="separator:a773d8ead6e35e10f86f4285f3f79ecb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b2e0c30451ea35d0cc5eb9badea5be0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a5b2e0c30451ea35d0cc5eb9badea5be0">nanoSleep</a> (size_t duration)</td></tr>
<tr class="memdesc:a5b2e0c30451ea35d0cc5eb9badea5be0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sleep the thread during <em>duration</em> nanoseconds.  <a href="../../da/d53/a00265.php#a5b2e0c30451ea35d0cc5eb9badea5be0">More...</a><br /></td></tr>
<tr class="separator:a5b2e0c30451ea35d0cc5eb9badea5be0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa17a2314efb86933584ae451318a17da"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:aa17a2314efb86933584ae451318a17da"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898">TREE_DIRECTION</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa17a2314efb86933584ae451318a17da">treeAscSorter</a> (std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt; datas, std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt; nodeDatas)</td></tr>
<tr class="memdesc:aa17a2314efb86933584ae451318a17da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to sort a tree ascendently depending on weights.  <a href="../../da/d53/a00265.php#aa17a2314efb86933584ae451318a17da">More...</a><br /></td></tr>
<tr class="separator:aa17a2314efb86933584ae451318a17da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1865ef6e7eed9ac5fa5b177b3f8dd1e9"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a1865ef6e7eed9ac5fa5b177b3f8dd1e9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898">TREE_DIRECTION</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a1865ef6e7eed9ac5fa5b177b3f8dd1e9">treeDescSorter</a> (std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt; datas, std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt; nodeDatas)</td></tr>
<tr class="memdesc:a1865ef6e7eed9ac5fa5b177b3f8dd1e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to sort a tree descendently depending on weights.  <a href="../../da/d53/a00265.php#a1865ef6e7eed9ac5fa5b177b3f8dd1e9">More...</a><br /></td></tr>
<tr class="separator:a1865ef6e7eed9ac5fa5b177b3f8dd1e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a426eb225a242b41a1bd4a38a721bfa39"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V &gt; </td></tr>
<tr class="memitem:a426eb225a242b41a1bd4a38a721bfa39"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a426eb225a242b41a1bd4a38a721bfa39">operator&lt;</a> (const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;b)</td></tr>
<tr class="separator:a426eb225a242b41a1bd4a38a721bfa39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ea1828f8233339ff4109a6d054a3f6e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V &gt; </td></tr>
<tr class="memitem:a9ea1828f8233339ff4109a6d054a3f6e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a9ea1828f8233339ff4109a6d054a3f6e">operator==</a> (const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;b)</td></tr>
<tr class="separator:a9ea1828f8233339ff4109a6d054a3f6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8c157fea2d3cba9a23a3ff2878cc08e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V &gt; </td></tr>
<tr class="memitem:ae8c157fea2d3cba9a23a3ff2878cc08e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ae8c157fea2d3cba9a23a3ff2878cc08e">operator&gt;</a> (const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;b)</td></tr>
<tr class="separator:ae8c157fea2d3cba9a23a3ff2878cc08e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6fc9365b82f561a4603cb21b7d247ec"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V &gt; </td></tr>
<tr class="memitem:ac6fc9365b82f561a4603cb21b7d247ec"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ac6fc9365b82f561a4603cb21b7d247ec">operator&gt;=</a> (const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;b)</td></tr>
<tr class="separator:ac6fc9365b82f561a4603cb21b7d247ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af16116bb74326c4d798c387465347225"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V &gt; </td></tr>
<tr class="memitem:af16116bb74326c4d798c387465347225"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#af16116bb74326c4d798c387465347225">operator&lt;=</a> (const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;b)</td></tr>
<tr class="separator:af16116bb74326c4d798c387465347225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3c520cfb33cd0c457951ab10b3e6c28"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V &gt; </td></tr>
<tr class="memitem:ad3c520cfb33cd0c457951ab10b3e6c28"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad3c520cfb33cd0c457951ab10b3e6c28">operator!=</a> (const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;b)</td></tr>
<tr class="separator:ad3c520cfb33cd0c457951ab10b3e6c28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad6aa36cdd6eeeda915b26366786f62e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V , typename W &gt; </td></tr>
<tr class="memitem:aad6aa36cdd6eeeda915b26366786f62e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aad6aa36cdd6eeeda915b26366786f62e">operator&lt;</a> (const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;b)</td></tr>
<tr class="separator:aad6aa36cdd6eeeda915b26366786f62e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ba723943a9c71f6b716cfff3862b656"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V , typename W &gt; </td></tr>
<tr class="memitem:a4ba723943a9c71f6b716cfff3862b656"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a4ba723943a9c71f6b716cfff3862b656">operator==</a> (const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;b)</td></tr>
<tr class="separator:a4ba723943a9c71f6b716cfff3862b656"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa246dbc03b543a0a767df8e486189488"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V , typename W &gt; </td></tr>
<tr class="memitem:aa246dbc03b543a0a767df8e486189488"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa246dbc03b543a0a767df8e486189488">operator&gt;</a> (const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;b)</td></tr>
<tr class="separator:aa246dbc03b543a0a767df8e486189488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab654d9827594410729bb1267af700f68"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V , typename W &gt; </td></tr>
<tr class="memitem:ab654d9827594410729bb1267af700f68"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ab654d9827594410729bb1267af700f68">operator&gt;=</a> (const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;b)</td></tr>
<tr class="separator:ab654d9827594410729bb1267af700f68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6991b54e58e0a5b120f698f4e941ec86"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V , typename W &gt; </td></tr>
<tr class="memitem:a6991b54e58e0a5b120f698f4e941ec86"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a6991b54e58e0a5b120f698f4e941ec86">operator&lt;=</a> (const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;b)</td></tr>
<tr class="separator:a6991b54e58e0a5b120f698f4e941ec86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a263f600382a931b0f059dc90a834e8b0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename U , typename V , typename W &gt; </td></tr>
<tr class="memitem:a263f600382a931b0f059dc90a834e8b0"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a263f600382a931b0f059dc90a834e8b0">operator!=</a> (const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;a, const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;b)</td></tr>
<tr class="separator:a263f600382a931b0f059dc90a834e8b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad6c9253e2099a49d163fad90ef6f5f5"><td class="memTemplParams" colspan="2">template&lt;class C &gt; </td></tr>
<tr class="memitem:aad6c9253e2099a49d163fad90ef6f5f5"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aad6c9253e2099a49d163fad90ef6f5f5">getType</a> (const C &amp;)</td></tr>
<tr class="memdesc:aad6c9253e2099a49d163fad90ef6f5f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the type of <em>obj</em> in a string.  <a href="../../da/d53/a00265.php#aad6c9253e2099a49d163fad90ef6f5f5">More...</a><br /></td></tr>
<tr class="separator:aad6c9253e2099a49d163fad90ef6f5f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bb83762638ce787815f3699d67faa92"><td class="memTemplParams" colspan="2">template&lt;class C &gt; </td></tr>
<tr class="memitem:a2bb83762638ce787815f3699d67faa92"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a2bb83762638ce787815f3699d67faa92">printType</a> (const C &amp;obj)</td></tr>
<tr class="memdesc:a2bb83762638ce787815f3699d67faa92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the type of <em>obj</em>.  <a href="../../da/d53/a00265.php#a2bb83762638ce787815f3699d67faa92">More...</a><br /></td></tr>
<tr class="separator:a2bb83762638ce787815f3699d67faa92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5046a9dfac4629babcb20cf7b914415e"><td class="memTemplParams" colspan="2">template&lt;class C &gt; </td></tr>
<tr class="memitem:a5046a9dfac4629babcb20cf7b914415e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a5046a9dfac4629babcb20cf7b914415e">printSize</a> ()</td></tr>
<tr class="memdesc:a5046a9dfac4629babcb20cf7b914415e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the size of <em>obj</em> type.  <a href="../../da/d53/a00265.php#a5046a9dfac4629babcb20cf7b914415e">More...</a><br /></td></tr>
<tr class="separator:a5046a9dfac4629babcb20cf7b914415e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a50b5129023a76b3bdb0bd01ee9e8b72e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d1c/a01093.php">Arguments</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a50b5129023a76b3bdb0bd01ee9e8b72e">arguments</a></td></tr>
<tr class="memdesc:a50b5129023a76b3bdb0bd01ee9e8b72e"><td class="mdescLeft">&#160;</td><td class="mdescRight">A global arguments variable to save and keep some arguments.  <a href="../../da/d53/a00265.php#a50b5129023a76b3bdb0bd01ee9e8b72e">More...</a><br /></td></tr>
<tr class="separator:a50b5129023a76b3bdb0bd01ee9e8b72e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06f3027ef1a56c8cb526a47c6350905"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d8b/a01117.php">Assert</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa06f3027ef1a56c8cb526a47c6350905">assertion</a></td></tr>
<tr class="separator:aa06f3027ef1a56c8cb526a47c6350905"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad49187ab386f309e965f2f8e954c3c24"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/da1/a01233.php">ThreadCout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad49187ab386f309e965f2f8e954c3c24">cout</a></td></tr>
<tr class="memdesc:ad49187ab386f309e965f2f8e954c3c24"><td class="mdescLeft">&#160;</td><td class="mdescRight">The thread safe version of std::cout.  <a href="../../da/d53/a00265.php#ad49187ab386f309e965f2f8e954c3c24">More...</a><br /></td></tr>
<tr class="separator:ad49187ab386f309e965f2f8e954c3c24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19aa3c3882eb7a0c0d4f6479a4bbf975"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../db/d1c/a01229.php">ThreadEndlCout</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a19aa3c3882eb7a0c0d4f6479a4bbf975">endl</a></td></tr>
<tr class="memdesc:a19aa3c3882eb7a0c0d4f6479a4bbf975"><td class="mdescLeft">&#160;</td><td class="mdescRight">The thread safe version of std::endl.  <a href="../../da/d53/a00265.php#a19aa3c3882eb7a0c0d4f6479a4bbf975">More...</a><br /></td></tr>
<tr class="separator:a19aa3c3882eb7a0c0d4f6479a4bbf975"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad309496206415242e21a12fc54df1cc8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dc/dab/a01237.php">SetPrecision</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#ad309496206415242e21a12fc54df1cc8">setprecision</a></td></tr>
<tr class="separator:ad309496206415242e21a12fc54df1cc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8855b382bd52d4baffe3633dbe8fa3ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/d0b/a01253.php">Cesar</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a8855b382bd52d4baffe3633dbe8fa3ed">cesar</a></td></tr>
<tr class="memdesc:a8855b382bd52d4baffe3633dbe8fa3ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">A global cesar variable to crypt and decrypt messages.  <a href="../../da/d53/a00265.php#a8855b382bd52d4baffe3633dbe8fa3ed">More...</a><br /></td></tr>
<tr class="separator:a8855b382bd52d4baffe3633dbe8fa3ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0ce198f34851e093bbc38dfd975e339"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/de7/a01257.php">SHA2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#aa0ce198f34851e093bbc38dfd975e339">sha2</a></td></tr>
<tr class="memdesc:aa0ce198f34851e093bbc38dfd975e339"><td class="mdescLeft">&#160;</td><td class="mdescRight">A global sha2 variable to crypt messages.  <a href="../../da/d53/a00265.php#aa0ce198f34851e093bbc38dfd975e339">More...</a><br /></td></tr>
<tr class="separator:aa0ce198f34851e093bbc38dfd975e339"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a302b261a28cb48198b26b85ab682bfab"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d34/a01261.php">MyCrypt</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a302b261a28cb48198b26b85ab682bfab">mycrypt</a></td></tr>
<tr class="memdesc:a302b261a28cb48198b26b85ab682bfab"><td class="mdescLeft">&#160;</td><td class="mdescRight">A global <a class="el" href="../../de/d34/a01261.php" title="A class to test a homemade algorithm for encryption.">MyCrypt</a> variable to crypt messages.  <a href="../../da/d53/a00265.php#a302b261a28cb48198b26b85ab682bfab">More...</a><br /></td></tr>
<tr class="separator:a302b261a28cb48198b26b85ab682bfab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8860bcba5ad1fad5c14e9f8a69b8bc51"><td class="memItemLeft" align="right" valign="top">std::ifstream&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a8860bcba5ad1fad5c14e9f8a69b8bc51">reader</a></td></tr>
<tr class="memdesc:a8860bcba5ad1fad5c14e9f8a69b8bc51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a global file reader.  <a href="../../da/d53/a00265.php#a8860bcba5ad1fad5c14e9f8a69b8bc51">More...</a><br /></td></tr>
<tr class="separator:a8860bcba5ad1fad5c14e9f8a69b8bc51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9826cf077a919365508fb2a7d7aae4c2"><td class="memItemLeft" align="right" valign="top">std::ofstream&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a9826cf077a919365508fb2a7d7aae4c2">writer</a></td></tr>
<tr class="memdesc:a9826cf077a919365508fb2a7d7aae4c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a global file writer.  <a href="../../da/d53/a00265.php#a9826cf077a919365508fb2a7d7aae4c2">More...</a><br /></td></tr>
<tr class="separator:a9826cf077a919365508fb2a7d7aae4c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46f063faccea2fdafb8e5f33c2ccbc50"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/db8/a01317.php">Logger</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a46f063faccea2fdafb8e5f33c2ccbc50">logger</a></td></tr>
<tr class="separator:a46f063faccea2fdafb8e5f33c2ccbc50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08ac826a0e7f64dc1b04036ecec50ed1"><td class="memItemLeft" align="right" valign="top">Rng&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d53/a00265.php#a08ac826a0e7f64dc1b04036ecec50ed1">rng</a></td></tr>
<tr class="memdesc:a08ac826a0e7f64dc1b04036ecec50ed1"><td class="mdescLeft">&#160;</td><td class="mdescRight">A global rng variable to compute random integers.  <a href="../../da/d53/a00265.php#a08ac826a0e7f64dc1b04036ecec50ed1">More...</a><br /></td></tr>
<tr class="separator:a08ac826a0e7f64dc1b04036ecec50ed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<hr/><h2 class="groupheader">Class Documentation</h2>
<a name="d8/ded/a01113" id="d8/ded/a01113"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d8/ded/a01113">&#9670;&nbsp;</a></span>mcd::AssertionLocationStruct</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct mcd::AssertionLocationStruct</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"></div><div class="dynheader">
Collaboration diagram for mcd::AssertionLocationStruct:</div>
<div class="dyncontent">
<div class="center"><img src="../../d3/de1/a01111.png" border="0" usemap="#amcd_1_1AssertionLocationStruct_coll__map" alt="Collaboration graph"/></div>
<map name="mcd_1_1AssertionLocationStruct_coll__map" id="mcd_1_1AssertionLocationStruct_coll__map">
<area shape="rect" title=" " alt="" coords="5,200,200,227"/>
<area shape="rect" title="STL class." alt="" coords="63,96,143,123"/>
<area shape="rect" title="STL class." alt="" coords="39,5,166,47"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.php">legend</a>]</span></center></div>
<table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="a8f58607a689338a0ca0d40d802468308"></a>string</td>
<td class="fieldname">
file</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a007715350c75937aa1c04307d3caf8e9"></a>string</td>
<td class="fieldname">
func</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="ac1ef1f935932cbc6eb910767f7ce987b"></a>int</td>
<td class="fieldname">
line</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d9/d17/a01129" id="d9/d17/a01129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d9/d17/a01129">&#9670;&nbsp;</a></span>mcd::Binary</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class mcd::Binary</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><h3>template&lt;typename T, typename Enable = void&gt;<br />
class mcd::Binary&lt; T, Enable &gt;</h3>

<p>A class to manage binary values easily. </p>
</div>
</div>
</div>
<a name="d2/d1d/a01277" id="d2/d1d/a01277"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d2/d1d/a01277">&#9670;&nbsp;</a></span>mcd::ContraptionAttr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct mcd::ContraptionAttr</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>A struct to define <b><a class="el" href="../../d1/d31/a01245.php" title="A contraption.">Contraption</a></b> attributes. </p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="a94df82ca2692e5eeaaab5cc8d801ed5f"></a><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a></td>
<td class="fieldname">
angle</td>
<td class="fielddoc">
<p>Angle </p>
</td></tr>
<tr><td class="fieldtype">
<a id="aed95108125aaaa616352928dcf421b1e"></a><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a></td>
<td class="fieldname">
h</td>
<td class="fielddoc">
<p>Height </p>
</td></tr>
<tr><td class="fieldtype">
<a id="a26d74e808a118c6ed654a66a8c248480"></a><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a></td>
<td class="fieldname">
w</td>
<td class="fielddoc">
<p>Width </p>
</td></tr>
</table>

</div>
</div>
<a name="dd/d5d/a01325" id="dd/d5d/a01325"></a>
<h2 class="memtitle"><span class="permalink"><a href="#dd/d5d/a01325">&#9670;&nbsp;</a></span>mcd::MapMove</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct mcd::MapMove</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>A struct to know informations about th movement of something in the map. </p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="a2f707d77cfeffb93eceecea7c25a7cc6"></a>bool</td>
<td class="fieldname">
end</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a61ee478b9a87acbd0fb2299f867a1bea"></a>bool</td>
<td class="fieldname">
next</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d1/d3b/a01429" id="d1/d3b/a01429"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d1/d3b/a01429">&#9670;&nbsp;</a></span>mcd::Node</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct mcd::Node</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><h3>template&lt;class T&gt;<br />
struct mcd::Node&lt; T &gt;</h3>

<p>A struct to define a node for the tree. </p>
</div><div class="dynheader">
Collaboration diagram for mcd::Node&lt; T &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../db/d78/a01427.png" border="0" usemap="#amcd_1_1Node_3_01T_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="mcd_1_1Node_3_01T_01_4_coll__map" id="mcd_1_1Node_3_01T_01_4_coll__map">
<area shape="rect" title="A struct to define a node for the tree." alt="" coords="5,95,124,121"/>
<area shape="rect" title=" " alt="" coords="45,5,84,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.php">legend</a>]</span></center></div>
<table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="a4be9be6714e8c7fa10acc26a20d46193"></a>bool</td>
<td class="fieldname">
initialized</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a6f748c14098cdfeed1d14abc39a7f07a"></a><a class="el" href="../../da/d53/a00265.php#d1/d3b/a01429">Node</a>&lt; T &gt; *</td>
<td class="fieldname">
left</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a47bcfc49a031b3ddb4d563978c2500c6"></a><a class="el" href="../../da/d53/a00265.php#d1/d3b/a01429">Node</a>&lt; T &gt; *</td>
<td class="fieldname">
right</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a56cd61aea5d46ecf42aa3959086b7d96"></a>T</td>
<td class="fieldname">
values</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="ae9c3c7c184c194240178a2cf11f24566"></a><a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a></td>
<td class="fieldname">
weight</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d5/df9/a01441" id="d5/df9/a01441"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d5/df9/a01441">&#9670;&nbsp;</a></span>mcd::quatuor</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class mcd::quatuor</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><h3>template&lt;typename T, typename U = T, typename V = U, typename W = V&gt;<br />
class mcd::quatuor&lt; T, U, V, W &gt;</h3>

<p>A container for four values. </p>
</div><div class="dynheader">
Collaboration diagram for mcd::quatuor&lt; T, U, V, W &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d7/dfd/a01439.png" border="0" usemap="#amcd_1_1quatuor_3_01T_00_01U_00_01V_00_01W_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="mcd_1_1quatuor_3_01T_00_01U_00_01V_00_01W_01_4_coll__map" id="mcd_1_1quatuor_3_01T_00_01U_00_01V_00_01W_01_4_coll__map">
<area shape="rect" title="A container for four values." alt="" coords="5,139,144,180"/>
<area shape="rect" title=" " alt="" coords="55,5,94,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.php">legend</a>]</span></center></div>
<table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="a1e61017acad537e5c4d69f5eedfee55b"></a>T</td>
<td class="fieldname">
first</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a520f332e78f0efd6952f52b192a60328"></a>W</td>
<td class="fieldname">
quad</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a04fed1e7cdd9a52f5a8d3f49a4a2c741"></a>U</td>
<td class="fieldname">
second</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a6882c1aa13d7f7b35379233b0b406ba8"></a>V</td>
<td class="fieldname">
ter</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d9/db0/a01437" id="d9/db0/a01437"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d9/db0/a01437">&#9670;&nbsp;</a></span>mcd::trio</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class mcd::trio</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><h3>template&lt;typename T, typename U = T, typename V = U&gt;<br />
class mcd::trio&lt; T, U, V &gt;</h3>

<p>A container for three values. </p>
</div><div class="dynheader">
Collaboration diagram for mcd::trio&lt; T, U, V &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d3/d95/a01435.png" border="0" usemap="#amcd_1_1trio_3_01T_00_01U_00_01V_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="mcd_1_1trio_3_01T_00_01U_00_01V_01_4_coll__map" id="mcd_1_1trio_3_01T_00_01U_00_01V_01_4_coll__map">
<area shape="rect" title="A container for three values." alt="" coords="5,124,144,151"/>
<area shape="rect" title=" " alt="" coords="55,5,94,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.php">legend</a>]</span></center></div>
<table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="a487ffcf658abecf75319593df922b7bf"></a>T</td>
<td class="fieldname">
first</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="add070f6dc7f62980568fb3e4e65a8059"></a>U</td>
<td class="fieldname">
second</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a12acab2177c1232a58321ec43d572f08"></a>V</td>
<td class="fieldname">
ter</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d9/d5c/a01321" id="d9/d5c/a01321"></a>
<h2 class="memtitle"><span class="permalink"><a href="#d9/d5c/a01321">&#9670;&nbsp;</a></span>mcd::WorldDimensions</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct mcd::WorldDimensions</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>An object to group the dimensions of the world. </p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a id="abe35d460277b28d79aa0261fd58b89da"></a>size_t</td>
<td class="fieldname">
h</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a5e12726e58baa05036bc160c31d08016"></a>size_t</td>
<td class="fieldname">
w</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a id="a6e818e561922fa511658e15bec5fa55d"></a>size_t</td>
<td class="fieldname">
z</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a6982966fec37b802e584caec858e2e29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6982966fec37b802e584caec858e2e29">&#9670;&nbsp;</a></span>double32_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#a6982966fec37b802e584caec858e2e29">mcd::double32_t</a> = typedef double</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adda27badcbfcfc854854c6ab094cf34e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adda27badcbfcfc854854c6ab094cf34e">&#9670;&nbsp;</a></span>double64_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">mcd::double64_t</a> = typedef long double</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab3aa994c4b6d9eccce0cf840e6c0a731"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3aa994c4b6d9eccce0cf840e6c0a731">&#9670;&nbsp;</a></span>map_str</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#ab3aa994c4b6d9eccce0cf840e6c0a731">mcd::map_str</a> = typedef std::map&lt; std::string, std::string &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Alias. </p>

</div>
</div>
<a id="aeb393906487fbd42d8ae5f6831423fbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb393906487fbd42d8ae5f6831423fbb">&#9670;&nbsp;</a></span>MapArray</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#aeb393906487fbd42d8ae5f6831423fbb">mcd::MapArray</a> = typedef std::vector&lt; <a class="el" href="../../da/d53/a00265.php#abc72a1c83ec918a79447dfa996951da3">MapLine</a> &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abc72a1c83ec918a79447dfa996951da3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc72a1c83ec918a79447dfa996951da3">&#9670;&nbsp;</a></span>MapLine</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#abc72a1c83ec918a79447dfa996951da3">mcd::MapLine</a> = typedef std::vector&lt; <a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9ede">Tile</a> &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7139c2a1e77039f963009520820d8c87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7139c2a1e77039f963009520820d8c87">&#9670;&nbsp;</a></span>mutex</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#a7139c2a1e77039f963009520820d8c87">mcd::mutex</a> = typedef std::mutex</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0d3d39a7992ee9e893a83ab18066f79d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d3d39a7992ee9e893a83ab18066f79d">&#9670;&nbsp;</a></span>NodeWeight</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef long double <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">mcd::NodeWeight</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aba609827ae566c40802bf828ab5a5a3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba609827ae566c40802bf828ab5a5a3c">&#9670;&nbsp;</a></span>pair_str</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::pair&lt; std::string, std::string &gt; <a class="el" href="../../da/d53/a00265.php#aba609827ae566c40802bf828ab5a5a3c">mcd::pair_str</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Alias. </p>

</div>
</div>
<a id="a3efdc3dde9fecbe97dcf74de1df3165d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3efdc3dde9fecbe97dcf74de1df3165d">&#9670;&nbsp;</a></span>quatuor_str</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#a3efdc3dde9fecbe97dcf74de1df3165d">mcd::quatuor_str</a> = typedef <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; std::string &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a21976f3e9e8d360ccff90c8ead193a5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21976f3e9e8d360ccff90c8ead193a5e">&#9670;&nbsp;</a></span>thread</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#a21976f3e9e8d360ccff90c8ead193a5e">mcd::thread</a> = typedef std::thread</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a75c328d040057a44e61caef894c02afe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75c328d040057a44e61caef894c02afe">&#9670;&nbsp;</a></span>trio_str</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#a75c328d040057a44e61caef894c02afe">mcd::trio_str</a> = typedef <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; std::string &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a71d7894d7ddf1920b361bca7a2bb1ae5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71d7894d7ddf1920b361bca7a2bb1ae5">&#9670;&nbsp;</a></span>vector_str</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#a71d7894d7ddf1920b361bca7a2bb1ae5">mcd::vector_str</a> = typedef std::vector&lt; std::string &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Alias. </p>

</div>
</div>
<a id="aac34b1d11dd4820f0cfdee1e16a1c275"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac34b1d11dd4820f0cfdee1e16a1c275">&#9670;&nbsp;</a></span>VI</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../da/d53/a00265.php#aac34b1d11dd4820f0cfdee1e16a1c275">mcd::VI</a> = typedef std::vector&lt; int &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Alias. </p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a372ef82d72716aed789680d0a84c06d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a372ef82d72716aed789680d0a84c06d3">&#9670;&nbsp;</a></span>CaractSet</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../da/d53/a00265.php#a372ef82d72716aed789680d0a84c06d3">mcd::CaractSet</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3a198de4e683a1a1dbd64f56f1796e360c"></a>ALPHA&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3a9faad38e6204b43f9a15f1adecb9609a"></a>LOWER&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3abe645a90a98231a6ec57513cbcd0d7e2"></a>UPPER&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3a4c8dd61045696a4703edd23b8a21e4d7"></a>NUM&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3a0d613d61e790e44c8751022bbc7f2555"></a>SPEC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3accd227a8556bcfc0c096afc4f3ecce59"></a>READ&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a372ef82d72716aed789680d0a84c06d3abe31a72161ed89098d2ab77b3d258ff5"></a>ALL&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="ae124ce77f8e386663ac11e2e35e6070a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae124ce77f8e386663ac11e2e35e6070a">&#9670;&nbsp;</a></span>Colors</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../da/d53/a00265.php#ae124ce77f8e386663ac11e2e35e6070a">mcd::Colors</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colors list. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa4648822616bc86180727464a1e6c6312"></a>BLACK_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa6c91c7a0d965eea06426a9d94fed419f"></a>RED_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aac9cc84994b2dc998400606f509a5f39d"></a>GREEN_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aac1cfbf30b4d84302148c80564f09a2f7"></a>YELLOW_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aaaac26079ece66386f4c2cf268d474795"></a>BLUE_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aab8176b797e421a3d45ed5a872d872591"></a>PURPLE_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa131f0f8b48b6ef48d2d3093b20081110"></a>CYAN_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa38ead0a9861da91e3e5aad34b7a1dbfe"></a>GREY_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aaa86522df36b902b8e14c670dda459f1f"></a>LIGHT_BLACK_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa889b14723d6bc4c0ac8bb1e13480ad6e"></a>LIGHT_RED_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa9a372d70c82fc984f7c475342784fb25"></a>LIGHT_GREEN_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa8a64c210ea569e6832792e099c006157"></a>LIGHT_YELLOW_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa383a03eb7a3c8a6e508915b5abfd1f55"></a>LIGHT_BLUE_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aaf7fa27f9a891a06e7aab7764b7c87744"></a>LIGHT_PURPLE_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa1016baf606406c4b466ae02d7e8d249b"></a>LIGHT_CYAN_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aaf0d423059b6f4ad707d65956c1a43402"></a>LIGHT_GREY_F&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aabfc78599c77b7eb3c037c23f1bde963a"></a>BLACK_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa07262f1edc5408b021950dc9a12837c7"></a>RED_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa3bfe655ef7bb19c04ebf9a5ebabe975e"></a>GREEN_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa62a3874ee2f47d3a664fda4a63c193a3"></a>YELLOW_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa19995eb9ec42ffbe11647f8090e9f4fe"></a>BLUE_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aab754547a82033c3c904e91984b530326"></a>PURPLE_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aae0f5f8e09d8f4e0925884dd94fc3e870"></a>CYAN_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa90bd0646259d8ab65dd352bcd1ead16e"></a>GREY_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aadf2fe24817131afc02153bf31759d18b"></a>LIGHT_BLACK_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa3a29105a7f33b752d0342ec1e44023af"></a>LIGHT_RED_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa79f2fcacd6d4451c79096ed3e460e1e9"></a>LIGHT_GREEN_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa73f0b577c984186157b9d89348faf4f3"></a>LIGHT_YELLOW_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa77891b4842905f3aa098fae908dd5db9"></a>LIGHT_BLUE_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa10435c0f4e6c9f1df07383e39da2064e"></a>LIGHT_PURPLE_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa1d4b785bf14640105bb7b6e45d1d5528"></a>LIGHT_CYAN_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aaa548ce608701dcb3a6b2146e2e6b7f73"></a>LIGHT_GREY_B&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa1e23852820b9154316c7c06e2b7ba051"></a>NORMAL&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa2909dd0e0336f10b6da9735b859a3d19"></a>BOLD&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa8160fba05a5a291372a94bc22b55f62b"></a>SHADOW&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa25093123b8943308104129e1d762f3b7"></a>ITALIC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa0086c73c90c261db630b4dc8aea09bcf"></a>UNDERLINE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aaa2727ae72447eea06d4cc0ef67187280"></a>INVERT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa1e50e487f8672658546e3609404b53df"></a>HIDE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae124ce77f8e386663ac11e2e35e6070aa04dd53a8e6c2306e9bbf944c1d6047f2"></a>CROSS&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a55fd359a467c1bfe9d2f72c227bb1706"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55fd359a467c1bfe9d2f72c227bb1706">&#9670;&nbsp;</a></span>Direction</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../da/d53/a00265.php#a55fd359a467c1bfe9d2f72c227bb1706">mcd::Direction</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Directions to move. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898afbaedde498cdead4f2780217646e9ba1"></a>UP&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898ac4e0e4e3118472beeb2ae75827450f1f"></a>DOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a21507b40c80068eda19865706fdc2403"></a>RIGHT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a684d325a7303f52e64011467ff5c5758"></a>LEFT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898ab50339a10e1de285ac99d4c3990b8693"></a>NONE&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a7350be9df9566241dfb80071a89f9ede"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7350be9df9566241dfb80071a89f9ede">&#9670;&nbsp;</a></span>Tile</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../da/d53/a00265.php#a7350be9df9566241dfb80071a89f9ede">mcd::Tile</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tiles of the map. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a7350be9df9566241dfb80071a89f9edeab50339a10e1de285ac99d4c3990b8693"></a>NONE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7350be9df9566241dfb80071a89f9edea2399122c182da0d5946e2937bb73edf2"></a>OBSTACLE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7350be9df9566241dfb80071a89f9edeadedcb56e75fe1488e20865e0ea36d0b9"></a>GROUND&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7350be9df9566241dfb80071a89f9edeabb1ca97ec761fc37101737ba0aa2e7c5"></a>ERROR&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="ae3ee27656d8eb6e8a09407841cd00898"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3ee27656d8eb6e8a09407841cd00898">&#9670;&nbsp;</a></span>TREE_DIRECTION</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898">mcd::TREE_DIRECTION</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a13d6f38e0f10d479e85a13dcf6a8957f"></a>RIGHT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a52aa7e4298499294d2e07e10c6af50a7"></a>LEFT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a2d73725011f55395bc0e113263b5b874"></a>NONE&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898afbaedde498cdead4f2780217646e9ba1"></a>UP&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898ac4e0e4e3118472beeb2ae75827450f1f"></a>DOWN&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a21507b40c80068eda19865706fdc2403"></a>RIGHT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898a684d325a7303f52e64011467ff5c5758"></a>LEFT&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ae3ee27656d8eb6e8a09407841cd00898ab50339a10e1de285ac99d4c3990b8693"></a>NONE&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a476a24d6aeedfa55efcaee6379946a75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a476a24d6aeedfa55efcaee6379946a75">&#9670;&nbsp;</a></span>TREE_SORT</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../da/d53/a00265.php#a476a24d6aeedfa55efcaee6379946a75">mcd::TREE_SORT</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The sorting order of the tree. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a476a24d6aeedfa55efcaee6379946a75a8f22891e42808a1ec2280811f4954151"></a>ASC&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a476a24d6aeedfa55efcaee6379946a75acec043bd98e586f6d34ee5a4aefda509"></a>DESC&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a50868f33f43952d24f8449e883d3fd99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50868f33f43952d24f8449e883d3fd99">&#9670;&nbsp;</a></span>abs() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::abs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the absolute value of <em>a</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to use </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the absolute value of <em>a</em> </dd></dl>

</div>
</div>
<a id="a4af7738b8b199b0b0868819828bf3f4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4af7738b8b199b0b0868819828bf3f4f">&#9670;&nbsp;</a></span>abs() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T mcd::abs </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the absolute value of the given number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the absolute value of <em>in</em> </dd></dl>

</div>
</div>
<a id="a25ccd89a356e58d7653bd783306d2942"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25ccd89a356e58d7653bd783306d2942">&#9670;&nbsp;</a></span>array1Dto2D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; size_t, size_t &gt; mcd::array1Dto2D </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>maxX</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a53a33cf86c36584f92495307f8e68a00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53a33cf86c36584f92495307f8e68a00">&#9670;&nbsp;</a></span>array2Dto1D() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::array2Dto1D </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/d6f/a01445.php">Point</a> &amp;&#160;</td>
          <td class="paramname"><em>pt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>maxX</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a53a33cf86c36584f92495307f8e68a00_cgraph.png" border="0" usemap="#ada/d53/a00265_a53a33cf86c36584f92495307f8e68a00_cgraph" alt=""/></div>
<map name="da/d53/a00265_a53a33cf86c36584f92495307f8e68a00_cgraph" id="da/d53/a00265_a53a33cf86c36584f92495307f8e68a00_cgraph">
<area shape="rect" title=" " alt="" coords="5,5,135,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af1c42a8b9412d2afa3b486c5e629f752" title=" " alt="" coords="183,5,312,32"/>
</map>
</div>

</div>
</div>
<a id="af1c42a8b9412d2afa3b486c5e629f752"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1c42a8b9412d2afa3b486c5e629f752">&#9670;&nbsp;</a></span>array2Dto1D() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::array2Dto1D </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>maxX</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ace8a4328114062b56cf578ad92df821f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace8a4328114062b56cf578ad92df821f">&#9670;&nbsp;</a></span>collidesC()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::collidesC </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>r1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>r2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>y2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute if there is a collision between two circles. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">r1</td><td>Radius of the first circle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x1</td><td>X position of the first circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y1</td><td>Y position of the first circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">r2</td><td>Radius of the second circle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x2</td><td>X position of the second circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y2</td><td>Y position of the second circle's center</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="ae694a8102421f25c163a0ef7a9e903e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae694a8102421f25c163a0ef7a9e903e2">&#9670;&nbsp;</a></span>collidesPC()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::collidesPC </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>cx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>cy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute if there is a collision between a point and a circle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">cx</td><td>X position of the circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cy</td><td>Y position of the circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">r</td><td>Radius of the circle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>X position of the point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>Y position of the point</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="a3c001118da32a4466802e0b378af661b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c001118da32a4466802e0b378af661b">&#9670;&nbsp;</a></span>collidesPR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::collidesPR </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute if there is a collision between a point and a rectangle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rx</td><td>X position of the rectangle's left corner </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ry</td><td>Y position of the rectangle's left corner </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td>Width of the rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>Height of the rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>X position of the point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>Y position of the point</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="ab43dbb509e6ac3b52cd7767a1fb6bdaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab43dbb509e6ac3b52cd7767a1fb6bdaa">&#9670;&nbsp;</a></span>collidesR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::collidesR </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>w1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>h1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>w2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>h2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute if there is a collision between two rectangles. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x1</td><td>X position of the first rectangle's left corner</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y1</td><td>Y position of the first rectangle's left corner </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">w1</td><td>Width of the first rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h1</td><td>Height of the first rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x2</td><td>X position of the second rectangle's left corner</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y2</td><td>Y position of the second rectangle's left corner </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">w2</td><td>Width of the second rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h2</td><td>Height of the second rectangle</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="adbb1b1f3a194f48bab3af872f65b9757"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbb1b1f3a194f48bab3af872f65b9757">&#9670;&nbsp;</a></span>collidesRC()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::collidesRC </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>cx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>cy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute if there is a collision between a rectangle and a circle. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rx</td><td>X position of the rectangle's left </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ry</td><td>Y position of the rectangle's left </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">w</td><td>Width of the rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">h</td><td>Height of the rectangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cx</td><td>X position of the circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cy</td><td>Y position of the circle's center </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">r</td><td>Radius of the circle</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="ad53bf266a5db5dc112e71ebe3c78946e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad53bf266a5db5dc112e71ebe3c78946e">&#9670;&nbsp;</a></span>contains()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::contains </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verify if a vector contains or not something. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The array in which to verify </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The value to search</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="a95be8eb46f76298e1218183421d13825"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95be8eb46f76298e1218183421d13825">&#9670;&nbsp;</a></span>count()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::count </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Count the number of appearances. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">text</td><td>The text to read </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>The caracter to find </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return number of appearances </dd></dl>

</div>
</div>
<a id="a0598b7abd7e7441f6553f1b486053945"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0598b7abd7e7441f6553f1b486053945">&#9670;&nbsp;</a></span>decimalPart()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">V mcd::decimalPart </td>
          <td>(</td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the decimal part of the given number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the decimal part of <em>a</em> </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a0598b7abd7e7441f6553f1b486053945_cgraph.png" border="0" usemap="#ada/d53/a00265_a0598b7abd7e7441f6553f1b486053945_cgraph" alt=""/></div>
<map name="da/d53/a00265_a0598b7abd7e7441f6553f1b486053945_cgraph" id="da/d53/a00265_a0598b7abd7e7441f6553f1b486053945_cgraph">
<area shape="rect" title="Return the decimal part of the given number." alt="" coords="5,5,129,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af9443ebf71fe196006831fe344a09f13" title="Return the whole part of the given number." alt="" coords="177,5,291,32"/>
</map>
</div>

</div>
</div>
<a id="ac10f5cb91293579d36d9ea767825d5bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac10f5cb91293579d36d9ea767825d5bb">&#9670;&nbsp;</a></span>deletePtr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value || <a class="el" href="../../d0/d95/a01389.php">Check::is_minded_ptr</a>&lt; T &gt;::value &gt; mcd::deletePtr </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>pointer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delete a pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">pointer</td><td>The pointer to delete</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void  Delete <em>pointer</em> if is <b>not</b> <b>equal</b> to nullptr and <b>not</b> a joinable thread pointer.<br  />
 For a joinable thread pointer, it wait for the end of the function.<br  />
 After delete, it put the pointer to <b>nullptr</b>. </dd></dl>

</div>
</div>
<a id="a900f9e45ac94dbf01c4b67fb40682118"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a900f9e45ac94dbf01c4b67fb40682118">&#9670;&nbsp;</a></span>dist() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> mcd::dist </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/d6f/a01445.php">Point</a> &amp;&#160;</td>
          <td class="paramname"><em>ptA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d9/d6f/a01445.php">Point</a> &amp;&#160;</td>
          <td class="paramname"><em>ptB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the distance between the two given points. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptA</td><td>The first point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ptB</td><td>The second point</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the distance between the given coordinates </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a900f9e45ac94dbf01c4b67fb40682118_cgraph.png" border="0" usemap="#ada/d53/a00265_a900f9e45ac94dbf01c4b67fb40682118_cgraph" alt=""/></div>
<map name="da/d53/a00265_a900f9e45ac94dbf01c4b67fb40682118_cgraph" id="da/d53/a00265_a900f9e45ac94dbf01c4b67fb40682118_cgraph">
<area shape="rect" title="Return the distance between the two given points." alt="" coords="5,5,81,32"/>
<area shape="rect" href="../../da/d53/a00265.php#a4d75f23c9b03fd2c56324895d0ff3c58" title="Return the distance of the given coordinates." alt="" coords="129,5,205,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae3a712e4de66375b1a188fa464c968e2" title="Compute the squareroot of a." alt="" coords="253,5,331,32"/>
</map>
</div>

</div>
</div>
<a id="a4d75f23c9b03fd2c56324895d0ff3c58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d75f23c9b03fd2c56324895d0ff3c58">&#9670;&nbsp;</a></span>dist() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T mcd::dist </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>z1</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>z2</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the distance of the given coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x1</td><td>X position of the first point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x2</td><td>X position of the second point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y1</td><td>Y position of the first point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y2</td><td>Y position of the second point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z1</td><td>Z position of the first point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z2</td><td>Z position of the second point</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the distance between the given coordinates </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a4d75f23c9b03fd2c56324895d0ff3c58_cgraph.png" border="0" usemap="#ada/d53/a00265_a4d75f23c9b03fd2c56324895d0ff3c58_cgraph" alt=""/></div>
<map name="da/d53/a00265_a4d75f23c9b03fd2c56324895d0ff3c58_cgraph" id="da/d53/a00265_a4d75f23c9b03fd2c56324895d0ff3c58_cgraph">
<area shape="rect" title="Return the distance of the given coordinates." alt="" coords="5,5,81,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae3a712e4de66375b1a188fa464c968e2" title="Compute the squareroot of a." alt="" coords="129,5,207,32"/>
</map>
</div>

</div>
</div>
<a id="a9042d2e8e9a6311b4260c6f376f4072c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9042d2e8e9a6311b4260c6f376f4072c">&#9670;&nbsp;</a></span>dsigmoide()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> mcd::dsigmoide </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute with the derivated sigmoide. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the result </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a9042d2e8e9a6311b4260c6f376f4072c_cgraph.png" border="0" usemap="#ada/d53/a00265_a9042d2e8e9a6311b4260c6f376f4072c_cgraph" alt=""/></div>
<map name="da/d53/a00265_a9042d2e8e9a6311b4260c6f376f4072c_cgraph" id="da/d53/a00265_a9042d2e8e9a6311b4260c6f376f4072c_cgraph">
<area shape="rect" title="Compute with the derivated sigmoide." alt="" coords="5,5,120,32"/>
<area shape="rect" href="../../da/d53/a00265.php#a31eb09e89b0015d54768c4510e59c780" title="Compute the square of a." alt="" coords="168,5,237,32"/>
</map>
</div>

</div>
</div>
<a id="a1a14f66f0c6eba0c77338364977658e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a14f66f0c6eba0c77338364977658e1">&#9670;&nbsp;</a></span>error_log()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::error_log </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the given text like an error. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>The line number where the function is call (use line_number)</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The type of the error</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>The differents things to print <pre class="fragment">    \return         void
</pre> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a10764d50321a1ff81cc7cd4a9f7e42bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10764d50321a1ff81cc7cd4a9f7e42bc">&#9670;&nbsp;</a></span>eucl()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">V mcd::eucl </td>
          <td>(</td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the result of the euclidian function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the result of the euclidian divide </dd></dl>

</div>
</div>
<a id="a0d72a06346182146581ff63f2fa70580"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d72a06346182146581ff63f2fa70580">&#9670;&nbsp;</a></span>exec()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::exec </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>cmd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>force</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use system in an IF and say if there is an error. </p>

</div>
</div>
<a id="a05a9ea6944b5f2bf87c0eb17a5e0b32f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05a9ea6944b5f2bf87c0eb17a5e0b32f">&#9670;&nbsp;</a></span>explode()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto mcd::explode </td>
          <td>(</td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td> -&gt; decltype( <a class="el" href="../../da/d53/a00265.php#ad1e8ca2394e07c20ed9c391a37a62322">split</a> (std::forward&lt; Args &gt;(args)...)) </td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for <b>split</b>. </p>

</div>
</div>
<a id="ae44c2e346da18a7424d97535fb654448"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae44c2e346da18a7424d97535fb654448">&#9670;&nbsp;</a></span>fileExists()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::fileExists </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return true if the file exists. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">path</td><td>The path to the file </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aada88379a63c49987a295485391aa192"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aada88379a63c49987a295485391aa192">&#9670;&nbsp;</a></span>fileFormat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::fileFormat </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>line</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Format a given <em>line</em> for files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">line</td><td>The line to format</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="aea3616a95b7e00c3c401fe7f5d907ba8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea3616a95b7e00c3c401fe7f5d907ba8">&#9670;&nbsp;</a></span>fromBigVal() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int mcd::fromBigVal </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a char in an int. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6ebc06a4ba39c08505854aa29dcd0f0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ebc06a4ba39c08505854aa29dcd0f0e">&#9670;&nbsp;</a></span>fromBigVal() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int mcd::fromBigVal </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a std::string in an int. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a2b44ab9ee6b692aa036d6f7d0285e909"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b44ab9ee6b692aa036d6f7d0285e909">&#9670;&nbsp;</a></span>getall()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; std::string &gt; &gt; mcd::getall </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str_regex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>insensitive</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return all occurences of a regex in a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str_regex</td><td>The shape of the regex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string in which to search </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">insensitive</td><td><b>true</b> or <b>false</b> to enable/disablecase sensitive </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a vector of string with the occurences </dd></dl>

</div>
</div>
<a id="a97dfa91f19b9e2175dddbf65285663a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97dfa91f19b9e2175dddbf65285663a2">&#9670;&nbsp;</a></span>getFileSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::getFileSize </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the file size. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">path</td><td>The path to the file</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the size of the file </dd></dl>

</div>
</div>
<a id="a7fa98622f290e9789bf929fb66ee3a4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fa98622f290e9789bf929fb66ee3a4c">&#9670;&nbsp;</a></span>getlines()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; mcd::getlines </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all the lines in a given file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The opened ifstream</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a vector which contains the file's lines </dd></dl>

</div>
</div>
<a id="ac4573282fe9cf6a0af8de786baaf6456"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4573282fe9cf6a0af8de786baaf6456">&#9670;&nbsp;</a></span>getMilli()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::chrono::milliseconds mcd::getMilli </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the milliseconds since the Epoch. </p>

</div>
</div>
<a id="a49144605ea2f1f8a9463ae309c293628"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49144605ea2f1f8a9463ae309c293628">&#9670;&nbsp;</a></span>getSec()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::time_t mcd::getSec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of seconds since the Epoch. </p>
<pre class="fragment">\return         Return the number of seconds
</pre> 
</div>
</div>
<a id="aad6c9253e2099a49d163fad90ef6f5f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad6c9253e2099a49d163fad90ef6f5f5">&#9670;&nbsp;</a></span>getType()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::getType </td>
          <td>(</td>
          <td class="paramtype">const C &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the type of <em>obj</em> in a string. </p>
<dl class="section return"><dt>Returns</dt><dd>Return the type of <em>obj</em> </dd></dl>

</div>
</div>
<a id="ad751f3d04e342cbe86c561683c3bd99c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad751f3d04e342cbe86c561683c3bd99c">&#9670;&nbsp;</a></span>implode()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::implode </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>glue</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stick the <em>a</em> vector with the <em>glue</em> given. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The array to stick </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">glue</td><td>The string to stick the array's elements</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a string of the array </dd></dl>

</div>
</div>
<a id="af0b4fd6390d33edc9719d42b26f6e29f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b4fd6390d33edc9719d42b26f6e29f">&#9670;&nbsp;</a></span>info_log()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::info_log </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the given text like an information. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>The line number where the function is call (use line_number)</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The type of the info</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>The differents things to print <pre class="fragment">    \return         void
</pre> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6f68c011df46f54833bbda0ac9de04e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f68c011df46f54833bbda0ac9de04e2">&#9670;&nbsp;</a></span>invmod()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V , typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">V mcd::invmod </td>
          <td>(</td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>positive</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the modular inverse of a number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The max value of the modulo </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">positive</td><td>If set to <em>true</em>, the result will be between 0 and <em>b</em> <pre class="fragment">    \return         Return the result of the modulo
</pre> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a23f629777bd39a54b33491cb1223da01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23f629777bd39a54b33491cb1223da01">&#9670;&nbsp;</a></span>isDivisor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::isDivisor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return <b>true</b> if <em>a</em> / <em>b</em> = 0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The value to use </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return <b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="ab001b84d20c0fffe59c7a55ed872d300"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab001b84d20c0fffe59c7a55ed872d300">&#9670;&nbsp;</a></span>isLuhn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::isLuhn </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Validate a number like a card number, a SIRET number, ... </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>The number to verify</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return <b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="a6a0096efe278298f80c641af617dd216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a0096efe278298f80c641af617dd216">&#9670;&nbsp;</a></span>isNumber()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::isNumber </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return true if the caracter is a number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>The caracter to verify</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="ad3913978376bb08e036a7bf0b21d6b50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3913978376bb08e036a7bf0b21d6b50">&#9670;&nbsp;</a></span>isPrime()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::isPrime </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>nb</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return true if the given number is prime, false either. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nb</td><td>The value to verify</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="a69d6be0b9d139073dda5e708c76dccdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69d6be0b9d139073dda5e708c76dccdd">&#9670;&nbsp;</a></span>log2p()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int mcd::log2p </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Do the log of x in base 2. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return log2(<em>x</em>) </dd></dl>

</div>
</div>
<a id="a0762354667dfb9f9e539e501399a9a00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0762354667dfb9f9e539e501399a9a00">&#9670;&nbsp;</a></span>lowercase() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::lowercase </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the given string to lowercase. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string to treat</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the changed string </dd></dl>

</div>
</div>
<a id="a0c6d83e8654926ceebd7777a9ada0652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c6d83e8654926ceebd7777a9ada0652">&#9670;&nbsp;</a></span>lowercase() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::lowercase </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string::iterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string::iterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the given interval to lowercase. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string to treat </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>The begininng of the transformation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>The end of the transformation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the changed string </dd></dl>

</div>
</div>
<a id="a176933d706495ddff7385a68319e7169"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a176933d706495ddff7385a68319e7169">&#9670;&nbsp;</a></span>luhn()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int mcd::luhn </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute the checksum number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>The number to use to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed number </dd></dl>

</div>
</div>
<a id="a50e5370a188b7230c0dce47cc746f533"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50e5370a188b7230c0dce47cc746f533">&#9670;&nbsp;</a></span>max()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename V , typename U  = typename std::conditional&lt;                  std::is_integral&lt; T &gt;::value &amp;&amp; std::is_integral&lt; V &gt;::value ||                      std::is_floating_point&lt; T &gt;::value &amp;&amp; std::is_floating_point&lt; V &gt;::value,                  typename std::conditional&lt; sizeof(T) &gt;= sizeof(V), T, V &gt;::type, typename std::conditional&lt; std::is_floating_point&lt; T &gt;::value &amp;&amp;std::is_integral&lt; V &gt;::value, T, typename std::conditional&lt; std::is_floating_point&lt; V &gt;::value &amp;&amp;std::is_integral&lt; T &gt;::value, V, V &gt;::type &gt;::type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">::type U mcd::max </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the maximum of the arguments. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the maximum of <em>a</em> and <em>b</em> </dd></dl>

</div>
</div>
<a id="a773d8ead6e35e10f86f4285f3f79ecb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a773d8ead6e35e10f86f4285f3f79ecb9">&#9670;&nbsp;</a></span>microSleep()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::microSleep </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sleep the thread during <em>duration</em> microseconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">duration</td><td>The time to sleep return void </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a30ed8e5c290433011b9855598cfc050a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30ed8e5c290433011b9855598cfc050a">&#9670;&nbsp;</a></span>milliSleep()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::milliSleep </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sleep the thread during <em>duration</em> milliseconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">duration</td><td>The time to sleep return void </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abc683613235e8674b000071c25747728"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc683613235e8674b000071c25747728">&#9670;&nbsp;</a></span>min()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename V , typename U  = typename std::conditional&lt;                  std::is_integral&lt; T &gt;::value &amp;&amp; std::is_integral&lt; V &gt;::value ||                      std::is_floating_point&lt; T &gt;::value &amp;&amp; std::is_floating_point&lt; V &gt;::value,                  typename std::conditional&lt; sizeof(T) &gt;= sizeof(V), T, V &gt;::type, typename std::conditional&lt; std::is_floating_point&lt; T &gt;::value &amp;&amp;std::is_integral&lt; V &gt;::value, T, typename std::conditional&lt; std::is_floating_point&lt; V &gt;::value &amp;&amp;std::is_integral&lt; T &gt;::value, V, V &gt;::type &gt;::type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">::type U mcd::min </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the minimum of the arguments. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the minimum of <em>a</em> and <em>b</em> </dd></dl>

</div>
</div>
<a id="af44c5ff8cc0a054f720ed177e7e44265"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af44c5ff8cc0a054f720ed177e7e44265">&#9670;&nbsp;</a></span>mod()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V , typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">V mcd::mod </td>
          <td>(</td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>positive</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the modulo of two numbers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The max value of the modulo </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">positive</td><td>If set to <em>true</em>, the result will be between 0 and <em>b</em> <pre class="fragment">    \return         Return the result of the modulo
</pre> </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_af44c5ff8cc0a054f720ed177e7e44265_cgraph.png" border="0" usemap="#ada/d53/a00265_af44c5ff8cc0a054f720ed177e7e44265_cgraph" alt=""/></div>
<map name="da/d53/a00265_af44c5ff8cc0a054f720ed177e7e44265_cgraph" id="da/d53/a00265_af44c5ff8cc0a054f720ed177e7e44265_cgraph">
<area shape="rect" title="Return the modulo of two numbers." alt="" coords="5,5,85,32"/>
<area shape="rect" href="../../da/d53/a00265.php#a0598b7abd7e7441f6553f1b486053945" title="Return the decimal part of the given number." alt="" coords="133,5,257,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af9443ebf71fe196006831fe344a09f13" title="Return the whole part of the given number." alt="" coords="305,5,419,32"/>
</map>
</div>

</div>
</div>
<a id="a5b2e0c30451ea35d0cc5eb9badea5be0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b2e0c30451ea35d0cc5eb9badea5be0">&#9670;&nbsp;</a></span>nanoSleep()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::nanoSleep </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sleep the thread during <em>duration</em> nanoseconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">duration</td><td>The time to sleep return void </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8106aa588d48c9fbed5e30e22fd55f76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8106aa588d48c9fbed5e30e22fd55f76">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>
<p><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> != <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>

</div>
</div>
<a id="ad8ebb26f5618a66bc7e9bf3317a0477f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8ebb26f5618a66bc7e9bf3317a0477f">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a263f600382a931b0f059dc90a834e8b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a263f600382a931b0f059dc90a834e8b0">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V , typename W &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e4a4fa2bc9dc1a79ba1c4e1326c4e86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e4a4fa2bc9dc1a79ba1c4e1326c4e86">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad3c520cfb33cd0c457951ab10b3e6c28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3c520cfb33cd0c457951ab10b3e6c28">&#9670;&nbsp;</a></span>operator!=() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a68941be2cb0a91ce0a75b0992c772e19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68941be2cb0a91ce0a75b0992c772e19">&#9670;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>+<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> </p>

</div>
</div>
<a id="afd0ec761914252fc66c1180845c1fb36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd0ec761914252fc66c1180845c1fb36">&#9670;&nbsp;</a></span>operator++() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&amp; mcd::operator++ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Big++. </p>

</div>
</div>
<a id="a164a9c100a128e971c6becd38fe7db82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a164a9c100a128e971c6becd38fe7db82">&#9670;&nbsp;</a></span>operator++() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::operator++ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>++<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> </p>

</div>
</div>
<a id="aa34a809adea5c0391ccc070f4b6fac4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa34a809adea5c0391ccc070f4b6fac4b">&#9670;&nbsp;</a></span>operator-()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>-<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> </p>

</div>
</div>
<a id="ad41a22ed7df2868dc7c42872004fc957"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad41a22ed7df2868dc7c42872004fc957">&#9670;&nbsp;</a></span>operator--() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a>&amp; mcd::operator-- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>&ndash;. </p>

</div>
</div>
<a id="a69988c1c7ee2ad5814c297f749588e78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69988c1c7ee2ad5814c297f749588e78">&#9670;&nbsp;</a></span>operator--() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::operator-- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>&ndash;<a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> </p>

</div>
</div>
<a id="a72149c6d15e16114c649ecb03aec7f81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72149c6d15e16114c649ecb03aec7f81">&#9670;&nbsp;</a></span>operator&lt;() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>
<p><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> &lt; <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>

</div>
</div>
<a id="a74705a4e1fb16838be02655f4ea61e11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74705a4e1fb16838be02655f4ea61e11">&#9670;&nbsp;</a></span>operator&lt;() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aad6aa36cdd6eeeda915b26366786f62e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad6aa36cdd6eeeda915b26366786f62e">&#9670;&nbsp;</a></span>operator&lt;() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V , typename W &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab3a0bfd8107f1a0512e3daccbe8ec32a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3a0bfd8107f1a0512e3daccbe8ec32a">&#9670;&nbsp;</a></span>operator&lt;() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a426eb225a242b41a1bd4a38a721bfa39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a426eb225a242b41a1bd4a38a721bfa39">&#9670;&nbsp;</a></span>operator&lt;() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0e76ac5c4df82149886b58edcfc7090a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e76ac5c4df82149886b58edcfc7090a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; mcd::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>date</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac056cce1809ed32482358d31064dac84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac056cce1809ed32482358d31064dac84">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; mcd::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>time</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a94817d75f824097e42c5a7fdf72907f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94817d75f824097e42c5a7fdf72907f9">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; mcd::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d85/a01273.php">DateTime</a>&#160;</td>
          <td class="paramname"><em>datetime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a61257b7f63f915629b98d2b57933d65e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61257b7f63f915629b98d2b57933d65e">&#9670;&nbsp;</a></span>operator&lt;=() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>
<p><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> &lt;= <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>

</div>
</div>
<a id="a57c7184396da7d8b9972ac64f37fc019"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57c7184396da7d8b9972ac64f37fc019">&#9670;&nbsp;</a></span>operator&lt;=() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6991b54e58e0a5b120f698f4e941ec86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6991b54e58e0a5b120f698f4e941ec86">&#9670;&nbsp;</a></span>operator&lt;=() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V , typename W &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a35feb7b77517c8a067a4f631d0c01903"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35feb7b77517c8a067a4f631d0c01903">&#9670;&nbsp;</a></span>operator&lt;=() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af16116bb74326c4d798c387465347225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af16116bb74326c4d798c387465347225">&#9670;&nbsp;</a></span>operator&lt;=() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a49c8e33d55da52fabdb3f09f2fd3e5b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49c8e33d55da52fabdb3f09f2fd3e5b2">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>
<p><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> == <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>

</div>
</div>
<a id="a91f197d1381e789ce2295059d4d02c13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91f197d1381e789ce2295059d4d02c13">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4ba723943a9c71f6b716cfff3862b656"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ba723943a9c71f6b716cfff3862b656">&#9670;&nbsp;</a></span>operator==() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V , typename W &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1b7c3b86bf4f3323ec303cf6caf4657d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b7c3b86bf4f3323ec303cf6caf4657d">&#9670;&nbsp;</a></span>operator==() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ea1828f8233339ff4109a6d054a3f6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ea1828f8233339ff4109a6d054a3f6e">&#9670;&nbsp;</a></span>operator==() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4390d2726279039c439ba3b866fa2e50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4390d2726279039c439ba3b866fa2e50">&#9670;&nbsp;</a></span>operator&gt;() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa246dbc03b543a0a767df8e486189488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa246dbc03b543a0a767df8e486189488">&#9670;&nbsp;</a></span>operator&gt;() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V , typename W &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0eb9966b5003b5c69b1c19cf2c91da5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0eb9966b5003b5c69b1c19cf2c91da5b">&#9670;&nbsp;</a></span>operator&gt;() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae8c157fea2d3cba9a23a3ff2878cc08e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8c157fea2d3cba9a23a3ff2878cc08e">&#9670;&nbsp;</a></span>operator&gt;() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a83c8849718e8a8532282e6f1c80ceca0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83c8849718e8a8532282e6f1c80ceca0">&#9670;&nbsp;</a></span>operator&gt;=() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare two <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>
<p><a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a> &gt;= <a class="el" href="../../d6/dc4/a01125.php" title="A new huge arithmetic variable.">Big</a>. </p>

</div>
</div>
<a id="aacc2b27f076a57eb6664e7d920a52c7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacc2b27f076a57eb6664e7d920a52c7e">&#9670;&nbsp;</a></span>operator&gt;=() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d16/a01269.php">Date</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab654d9827594410729bb1267af700f68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab654d9827594410729bb1267af700f68">&#9670;&nbsp;</a></span>operator&gt;=() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V , typename W &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d5/df9/a01441">quatuor</a>&lt; T, U, V, W &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab2490b5d2fcccd5d4fcd7539a3e9ec8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2490b5d2fcccd5d4fcd7539a3e9ec8f">&#9670;&nbsp;</a></span>operator&gt;=() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/d20/a01421.php">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac6fc9365b82f561a4603cb21b7d247ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6fc9365b82f561a4603cb21b7d247ec">&#9670;&nbsp;</a></span>operator&gt;=() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U , typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d53/a00265.php#d9/db0/a01437">trio</a>&lt; T, U, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0f3f4e24615446479ff59ce15ce61cde"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f3f4e24615446479ff59ce15ce61cde">&#9670;&nbsp;</a></span>pgcd()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">V mcd::pgcd </td>
          <td>(</td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the result of the pgcd. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the result of pgcd </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a0f3f4e24615446479ff59ce15ce61cde_cgraph.png" border="0" usemap="#ada/d53/a00265_a0f3f4e24615446479ff59ce15ce61cde_cgraph" alt=""/></div>
<map name="da/d53/a00265_a0f3f4e24615446479ff59ce15ce61cde_cgraph" id="da/d53/a00265_a0f3f4e24615446479ff59ce15ce61cde_cgraph">
<area shape="rect" title="Return the result of the pgcd." alt="" coords="5,5,88,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af44c5ff8cc0a054f720ed177e7e44265" title="Return the modulo of two numbers." alt="" coords="136,5,216,32"/>
<area shape="rect" href="../../da/d53/a00265.php#a0598b7abd7e7441f6553f1b486053945" title="Return the decimal part of the given number." alt="" coords="264,5,388,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af9443ebf71fe196006831fe344a09f13" title="Return the whole part of the given number." alt="" coords="436,5,549,32"/>
</map>
</div>

</div>
</div>
<a id="ad6ca3061a339d883c257105bd831efd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6ca3061a339d883c257105bd831efd1">&#9670;&nbsp;</a></span>ppcm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::ppcm </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the ppcm. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The value to use </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the ppcm of <em>a</em> and <em>b</em> </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_ad6ca3061a339d883c257105bd831efd1_cgraph.png" border="0" usemap="#ada/d53/a00265_ad6ca3061a339d883c257105bd831efd1_cgraph" alt=""/></div>
<map name="da/d53/a00265_ad6ca3061a339d883c257105bd831efd1_cgraph" id="da/d53/a00265_ad6ca3061a339d883c257105bd831efd1_cgraph">
<area shape="rect" title="Compute the ppcm." alt="" coords="5,5,92,32"/>
<area shape="rect" href="../../da/d53/a00265.php#a0f3f4e24615446479ff59ce15ce61cde" title="Return the result of the pgcd." alt="" coords="140,5,223,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af44c5ff8cc0a054f720ed177e7e44265" title="Return the modulo of two numbers." alt="" coords="271,5,351,32"/>
<area shape="rect" href="../../da/d53/a00265.php#a0598b7abd7e7441f6553f1b486053945" title="Return the decimal part of the given number." alt="" coords="399,5,523,32"/>
<area shape="rect" href="../../da/d53/a00265.php#af9443ebf71fe196006831fe344a09f13" title="Return the whole part of the given number." alt="" coords="571,5,684,32"/>
</map>
</div>

</div>
</div>
<a id="a5996fcf8097a903a5461a6035ff0f98d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5996fcf8097a903a5461a6035ff0f98d">&#9670;&nbsp;</a></span>print_all()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Something &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::print_all </td>
          <td>(</td>
          <td class="paramtype">const Something &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>change</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints approximately everything. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>The data to print </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">change</td><td><b>true</b> or <b>false</b>, <b>true</b> to print the value of a pointer instead of his address </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0029a835651d350c925a43fd718ab590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0029a835651d350c925a43fd718ab590">&#9670;&nbsp;</a></span>print_r()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Array &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::print_r </td>
          <td>(</td>
          <td class="paramtype">const Array &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the content of an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The array to print</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="a5046a9dfac4629babcb20cf7b914415e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5046a9dfac4629babcb20cf7b914415e">&#9670;&nbsp;</a></span>printSize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::printSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the size of <em>obj</em> type. </p>

</div>
</div>
<a id="a2bb83762638ce787815f3699d67faa92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bb83762638ce787815f3699d67faa92">&#9670;&nbsp;</a></span>printType()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::printType </td>
          <td>(</td>
          <td class="paramtype">const C &amp;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the type of <em>obj</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">obj</td><td>The variable to print the type of</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a2bb83762638ce787815f3699d67faa92_cgraph.png" border="0" usemap="#ada/d53/a00265_a2bb83762638ce787815f3699d67faa92_cgraph" alt=""/></div>
<map name="da/d53/a00265_a2bb83762638ce787815f3699d67faa92_cgraph" id="da/d53/a00265_a2bb83762638ce787815f3699d67faa92_cgraph">
<area shape="rect" title="Print the type of obj." alt="" coords="5,5,113,32"/>
<area shape="rect" href="../../da/d53/a00265.php#aad6c9253e2099a49d163fad90ef6f5f5" title="Get the type of obj in a string." alt="" coords="161,5,263,32"/>
</map>
</div>

</div>
</div>
<a id="af6f9411fa8041c4f9f81519deeba4a0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6f9411fa8041c4f9f81519deeba4a0a">&#9670;&nbsp;</a></span>ProjectionSurSegment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::ProjectionSurSegment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>Cx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>Cy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>Ax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>Ay</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>Bx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>By</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute if there is a collision on a segment. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">Cx</td><td>X position of the point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Cy</td><td>Y position of the point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Ax</td><td>X position of the segment's first side </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Ay</td><td>Y position of the segment's first side </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Bx</td><td>X position of the segment's second side </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">By</td><td>Y position of the segment's second side</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="a77f16d62ba2ac4c7ad44d4459f149b2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77f16d62ba2ac4c7ad44d4459f149b2e">&#9670;&nbsp;</a></span>Q_rsqrt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T mcd::Q_rsqrt </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>number</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the inverse square root with a float precision. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">number</td><td>The value invert and to square</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a float </dd></dl>

</div>
</div>
<a id="a1ddd069f38e7407563a5d8e763d7dc90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ddd069f38e7407563a5d8e763d7dc90">&#9670;&nbsp;</a></span>randStr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::randStr </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>flags</em> = <code>CaractSet::ALL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a random string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nb</td><td>The number of caracters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">flags</td><td>The set of caracters to use</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the rand string </dd></dl>

</div>
</div>
<a id="a25c5de928e67bd9c01f720f39329f04c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25c5de928e67bd9c01f720f39329f04c">&#9670;&nbsp;</a></span>ref() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">C&amp; mcd::ref </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abf93d7765c51ab825641e2f1de5fb2c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf93d7765c51ab825641e2f1de5fb2c9">&#9670;&nbsp;</a></span>ref() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">C&amp; mcd::ref </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; C &gt;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a685af449d029b7793f497633bbafbcbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685af449d029b7793f497633bbafbcbb">&#9670;&nbsp;</a></span>removeAccents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::removeAccents </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace all the accents of a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string in which to replace </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the string without any accents </dd></dl>

</div>
</div>
<a id="ae61cb7564bc3b0ccbcad0b991b74635d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae61cb7564bc3b0ccbcad0b991b74635d">&#9670;&nbsp;</a></span>replace()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::replace </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>regex</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>word</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>insensitive</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replace something by something else in a string using regex_replace. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string to treat </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">from</td><td>The string to replace </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">to</td><td>The string to use to replace </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">regex</td><td><b>true</b> or <b>false</b>, <b>true</b> if <em>from</em> is a regex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">word</td><td><b>true</b> or <b>false</b>, <b>true</b> if only have to replace complete words and not some parts</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">insensitive</td><td><b>true</b> or <b>false</b> <pre class="fragment">    \return         Return the changed string
</pre> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a71d86de24ac44a702d65c29bcb96c686"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71d86de24ac44a702d65c29bcb96c686">&#9670;&nbsp;</a></span>rewrite()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; V &gt; mcd::rewrite </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; V &gt; &amp;&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rewrite a vector array without the value at the given index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The array to rewrite </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>The index not to let in the array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return an array without the <em>index</em> </dd></dl>

</div>
</div>
<a id="a95489209bc34099d9508c0e22a279bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95489209bc34099d9508c0e22a279bb0">&#9670;&nbsp;</a></span>rngRange()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U  = double&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T mcd::rngRange </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">U&#160;</td>
          <td class="paramname"><em>b</em> = <code>0.1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute a random number in a computed range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The boundary of the range </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The distance btween the boundaries</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a random value </dd></dl>

</div>
</div>
<a id="a7e1c88cc52e517f309354a546e78f403"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e1c88cc52e517f309354a546e78f403">&#9670;&nbsp;</a></span>round()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T mcd::round </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>zeros</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the round of the given number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to round </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">zeros</td><td>The number of nums after the coma</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the rounded value of <em>a</em> </dd></dl>

</div>
</div>
<a id="abcc09c3d97d72792032b5615d41aa1c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcc09c3d97d72792032b5615d41aa1c5">&#9670;&nbsp;</a></span>servLog()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::servLog </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>server</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em> = <code>&quot;Server&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write a string in cout like in a server. </p>

</div>
</div>
<a id="a08a1c8da74e7ca2634c1a2a4f4a3ac9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08a1c8da74e7ca2634c1a2a4f4a3ac9d">&#9670;&nbsp;</a></span>setlines()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::setlines </td>
          <td>(</td>
          <td class="paramtype">std::ofstream &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>lines</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write all the lines in a given file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">output</td><td>The opened ofstream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lines</td><td>The lines to write</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a id="a2d67b0e24c6216a693a903f5bc8c31a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d67b0e24c6216a693a903f5bc8c31a0">&#9670;&nbsp;</a></span>sigmoide()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a> mcd::sigmoide </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d53/a00265.php#adda27badcbfcfc854854c6ab094cf34e">double64_t</a>&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the result of the sigmoide function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the result </dd></dl>

</div>
</div>
<a id="a0003c12a7cc73a35e488f59ad14770bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0003c12a7cc73a35e488f59ad14770bf">&#9670;&nbsp;</a></span>sleep()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::sleep </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sleep the thread during <em>duration</em> seconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">duration</td><td>The time to sleep return void </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0a1aa5f89ff57aa7dc4e6d136c9c315f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a1aa5f89ff57aa7dc4e6d136c9c315f">&#9670;&nbsp;</a></span>sortAsc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key , typename Value &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto mcd::sortAsc </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; Key, Value &gt; &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>sort a map ascendently </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">map</td><td>The map to sort</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a sorted vector </dd></dl>

</div>
</div>
<a id="a45ad9c2ac4a373fdad27e51c1c741d76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45ad9c2ac4a373fdad27e51c1c741d76">&#9670;&nbsp;</a></span>sortDesc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Value &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto mcd::sortDesc </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; Key, Value &gt; &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sort a map descendently. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">map</td><td>The map to sort</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a sorted vector </dd></dl>

</div>
</div>
<a id="af3638871c13207c94b12eb5760dadf6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3638871c13207c94b12eb5760dadf6f">&#9670;&nbsp;</a></span>sortMapValuesAsc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::set&lt; std::pair&lt; T, U &gt;, std::function&lt; bool(std::pair&lt; T, U &gt;, std::pair&lt; T, U &gt;) &gt; &gt; mcd::sortMapValuesAsc </td>
          <td>(</td>
          <td class="paramtype">std::map&lt; T, U &gt;&#160;</td>
          <td class="paramname"><em>array</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5ed3b7735514675ef4f03b28d5b7b4a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ed3b7735514675ef4f03b28d5b7b4a3">&#9670;&nbsp;</a></span>sortMapValuesDesc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::set&lt; std::pair&lt; T, U &gt;, std::function&lt; bool(std::pair&lt; T, U &gt;, std::pair&lt; T, U &gt;) &gt; &gt; mcd::sortMapValuesDesc </td>
          <td>(</td>
          <td class="paramtype">std::map&lt; T, U &gt;&#160;</td>
          <td class="paramname"><em>array</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad1e8ca2394e07c20ed9c391a37a62322"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1e8ca2394e07c20ed9c391a37a62322">&#9670;&nbsp;</a></span>split() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; mcd::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>separator</em> = <code>'&#160;'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Explode a string in an array with the given caracter. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The string to cut </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">separator</td><td>The separator caracter to cut <em>in</em> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return an array with the differents parts of the cut string </dd></dl>

</div>
</div>
<a id="ad53f932fcd1da3c4e7eeca04def94f13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad53f932fcd1da3c4e7eeca04def94f13">&#9670;&nbsp;</a></span>split() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; mcd::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Explode a string in an array with the given string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The string to cut </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>The separator string to cut <em>in</em> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="a9a5719217b3760cbe64206000529fba8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a5719217b3760cbe64206000529fba8">&#9670;&nbsp;</a></span>split() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; mcd::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>cars</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Explode a string in an array with the given separators. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The string to cut </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cars</td><td>The separators string to cut <em>in</em> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="a31eb09e89b0015d54768c4510e59c780"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31eb09e89b0015d54768c4510e59c780">&#9670;&nbsp;</a></span>sq() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::sq </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the square of <em>a</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to use </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the square of <em>a</em> </dd></dl>

</div>
</div>
<a id="a9adc0354f681800c75d220e526377397"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9adc0354f681800c75d220e526377397">&#9670;&nbsp;</a></span>sq() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T mcd::sq </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the square of the given number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the square of <em>in</em> </dd></dl>

</div>
</div>
<a id="ae3a712e4de66375b1a188fa464c968e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3a712e4de66375b1a188fa464c968e2">&#9670;&nbsp;</a></span>sqrt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/dc4/a01125.php">Big</a> mcd::sqrt </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dc4/a01125.php">Big</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the squareroot of <em>a</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to use </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the squareroot of <em>a</em> </dd></dl>

</div>
</div>
<a id="a7b322c51a82629ed6b2325f2f938eae3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b322c51a82629ed6b2325f2f938eae3">&#9670;&nbsp;</a></span>tob()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::tob </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in boolean. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a size_t </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a7b322c51a82629ed6b2325f2f938eae3_cgraph.png" border="0" usemap="#ada/d53/a00265_a7b322c51a82629ed6b2325f2f938eae3_cgraph" alt=""/></div>
<map name="da/d53/a00265_a7b322c51a82629ed6b2325f2f938eae3_cgraph" id="da/d53/a00265_a7b322c51a82629ed6b2325f2f938eae3_cgraph">
<area shape="rect" title="Convert in variable in boolean." alt="" coords="5,5,79,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="127,5,200,32"/>
</map>
</div>

</div>
</div>
<a id="a66e560b6579bb202abdcee37283121a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66e560b6579bb202abdcee37283121a0">&#9670;&nbsp;</a></span>toBigVal()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::toBigVal </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a value from something to std::string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The value to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3c6193ba2e9669603892d2508cbc6668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c6193ba2e9669603892d2508cbc6668">&#9670;&nbsp;</a></span>tod()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double mcd::tod </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in double. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a double </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a3c6193ba2e9669603892d2508cbc6668_cgraph.png" border="0" usemap="#ada/d53/a00265_a3c6193ba2e9669603892d2508cbc6668_cgraph" alt=""/></div>
<map name="da/d53/a00265_a3c6193ba2e9669603892d2508cbc6668_cgraph" id="da/d53/a00265_a3c6193ba2e9669603892d2508cbc6668_cgraph">
<area shape="rect" title="Convert in variable in double." alt="" coords="5,5,79,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="127,5,200,32"/>
</map>
</div>

</div>
</div>
<a id="a6ed92c0cecb59861393802ac313a2b0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ed92c0cecb59861393802ac313a2b0f">&#9670;&nbsp;</a></span>tof()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float mcd::tof </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in float. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a float </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a6ed92c0cecb59861393802ac313a2b0f_cgraph.png" border="0" usemap="#ada/d53/a00265_a6ed92c0cecb59861393802ac313a2b0f_cgraph" alt=""/></div>
<map name="da/d53/a00265_a6ed92c0cecb59861393802ac313a2b0f_cgraph" id="da/d53/a00265_a6ed92c0cecb59861393802ac313a2b0f_cgraph">
<area shape="rect" title="Convert in variable in float." alt="" coords="5,5,76,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="124,5,197,32"/>
</map>
</div>

</div>
</div>
<a id="a476d57ae34f933a4192553496ec91208"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a476d57ae34f933a4192553496ec91208">&#9670;&nbsp;</a></span>toi()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int mcd::toi </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in int. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return an int </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a476d57ae34f933a4192553496ec91208_cgraph.png" border="0" usemap="#ada/d53/a00265_a476d57ae34f933a4192553496ec91208_cgraph" alt=""/></div>
<map name="da/d53/a00265_a476d57ae34f933a4192553496ec91208_cgraph" id="da/d53/a00265_a476d57ae34f933a4192553496ec91208_cgraph">
<area shape="rect" title="Convert in variable in int." alt="" coords="5,5,75,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="123,5,196,32"/>
</map>
</div>

</div>
</div>
<a id="a71458bb6c1d0939bd975cdf25e864599"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71458bb6c1d0939bd975cdf25e864599">&#9670;&nbsp;</a></span>tomilli()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::chrono::milliseconds mcd::tomilli </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in std::chrono::milliseconds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a std::chrono::milliseconds </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a71458bb6c1d0939bd975cdf25e864599_cgraph.png" border="0" usemap="#ada/d53/a00265_a71458bb6c1d0939bd975cdf25e864599_cgraph" alt=""/></div>
<map name="da/d53/a00265_a71458bb6c1d0939bd975cdf25e864599_cgraph" id="da/d53/a00265_a71458bb6c1d0939bd975cdf25e864599_cgraph">
<area shape="rect" title="Convert in variable in std::chrono::milliseconds." alt="" coords="5,5,95,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="143,5,216,32"/>
</map>
</div>

</div>
</div>
<a id="ae057a7c5042a3cacb444199a2b6b7598"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae057a7c5042a3cacb444199a2b6b7598">&#9670;&nbsp;</a></span>tos()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::tos </td>
          <td>(</td>
          <td class="paramtype">const Type &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> in a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a string </dd></dl>

</div>
</div>
<a id="adfea444e2cb8e428b7c9604d77076ad1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfea444e2cb8e428b7c9604d77076ad1">&#9670;&nbsp;</a></span>tosh()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">short mcd::tosh </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in short. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a size_t </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_adfea444e2cb8e428b7c9604d77076ad1_cgraph.png" border="0" usemap="#ada/d53/a00265_adfea444e2cb8e428b7c9604d77076ad1_cgraph" alt=""/></div>
<map name="da/d53/a00265_adfea444e2cb8e428b7c9604d77076ad1_cgraph" id="da/d53/a00265_adfea444e2cb8e428b7c9604d77076ad1_cgraph">
<area shape="rect" title="Convert in variable in short." alt="" coords="5,5,85,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="133,5,207,32"/>
</map>
</div>

</div>
</div>
<a id="a917e4be62e6930b138038ae16ebc7904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a917e4be62e6930b138038ae16ebc7904">&#9670;&nbsp;</a></span>tost()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::tost </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in size_t. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a size_t </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a917e4be62e6930b138038ae16ebc7904_cgraph.png" border="0" usemap="#ada/d53/a00265_a917e4be62e6930b138038ae16ebc7904_cgraph" alt=""/></div>
<map name="da/d53/a00265_a917e4be62e6930b138038ae16ebc7904_cgraph" id="da/d53/a00265_a917e4be62e6930b138038ae16ebc7904_cgraph">
<area shape="rect" title="Convert in variable in size_t." alt="" coords="5,5,83,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="131,5,204,32"/>
</map>
</div>

</div>
</div>
<a id="a818831d2e74dbfa3be2150c38a9afa31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a818831d2e74dbfa3be2150c38a9afa31">&#9670;&nbsp;</a></span>tou()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">unsigned int mcd::tou </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in unsigned int. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return an unsigned int </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a818831d2e74dbfa3be2150c38a9afa31_cgraph.png" border="0" usemap="#ada/d53/a00265_a818831d2e74dbfa3be2150c38a9afa31_cgraph" alt=""/></div>
<map name="da/d53/a00265_a818831d2e74dbfa3be2150c38a9afa31_cgraph" id="da/d53/a00265_a818831d2e74dbfa3be2150c38a9afa31_cgraph">
<area shape="rect" title="Convert in variable in unsigned int." alt="" coords="5,5,79,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="127,5,200,32"/>
</map>
</div>

</div>
</div>
<a id="a21f9e69f4ccff705b65007a1ac7063ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21f9e69f4ccff705b65007a1ac7063ef">&#9670;&nbsp;</a></span>tov()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">unsigned long long int mcd::tov </td>
          <td>(</td>
          <td class="paramtype">const V &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert <em>in</em> variable in unsigned long long int. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The variable to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return an unsigned long long int </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/d53/a00265_a21f9e69f4ccff705b65007a1ac7063ef_cgraph.png" border="0" usemap="#ada/d53/a00265_a21f9e69f4ccff705b65007a1ac7063ef_cgraph" alt=""/></div>
<map name="da/d53/a00265_a21f9e69f4ccff705b65007a1ac7063ef_cgraph" id="da/d53/a00265_a21f9e69f4ccff705b65007a1ac7063ef_cgraph">
<area shape="rect" title="Convert in variable in unsigned long long int." alt="" coords="5,5,79,32"/>
<area shape="rect" href="../../da/d53/a00265.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="127,5,200,32"/>
</map>
</div>

</div>
</div>
<a id="aa17a2314efb86933584ae451318a17da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa17a2314efb86933584ae451318a17da">&#9670;&nbsp;</a></span>treeAscSorter()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898">TREE_DIRECTION</a> mcd::treeAscSorter </td>
          <td>(</td>
          <td class="paramtype">std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt;&#160;</td>
          <td class="paramname"><em>datas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt;&#160;</td>
          <td class="paramname"><em>nodeDatas</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to sort a tree ascendently depending on weights. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">datas</td><td>The datas to compare to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nodeDatas</td><td>The datas of the node to compare to <em>datas</em> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return -1/0/1 to say which node to go </dd></dl>

</div>
</div>
<a id="a1865ef6e7eed9ac5fa5b177b3f8dd1e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1865ef6e7eed9ac5fa5b177b3f8dd1e9">&#9670;&nbsp;</a></span>treeDescSorter()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d53/a00265.php#ae3ee27656d8eb6e8a09407841cd00898">TREE_DIRECTION</a> mcd::treeDescSorter </td>
          <td>(</td>
          <td class="paramtype">std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt;&#160;</td>
          <td class="paramname"><em>datas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; T, <a class="el" href="../../da/d53/a00265.php#a0d3d39a7992ee9e893a83ab18066f79d">NodeWeight</a> &gt;&#160;</td>
          <td class="paramname"><em>nodeDatas</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function to sort a tree descendently depending on weights. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">datas</td><td>The datas to compare to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nodeDatas</td><td>The datas of the node to compare to <em>datas</em> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return -1/0/1 to say which node to go </dd></dl>

</div>
</div>
<a id="aa97708c3c4ad49b7e60d30c66bfad80a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa97708c3c4ad49b7e60d30c66bfad80a">&#9670;&nbsp;</a></span>trim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::trim </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delete all the too-much spaces in the given string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">in</td><td>The string to treat</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="a39b79dedb67710e8708dfec2985c6406"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39b79dedb67710e8708dfec2985c6406">&#9670;&nbsp;</a></span>uppercase() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::uppercase </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the given string to uppercase. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string to treat</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the changed string </dd></dl>

</div>
</div>
<a id="a334e09619932c4b2c193abe4fc9c3306"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a334e09619932c4b2c193abe4fc9c3306">&#9670;&nbsp;</a></span>uppercase() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string mcd::uppercase </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string::iterator&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string::iterator&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the given interval to uppercase. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string to treat </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">begin</td><td>The begininng of the transformation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>The end of the transformation</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the changed string </dd></dl>

</div>
</div>
<a id="aa9364f91b9303a9a63793512ad3f18e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9364f91b9303a9a63793512ad3f18e4">&#9670;&nbsp;</a></span>vector2DPrint()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::vector2DPrint </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; T &gt; &gt;&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>autosize</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em> = <code>std::cout</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aac3317dd3d37f382f940ee207bd4dd8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac3317dd3d37f382f940ee207bd4dd8e">&#9670;&nbsp;</a></span>vector2DPrintInverted()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::vector2DPrintInverted </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; T &gt; &gt;&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>autosize</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em> = <code>std::cout</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>shift</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac625de83fcace96567aecd1363297776"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac625de83fcace96567aecd1363297776">&#9670;&nbsp;</a></span>warning_log()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class... Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void mcd::warning_log </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the given text like a warning. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line</td><td>The line number where the function is call (use line_number)</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in</td><td>The type of the warning</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>The differents things to print <pre class="fragment">    \return         void
</pre> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af9443ebf71fe196006831fe344a09f13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9443ebf71fe196006831fe344a09f13">&#9670;&nbsp;</a></span>wholePart()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename V &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">V mcd::wholePart </td>
          <td>(</td>
          <td class="paramtype">V&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the whole part of the given number. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The value to compute</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the whole part of <em>a</em> </dd></dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a50b5129023a76b3bdb0bd01ee9e8b72e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50b5129023a76b3bdb0bd01ee9e8b72e">&#9670;&nbsp;</a></span>arguments</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d1c/a01093.php">Arguments</a> mcd::arguments</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A global arguments variable to save and keep some arguments. </p>

</div>
</div>
<a id="aa06f3027ef1a56c8cb526a47c6350905"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa06f3027ef1a56c8cb526a47c6350905">&#9670;&nbsp;</a></span>assertion</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d8b/a01117.php">Assert</a> mcd::assertion</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8855b382bd52d4baffe3633dbe8fa3ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8855b382bd52d4baffe3633dbe8fa3ed">&#9670;&nbsp;</a></span>cesar</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/d0b/a01253.php">Cesar</a> mcd::cesar</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A global cesar variable to crypt and decrypt messages. </p>

</div>
</div>
<a id="ad49187ab386f309e965f2f8e954c3c24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad49187ab386f309e965f2f8e954c3c24">&#9670;&nbsp;</a></span>cout</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/da1/a01233.php">ThreadCout</a> mcd::cout</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The thread safe version of std::cout. </p>

</div>
</div>
<a id="a19aa3c3882eb7a0c0d4f6479a4bbf975"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19aa3c3882eb7a0c0d4f6479a4bbf975">&#9670;&nbsp;</a></span>endl</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../db/d1c/a01229.php">ThreadEndlCout</a> mcd::endl</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The thread safe version of std::endl. </p>

</div>
</div>
<a id="a46f063faccea2fdafb8e5f33c2ccbc50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46f063faccea2fdafb8e5f33c2ccbc50">&#9670;&nbsp;</a></span>logger</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/db8/a01317.php">Logger</a> mcd::logger</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a302b261a28cb48198b26b85ab682bfab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a302b261a28cb48198b26b85ab682bfab">&#9670;&nbsp;</a></span>mycrypt</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d34/a01261.php">MyCrypt</a> mcd::mycrypt</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A global <a class="el" href="../../de/d34/a01261.php" title="A class to test a homemade algorithm for encryption.">MyCrypt</a> variable to crypt messages. </p>

</div>
</div>
<a id="a8860bcba5ad1fad5c14e9f8a69b8bc51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8860bcba5ad1fad5c14e9f8a69b8bc51">&#9670;&nbsp;</a></span>reader</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ifstream mcd::reader</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Define a global file reader. </p>

</div>
</div>
<a id="a08ac826a0e7f64dc1b04036ecec50ed1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08ac826a0e7f64dc1b04036ecec50ed1">&#9670;&nbsp;</a></span>rng</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Rng mcd::rng</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A global rng variable to compute random integers. </p>
<p>rng(<b>int</b>, <b>int</b>) </p>

</div>
</div>
<a id="ad309496206415242e21a12fc54df1cc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad309496206415242e21a12fc54df1cc8">&#9670;&nbsp;</a></span>setprecision</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dc/dab/a01237.php">SetPrecision</a> mcd::setprecision</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa0ce198f34851e093bbc38dfd975e339"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0ce198f34851e093bbc38dfd975e339">&#9670;&nbsp;</a></span>sha2</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/de7/a01257.php">SHA2</a> mcd::sha2</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A global sha2 variable to crypt messages. </p>

</div>
</div>
<a id="a9826cf077a919365508fb2a7d7aae4c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9826cf077a919365508fb2a7d7aae4c2">&#9670;&nbsp;</a></span>writer</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ofstream mcd::writer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">extern</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Define a global file writer. </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.11-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
	<ul>
		<li class="navelem"><a class="el" href="../../da/d53/a00265.php">mcd</a></li>
		<li class="footer">
			<?php
				echo $text;
			?>
		</li>
	</ul>
</div>
</body>
</html>
