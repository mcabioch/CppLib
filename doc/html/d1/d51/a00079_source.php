<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
		<meta http-equiv="X-UA-Compatible" content="IE=9"/>
		<meta name="generator" content="Doxygen 1.8.11"/>
		<title>C++: check.hpp Source File</title>
		<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
		<script type="text/javascript" src="../../jquery.js"></script>
		<script type="text/javascript" src="../../dynsections.js"></script>
		<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
		<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
		<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
		<link href="../../doxystyle.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
			<div id="titlearea">
				<table cellspacing="0" cellpadding="0">
					<tbody>
						<tr style="height: 56px;">
							<td id="projectalign" style="padding-left: 0.5em;">
								<div id="projectname">C++
									&#160;<span id="projectnumber">2.0</span>
								</div>
								<div id="projectbrief">My own C++ features</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<?php
				$text = "Generated on Wed Aug 8 2018 09:57:28 for C++ by";
				$text = substr($text, 0, sizeof($text) - 4);
				$tmp = substr($text, 17);
				$tmp = substr($tmp, 0, strpos($tmp, " for"));
				$lastModif = date("l jS \of F Y \a\\t H:i:s", strtotime($tmp));
			?>
		<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.php"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.php"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.php"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d1/d51/a00079_source.php','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">check.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d1/d51/a00079.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef HEADER_CPP_CHECK</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define HEADER_CPP_CHECK</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d2/db1/a00070.php">C++/arraysIncludes.hpp</a>&quot;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d8/d53/a00081.php">C++/collides.hpp</a>&quot;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d1/d51/a00079.php#a6e31df50d598dd75723d5931c4c3b8ac">   18</a></span>&#160;<span class="keyword">using</span> <a class="code" href="../../d1/d51/a00079.php#a6e31df50d598dd75723d5931c4c3b8ac">pair_str</a> = std::pair&lt;std::string, std::string&gt;;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../df/dc8/a00122.php">   20</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="../../df/dc8/a00122.php">Check</a> {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d3/dfe/a00025.php">   23</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d3/dfe/a00025.php">is_array</a>{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">   25</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    };</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d3/dfe/a00025.php">is_array</a>&lt;<a class="code" href="../../de/d36/a00123.php">std</a>::vector&lt;T&gt;&gt;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        };</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d3/dfe/a00025.php">is_array</a>&lt;std::map&lt;T, U&gt;&gt;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, std::<span class="keywordtype">size_t</span> U&gt;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d3/dfe/a00025.php">is_array</a>&lt;std::array&lt;T, U&gt;&gt;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        };</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="../../de/d8c/a00036.php">   50</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../de/d8c/a00036.php">is_vector</a>{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../de/d8c/a00036.php#a2657827453cbed9d45cbfb9dd003e445">   52</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">class </span><a class="code" href="../../de/d8c/a00036.php">is_vector</a>&lt;std::vector&lt;T&gt;&gt;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d5/d16/a00029.php">   65</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d5/d16/a00029.php">is_pair</a>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="../../d5/d16/a00029.php#a00ab6e22ccc55b2e97ddbe74116cbc17">   67</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d5/d16/a00029.php">is_pair</a>&lt;std::pair&lt;T, U&gt;&gt;{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        };</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../d4/d8c/a00035.php">   80</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d4/d8c/a00035.php">is_trio</a>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d4/d8c/a00035.php#abfa170a04528a76d28eee3cf8685947c">   82</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    };</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d4/d8c/a00035.php">is_trio</a>&lt;<a class="code" href="../../dc/dee/a00053.php#d1/d88/a00128">trio</a>&lt;T, U, V&gt;&gt;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        };</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../df/d61/a00031.php">   95</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../df/d61/a00031.php">is_quatuor</a>{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="../../df/d61/a00031.php#aa54da56f015a33eefb3ae3bba2b46ce2">   97</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    };</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V, <span class="keyword">typename</span> W&gt;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">class </span><a class="code" href="../../df/d61/a00031.php">is_quatuor</a>&lt;<a class="code" href="../../dc/dee/a00053.php#df/dcd/a00127">quatuor</a>&lt;T, U, V, W&gt;&gt;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="../../db/df3/a00034.php">  110</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/df3/a00034.php">is_string</a>{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../db/df3/a00034.php#a460d8da130a621d8158d8af28ae191a3">  112</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    };</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">class </span><a class="code" href="../../db/df3/a00034.php">is_string</a>&lt;std::string&gt;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        };</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../d0/d33/a00027.php">  125</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d0/d33/a00027.php">is_minded_ptr</a>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="../../d0/d33/a00027.php#a4ee5b91e22a920bc50bd61aba9c65dd2">  127</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    };</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d0/d33/a00027.php">is_minded_ptr</a>&lt;std::shared_ptr&lt;T&gt;&gt;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        };</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d0/d33/a00027.php">is_minded_ptr</a>&lt;std::unique_ptr&lt;T&gt;&gt;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        };</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d0/d33/a00027.php">is_minded_ptr</a>&lt;std::weak_ptr&lt;T&gt;&gt;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        };</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../dc/d87/a00032.php">  150</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../dc/d87/a00032.php">is_smatch</a>{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="../../dc/d87/a00032.php#a2e85acc4223a78728c64d1068e207cf1">  152</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    };</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">class </span><a class="code" href="../../dc/d87/a00032.php">is_smatch</a>&lt;std::smatch&gt;{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        };</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="../../d6/d5b/a00026.php">  165</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d6/d5b/a00026.php">is_duration</a> {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="../../d6/d5b/a00026.php#a778b90d3a6731788f7e976c408317883">  167</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    };</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">class</span> Rep, <span class="keyword">class</span> Period&gt;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d6/d5b/a00026.php">is_duration</a>&lt;std::chrono::duration&lt;Rep, Period&gt;&gt; {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        };</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="../../d1/d51/a00079.php#a92713af8c651ed158031ed7d3fd15977">  179</a></span>&#160;<span class="preprocessor">    #define has_method(meth, func)\</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">    template&lt;typename T&gt;\</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">    class func {\</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">        private:\</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">            typedef std::true_type yes;\</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">            typedef std::false_type no;\</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">\</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">            template&lt;typename U&gt;\</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">            static auto test(int) -&gt; decltype(std::declval&lt;U&gt;().meth() == 1, yes());\</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">            template&lt;typename&gt;\</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">            static no test(...);\</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">\</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor">        public:\</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">            static constexpr bool value = std::is_same&lt;decltype(test&lt;T&gt;(0)), yes&gt;::value;\</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="../../d7/de0/a00022.php#a4f00f35b69f6a9aeada40a1c1e4f6b4b">  196</a></span>&#160;    <a class="code" href="../../d1/d51/a00079.php#a92713af8c651ed158031ed7d3fd15977">has_method</a>(size, <a class="code" href="../../d7/de0/a00022.php">has_size_method</a>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="../../de/d11/a00021.php">  200</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../de/d11/a00021.php">has_ostream_operator</a> {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keyword">typedef</span> std::true_type yes;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keyword">typedef</span> std::false_type no;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keyword">static</span> std::ostream&amp; s;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> TT, <span class="keyword">typename</span> SS&gt;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keyword">static</span> <span class="keyword">auto</span> test(SS&amp;&amp; s, TT&amp;&amp; t) -&gt; decltype(s &lt;&lt; t);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            </div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keyword">struct </span>dummy_t {};</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keyword">static</span> dummy_t test(...);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keyword">using</span> return_type = decltype(test(s, std::declval&lt;T&gt;()));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="../../de/d11/a00021.php#a61b4d4c0f029d5a9ff4b458f880fa6fe">  215</a></span>&#160;            <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = !std::is_same&lt;return_type, dummy_t&gt;::value;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    };</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="../../db/db2/a00020.php">  220</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/db2/a00020.php">has_istream_operator</a> {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keyword">typedef</span> std::true_type yes;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keyword">typedef</span> std::false_type no;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keyword">static</span> std::istream&amp; s;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> TT, <span class="keyword">typename</span> SS&gt;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keyword">static</span> <span class="keyword">auto</span> test(SS&amp;&amp; s, TT&amp;&amp; t) -&gt; decltype(s &gt;&gt; t);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            </div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keyword">struct </span>dummy_t {};</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keyword">static</span> dummy_t test(...);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keyword">using</span> return_type = decltype(test(s, std::declval&lt;T&gt;()));</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../db/db2/a00020.php#a7a75569e3b0228de2cbc863e42507cd1">  235</a></span>&#160;            <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = !std::is_same&lt;return_type, dummy_t&gt;::value;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    };</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="../../d5/d79/a00030.php">  240</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d5/d79/a00030.php">is_printable</a>{</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../d5/d79/a00030.php#a1d9915b9ea29cc7af342c20ea1b9543e">  242</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <a class="code" href="../../de/d11/a00021.php">has_ostream_operator&lt;T&gt;::value</a>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    };</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keyword">class </span><a class="code" href="../../d5/d79/a00030.php">is_printable</a>&lt;std::string&gt;{</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        };</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="../../df/dc8/a00122.php#a893d4905a425f29f77a845a19f4ee841">  255</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../df/dc8/a00122.php#a893d4905a425f29f77a845a19f4ee841">printable</a>(<span class="keyword">const</span> T&amp;){</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        std::string type = __PRETTY_FUNCTION__;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keyword">auto</span> pos = type.find(<span class="stringliteral">&quot; = &quot;</span>);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">if</span>(pos != std::string::npos){</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            type.erase(0, pos+3);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        pos = type.find(<span class="stringliteral">&quot;]&quot;</span>);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">if</span>(pos != std::string::npos){</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            type.erase(type.begin()+pos, type.end());</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; replaces;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        replaces.push_back({<span class="stringliteral">&quot;&gt; &gt;&quot;</span>, <span class="stringliteral">&quot;&gt;&gt;&quot;</span>});</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        replaces.push_back({<span class="stringliteral">&quot;std::__cxx11::basic_string&lt;char&gt;&quot;</span>, <span class="stringliteral">&quot;std::string&quot;</span>});</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; r : replaces){</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">do</span> {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                pos = type.find(r.first);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <span class="keywordflow">if</span>(pos != std::string::npos){</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    type.replace(pos, r.first.size(), r.second);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            } <span class="keywordflow">while</span>(pos != std::string::npos);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Is &quot;</span> &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot; printable ? &quot;</span> &lt;&lt; std::boolalpha &lt;&lt; Check::has_ostream_operator&lt;T&gt;::value &lt;&lt; std::endl;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="../../dc/d3c/a00028.php">  287</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../dc/d3c/a00028.php">is_object</a> {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="../../dc/d3c/a00028.php#abb965d77a8a3e586d37be96b9c3e6b27">  289</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = !<a class="code" href="../../d3/dfe/a00025.php">is_array&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                      !<a class="code" href="../../db/df3/a00034.php">is_string&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                      !<a class="code" href="../../dc/d87/a00032.php">is_smatch&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                      !std::is_fundamental&lt;T&gt;::value;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    };</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="../../d0/dc0/a00033.php">  297</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d0/dc0/a00033.php">is_special_struct</a> {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="../../d0/dc0/a00033.php#a0fc70ab6ce5716785aed788c4065b69e">  299</a></span>&#160;            <span class="keyword">const</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">value</a> = <a class="code" href="../../d5/d16/a00029.php">is_pair&lt;T&gt;::value</a> ||</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                      <a class="code" href="../../d4/d8c/a00035.php">is_trio&lt;T&gt;::value</a> ||</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                      <a class="code" href="../../df/d61/a00031.php">is_quatuor&lt;T&gt;::value</a>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    };</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">    #ifndef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        </div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">    #endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#endif //HEADER_CPP_CHECK)</span></div><div class="ttc" id="a00036_php"><div class="ttname"><a href="../../de/d8c/a00036.php">Check::is_vector</a></div><div class="ttdoc">A template class to test if T is a vector. </div><div class="ttdef"><b>Definition:</b> check.hpp:50</div></div>
<div class="ttc" id="a00079_php_a92713af8c651ed158031ed7d3fd15977"><div class="ttname"><a href="../../d1/d51/a00079.php#a92713af8c651ed158031ed7d3fd15977">has_method</a></div><div class="ttdeci">#define has_method(meth, func)</div><div class="ttdoc">Verify if an object has the given method. </div><div class="ttdef"><b>Definition:</b> check.hpp:179</div></div>
<div class="ttc" id="a00021_php"><div class="ttname"><a href="../../de/d11/a00021.php">Check::has_ostream_operator</a></div><div class="ttdoc">A template class to test if T has an ostream operator. </div><div class="ttdef"><b>Definition:</b> check.hpp:200</div></div>
<div class="ttc" id="a00034_php"><div class="ttname"><a href="../../db/df3/a00034.php">Check::is_string</a></div><div class="ttdoc">A template class to test if T is a std::string. </div><div class="ttdef"><b>Definition:</b> check.hpp:110</div></div>
<div class="ttc" id="a00028_php"><div class="ttname"><a href="../../dc/d3c/a00028.php">Check::is_object</a></div><div class="ttdoc">A template class to test if T is an unknown object. </div><div class="ttdef"><b>Definition:</b> check.hpp:287</div></div>
<div class="ttc" id="a00122_php"><div class="ttname"><a href="../../df/dc8/a00122.php">Check</a></div><div class="ttdef"><b>Definition:</b> check.hpp:20</div></div>
<div class="ttc" id="a00026_php"><div class="ttname"><a href="../../d6/d5b/a00026.php">Check::is_duration</a></div><div class="ttdoc">A template class to test if T is a chrono::duration. </div><div class="ttdef"><b>Definition:</b> check.hpp:165</div></div>
<div class="ttc" id="a00123_php"><div class="ttname"><a href="../../de/d36/a00123.php">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="a00032_php"><div class="ttname"><a href="../../dc/d87/a00032.php">Check::is_smatch</a></div><div class="ttdoc">A template class to test if T is a string regex match. </div><div class="ttdef"><b>Definition:</b> check.hpp:150</div></div>
<div class="ttc" id="a00035_php"><div class="ttname"><a href="../../d4/d8c/a00035.php">Check::is_trio</a></div><div class="ttdoc">A template class to test if T is a std::pair. </div><div class="ttdef"><b>Definition:</b> check.hpp:80</div></div>
<div class="ttc" id="a00029_php"><div class="ttname"><a href="../../d5/d16/a00029.php">Check::is_pair</a></div><div class="ttdoc">A template class to test if T is a std::pair. </div><div class="ttdef"><b>Definition:</b> check.hpp:65</div></div>
<div class="ttc" id="a00030_php"><div class="ttname"><a href="../../d5/d79/a00030.php">Check::is_printable</a></div><div class="ttdoc">A template class to test if T is printable. </div><div class="ttdef"><b>Definition:</b> check.hpp:240</div></div>
<div class="ttc" id="a00079_php_a6e31df50d598dd75723d5931c4c3b8ac"><div class="ttname"><a href="../../d1/d51/a00079.php#a6e31df50d598dd75723d5931c4c3b8ac">pair_str</a></div><div class="ttdeci">std::pair&lt; std::string, std::string &gt; pair_str</div><div class="ttdef"><b>Definition:</b> check.hpp:18</div></div>
<div class="ttc" id="a00033_php"><div class="ttname"><a href="../../d0/dc0/a00033.php">Check::is_special_struct</a></div><div class="ttdoc">A template class to test if T is a special struct. </div><div class="ttdef"><b>Definition:</b> check.hpp:297</div></div>
<div class="ttc" id="a00027_php"><div class="ttname"><a href="../../d0/d33/a00027.php">Check::is_minded_ptr</a></div><div class="ttdoc">A template class to test if T is a std::shared_ptr, a std::unique_ptr or a std::weak_ptr. </div><div class="ttdef"><b>Definition:</b> check.hpp:125</div></div>
<div class="ttc" id="a00022_php"><div class="ttname"><a href="../../d7/de0/a00022.php">Check::has_size_method</a></div><div class="ttdoc">Verify if an object has a size method. </div><div class="ttdef"><b>Definition:</b> check.hpp:196</div></div>
<div class="ttc" id="a00070_php"><div class="ttname"><a href="../../d2/db1/a00070.php">arraysIncludes.hpp</a></div></div>
<div class="ttc" id="a00025_php"><div class="ttname"><a href="../../d3/dfe/a00025.php">Check::is_array</a></div><div class="ttdoc">A template class to test if T is an array, a vector or a map. </div><div class="ttdef"><b>Definition:</b> check.hpp:23</div></div>
<div class="ttc" id="a00020_php"><div class="ttname"><a href="../../db/db2/a00020.php">Check::has_istream_operator</a></div><div class="ttdoc">A template class to test if T has an istream operator. </div><div class="ttdef"><b>Definition:</b> check.hpp:220</div></div>
<div class="ttc" id="a00053_php_df/dcd/a00127"><div class="ttname"><a href="../../dc/dee/a00053.php#df/dcd/a00127">quatuor</a></div><div class="ttdoc">A container for four values. </div><div class="ttdef"><b>Definition:</b> types.hpp:61</div></div>
<div class="ttc" id="a00081_php"><div class="ttname"><a href="../../d8/d53/a00081.php">collides.hpp</a></div></div>
<div class="ttc" id="a00025_php_a7f779090dfe6da3fb842f8dabda2b043"><div class="ttname"><a href="../../d3/dfe/a00025.php#a7f779090dfe6da3fb842f8dabda2b043">Check::is_array::value</a></div><div class="ttdeci">static const bool value</div><div class="ttdef"><b>Definition:</b> check.hpp:25</div></div>
<div class="ttc" id="a00031_php"><div class="ttname"><a href="../../df/d61/a00031.php">Check::is_quatuor</a></div><div class="ttdoc">A template class to test if T is a std::pair. </div><div class="ttdef"><b>Definition:</b> check.hpp:95</div></div>
<div class="ttc" id="a00122_php_a893d4905a425f29f77a845a19f4ee841"><div class="ttname"><a href="../../df/dc8/a00122.php#a893d4905a425f29f77a845a19f4ee841">Check::printable</a></div><div class="ttdeci">void printable(const T &amp;)</div><div class="ttdoc">A function that say if a type has an ostream operator(&lt;&lt;) </div><div class="ttdef"><b>Definition:</b> check.hpp:255</div></div>
<div class="ttc" id="a00053_php_d1/d88/a00128"><div class="ttname"><a href="../../dc/dee/a00053.php#d1/d88/a00128">trio</a></div><div class="ttdoc">A container for three values. </div><div class="ttdef"><b>Definition:</b> types.hpp:20</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.11-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
	<ul>
		<li class="navelem"><a class="el" href="../../dir_badfd550b617ce52cc73ed1c8c9513f6.php">Algo</a></li><li class="navelem"><a class="el" href="../../dir_1788504ec76a4dda5464562bc560d0b5.php">C++Tests</a></li><li class="navelem"><a class="el" href="../../dir_2e741febc7df97747a68d36c1b3be5f0.php">C++</a></li><li class="navelem"><a class="el" href="../../dir_220287e732b97f08f66e5f221c69df74.php">inc</a></li><li class="navelem"><a class="el" href="../../dir_75b0389167f46f79a101ef8c4434cec4.php">C++</a></li><li class="navelem"><a class="el" href="../../d1/d51/a00079.php">check.hpp</a></li>
		<li class="footer">
			<?php
				echo $text;
			?>
		</li>
	</ul>
</div>
</body>
</html>
