<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
		<meta http-equiv="X-UA-Compatible" content="IE=9"/>
		<meta name="generator" content="Doxygen 1.8.20"/>
		<title>C++: mcd::Tests::Test Class Reference</title>
		<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
		<script type="text/javascript" src="../../jquery.js"></script>
		<script type="text/javascript" src="../../dynsections.js"></script>
		<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
		<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
		<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
		<link href="../../doxystyle.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
			<div id="titlearea">
				<table cellspacing="0" cellpadding="0">
					<tbody>
						<tr style="height: 56px;">
							<td id="projectalign" style="padding-left: 0.5em;">
								<div id="projectname">C++
									&#160;<span id="projectnumber">1.6.1.1</span>
								</div>
								<div id="projectbrief">My own C++ features</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<?php
				$text = "Generated on Fri Nov 13 2020 11:03:54 for C++ by";
				$text = substr($text, 0, sizeof($text) - 4);
				$tmp = substr($text, 17);
				$tmp = substr($tmp, 0, strpos($tmp, " for"));
				$lastModif = date("l jS \of F Y \a\\t H:i:s", strtotime($tmp));
			?>
		<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d0/d05/a01420.php','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../de/daf/a01417.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">mcd::Tests::Test Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A static class to test code.  
 <a href="../../d0/d05/a01420.php#details">More...</a></p>

<p><code>#include &lt;Test.hpp&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:acfe8416a1f76010757bda8e2c68412ae"><td class="memItemLeft" align="right" valign="top">static size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#acfe8416a1f76010757bda8e2c68412ae">nb</a> ()</td></tr>
<tr class="memdesc:acfe8416a1f76010757bda8e2c68412ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of tests executed after a call to run \error Abort the program if it's call before run.  <a href="../../d0/d05/a01420.php#acfe8416a1f76010757bda8e2c68412ae">More...</a><br /></td></tr>
<tr class="separator:acfe8416a1f76010757bda8e2c68412ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2460015b885027e9c03ee911b1466f67"><td class="memItemLeft" align="right" valign="top">static size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#a2460015b885027e9c03ee911b1466f67">success</a> ()</td></tr>
<tr class="memdesc:a2460015b885027e9c03ee911b1466f67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of success after a call to run \error Abort the program if it's call before run.  <a href="../../d0/d05/a01420.php#a2460015b885027e9c03ee911b1466f67">More...</a><br /></td></tr>
<tr class="separator:a2460015b885027e9c03ee911b1466f67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eca6a0ca43bb94945dd97f9d43f8042"><td class="memItemLeft" align="right" valign="top">static size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#a8eca6a0ca43bb94945dd97f9d43f8042">failures</a> ()</td></tr>
<tr class="memdesc:a8eca6a0ca43bb94945dd97f9d43f8042"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of fails after a call to run \error Abort the program if it's call before run.  <a href="../../d0/d05/a01420.php#a8eca6a0ca43bb94945dd97f9d43f8042">More...</a><br /></td></tr>
<tr class="separator:a8eca6a0ca43bb94945dd97f9d43f8042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad42ea83a5e78bd14d0d2af06716dabd3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#ad42ea83a5e78bd14d0d2af06716dabd3">addSuite</a> (const std::string &amp;name, std::function&lt; void() &gt; func)</td></tr>
<tr class="memdesc:ad42ea83a5e78bd14d0d2af06716dabd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a function (without arguments and returning void) that contains a group of tests, could be a lambda.  <a href="../../d0/d05/a01420.php#ad42ea83a5e78bd14d0d2af06716dabd3">More...</a><br /></td></tr>
<tr class="separator:ad42ea83a5e78bd14d0d2af06716dabd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0540f76b1d762f87f48b1333c499d96"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#ad0540f76b1d762f87f48b1333c499d96">run</a> (const std::string &amp;key=&quot;&quot;)</td></tr>
<tr class="memdesc:ad0540f76b1d762f87f48b1333c499d96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run all or a group of tests.  <a href="../../d0/d05/a01420.php#ad0540f76b1d762f87f48b1333c499d96">More...</a><br /></td></tr>
<tr class="separator:ad0540f76b1d762f87f48b1333c499d96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9e5ce30e83438c731c0b32558087e7e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#ad9e5ce30e83438c731c0b32558087e7e">addTest</a> (const Test_struct &amp;test)</td></tr>
<tr class="memdesc:ad9e5ce30e83438c731c0b32558087e7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a test analyze to an array.  <a href="../../d0/d05/a01420.php#ad9e5ce30e83438c731c0b32558087e7e">More...</a><br /></td></tr>
<tr class="separator:ad9e5ce30e83438c731c0b32558087e7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd689a9285398f98dcf09722ca676070"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#abd689a9285398f98dcf09722ca676070">addThrow</a> (const std::string &amp;instr, const std::string &amp;except, const Test_struct &amp;test)</td></tr>
<tr class="memdesc:abd689a9285398f98dcf09722ca676070"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a throw test with addTest.  <a href="../../d0/d05/a01420.php#abd689a9285398f98dcf09722ca676070">More...</a><br /></td></tr>
<tr class="separator:abd689a9285398f98dcf09722ca676070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1361402d9c24abe3aa4e44cce65de4b5"><td class="memTemplParams" colspan="2">template&lt;class T , class U &gt; </td></tr>
<tr class="memitem:a1361402d9c24abe3aa4e44cce65de4b5"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#a1361402d9c24abe3aa4e44cce65de4b5">in</a> (const T &amp;value, const U &amp;array, const Test_struct &amp;test, bool start=false)</td></tr>
<tr class="memdesc:a1361402d9c24abe3aa4e44cce65de4b5"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../d0/d05/a01420.php" title="A static class to test code.">Test</a> if a value is or isn't in an array.  <a href="../../d0/d05/a01420.php#a1361402d9c24abe3aa4e44cce65de4b5">More...</a><br /></td></tr>
<tr class="separator:a1361402d9c24abe3aa4e44cce65de4b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7602fba793072f87e41fb0df3884ce24"><td class="memTemplParams" colspan="2">template&lt;class T , class U &gt; </td></tr>
<tr class="memitem:a7602fba793072f87e41fb0df3884ce24"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#a7602fba793072f87e41fb0df3884ce24">instance</a> (const U &amp;, const std::string &amp;strObj, const Test_struct &amp;test, bool cmp=true)</td></tr>
<tr class="memdesc:a7602fba793072f87e41fb0df3884ce24"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../d0/d05/a01420.php" title="A static class to test code.">Test</a> if class U is an instance of T or is a child instance of T.  <a href="../../d0/d05/a01420.php#a7602fba793072f87e41fb0df3884ce24">More...</a><br /></td></tr>
<tr class="separator:a7602fba793072f87e41fb0df3884ce24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6b9760deebd8280c822a0d7b6541b13"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d05/a01420.php#ac6b9760deebd8280c822a0d7b6541b13">print</a> (std::ostream &amp;os, size_t format=0b00000010|0b00000100|0b00001000)</td></tr>
<tr class="memdesc:ac6b9760deebd8280c822a0d7b6541b13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the results of the tests.  <a href="../../d0/d05/a01420.php#ac6b9760deebd8280c822a0d7b6541b13">More...</a><br /></td></tr>
<tr class="separator:ac6b9760deebd8280c822a0d7b6541b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A static class to test code. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ad42ea83a5e78bd14d0d2af06716dabd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad42ea83a5e78bd14d0d2af06716dabd3">&#9670;&nbsp;</a></span>addSuite()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::addSuite </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; void() &gt;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a function (without arguments and returning void) that contains a group of tests, could be a lambda. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>A name to group the tests and to call in run</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">func</td><td>The function containing the group of tests </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="ad9e5ce30e83438c731c0b32558087e7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9e5ce30e83438c731c0b32558087e7e">&#9670;&nbsp;</a></span>addTest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::addTest </td>
          <td>(</td>
          <td class="paramtype">const Test_struct &amp;&#160;</td>
          <td class="paramname"><em>test</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a test analyze to an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">test</td><td>The test to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="abd689a9285398f98dcf09722ca676070"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd689a9285398f98dcf09722ca676070">&#9670;&nbsp;</a></span>addThrow()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::addThrow </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>instr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>except</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Test_struct &amp;&#160;</td>
          <td class="paramname"><em>test</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a throw test with addTest. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">instr</td><td>The tested code </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">except</td><td>The expected exception </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">test</td><td>The test's analyze </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../d0/d05/a01420_abd689a9285398f98dcf09722ca676070_cgraph.png" border="0" usemap="#ad0/d05/a01420_abd689a9285398f98dcf09722ca676070_cgraph" alt=""/></div>
<map name="d0/d05/a01420_abd689a9285398f98dcf09722ca676070_cgraph" id="d0/d05/a01420_abd689a9285398f98dcf09722ca676070_cgraph">
<area shape="rect" title="Add a throw test with addTest." alt="" coords="5,5,191,32"/>
<area shape="rect" href="../../d0/d05/a01420.php#ad9e5ce30e83438c731c0b32558087e7e" title="Add a test analyze to an array." alt="" coords="239,5,413,32"/>
</map>
</div>

</div>
</div>
<a id="a8eca6a0ca43bb94945dd97f9d43f8042"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8eca6a0ca43bb94945dd97f9d43f8042">&#9670;&nbsp;</a></span>failures()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static size_t mcd::Tests::Test::failures </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of fails after a call to run \error Abort the program if it's call before run. </p>
<dl class="section return"><dt>Returns</dt><dd>size_t </dd></dl>

</div>
</div>
<a id="a1361402d9c24abe3aa4e44cce65de4b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1361402d9c24abe3aa4e44cce65de4b5">&#9670;&nbsp;</a></span>in()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::in </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const U &amp;&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Test_struct &amp;&#160;</td>
          <td class="paramname"><em>test</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>start</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="../../d0/d05/a01420.php" title="A static class to test code.">Test</a> if a value is or isn't in an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>The value to find </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">array</td><td>The array where to search </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">test</td><td>Some test analyze datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>Set if in test the presence or absence of value </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../d0/d05/a01420_a1361402d9c24abe3aa4e44cce65de4b5_cgraph.png" border="0" usemap="#ad0/d05/a01420_a1361402d9c24abe3aa4e44cce65de4b5_cgraph" alt=""/></div>
<map name="d0/d05/a01420_a1361402d9c24abe3aa4e44cce65de4b5_cgraph" id="d0/d05/a01420_a1361402d9c24abe3aa4e44cce65de4b5_cgraph">
<area shape="rect" title="Test if a value is or isn&#39;t in an array." alt="" coords="5,31,144,57"/>
<area shape="rect" href="../../d0/d05/a01420.php#ad9e5ce30e83438c731c0b32558087e7e" title="Add a test analyze to an array." alt="" coords="192,5,367,32"/>
<area shape="rect" href="../../db/d12/a00268.php#ae057a7c5042a3cacb444199a2b6b7598" title="Convert in in a string." alt="" coords="243,56,316,83"/>
</map>
</div>

</div>
</div>
<a id="a7602fba793072f87e41fb0df3884ce24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7602fba793072f87e41fb0df3884ce24">&#9670;&nbsp;</a></span>instance()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class U &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::instance </td>
          <td>(</td>
          <td class="paramtype">const U &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>strObj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Test_struct &amp;&#160;</td>
          <td class="paramname"><em>test</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>cmp</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="../../d0/d05/a01420.php" title="A static class to test code.">Test</a> if class U is an instance of T or is a child instance of T. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">obj</td><td>The object of class U </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strObj</td><td>The string with obj name </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">test</td><td>Some test analyze datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">cmp</td><td>Set if instance is normal or inverted, <b>true</b> is normal </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../d0/d05/a01420_a7602fba793072f87e41fb0df3884ce24_cgraph.png" border="0" usemap="#ad0/d05/a01420_a7602fba793072f87e41fb0df3884ce24_cgraph" alt=""/></div>
<map name="d0/d05/a01420_a7602fba793072f87e41fb0df3884ce24_cgraph" id="d0/d05/a01420_a7602fba793072f87e41fb0df3884ce24_cgraph">
<area shape="rect" title="Test if class U is an instance of T or is a child instance of T." alt="" coords="5,5,183,32"/>
<area shape="rect" href="../../d0/d05/a01420.php#ad9e5ce30e83438c731c0b32558087e7e" title="Add a test analyze to an array." alt="" coords="231,5,405,32"/>
</map>
</div>

</div>
</div>
<a id="acfe8416a1f76010757bda8e2c68412ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfe8416a1f76010757bda8e2c68412ae">&#9670;&nbsp;</a></span>nb()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static size_t mcd::Tests::Test::nb </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of tests executed after a call to run \error Abort the program if it's call before run. </p>
<dl class="section return"><dt>Returns</dt><dd>size_t </dd></dl>

</div>
</div>
<a id="ac6b9760deebd8280c822a0d7b6541b13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6b9760deebd8280c822a0d7b6541b13">&#9670;&nbsp;</a></span>print()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::print </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>format</em> = <code>0b00000010|0b00000100|0b00001000</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Print the results of the tests. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">os</td><td>The stream where to write </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>The format of the analyze, default is TEST_FORMAT_ALL </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="ad0540f76b1d762f87f48b1333c499d96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0540f76b1d762f87f48b1333c499d96">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void mcd::Tests::Test::run </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>key</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run all or a group of tests. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The tests group's name, empty for all tests </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a id="a2460015b885027e9c03ee911b1466f67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2460015b885027e9c03ee911b1466f67">&#9670;&nbsp;</a></span>success()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static size_t mcd::Tests::Test::success </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of success after a call to run \error Abort the program if it's call before run. </p>
<dl class="section return"><dt>Returns</dt><dd>size_t </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="../../d6/de1/a00233.php">Test.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.11-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
	<ul>
		<li class="navelem"><a class="el" href="../../db/d12/a00268.php">mcd</a></li><li class="navelem"><a class="el" href="../../d9/dd6/a00272.php">Tests</a></li><li class="navelem"><a class="el" href="../../d0/d05/a01420.php">Test</a></li>
		<li class="footer">
			<?php
				echo $text;
			?>
		</li>
	</ul>
</div>
</body>
</html>
