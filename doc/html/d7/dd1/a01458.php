<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
		<meta http-equiv="X-UA-Compatible" content="IE=9"/>
		<meta name="generator" content="Doxygen 1.8.20"/>
		<title>C++: mcd::vector&lt; C &gt; Class Template Reference</title>
		<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
		<script type="text/javascript" src="../../jquery.js"></script>
		<script type="text/javascript" src="../../dynsections.js"></script>
		<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
		<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
		<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
		<link href="../../doxystyle.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
			<div id="titlearea">
				<table cellspacing="0" cellpadding="0">
					<tbody>
						<tr style="height: 56px;">
							<td id="projectalign" style="padding-left: 0.5em;">
								<div id="projectname">C++
									&#160;<span id="projectnumber">1.6.2.2</span>
								</div>
								<div id="projectbrief">My own C++ features</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<?php
				$text = "Generated on Sun Nov 15 2020 20:32:44 for C++ by";
				$text = substr($text, 0, sizeof($text) - 4);
				$tmp = substr($text, 17);
				$tmp = substr($tmp, 0, strpos($tmp, " for"));
				$lastModif = date("l jS \of F Y \a\\t H:i:s", strtotime($tmp));
			?>
		<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d7/dd1/a01458.php','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../df/dc5/a01455.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">mcd::vector&lt; C &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Add some features to std::vector.  
 <a href="../../d7/dd1/a01458.php#details">More...</a></p>

<p><code>#include &lt;vector.hpp&gt;</code></p>
<div class="dynheader">
Inheritance diagram for mcd::vector&lt; C &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/df7/a01457.png" border="0" usemap="#amcd_1_1vector_3_01C_01_4_inherit__map" alt="Inheritance graph"/></div>
<map name="mcd_1_1vector_3_01C_01_4_inherit__map" id="mcd_1_1vector_3_01C_01_4_inherit__map">
<area shape="rect" title="Add some features to std::vector." alt="" coords="5,80,131,107"/>
<area shape="rect" title="STL class." alt="" coords="9,5,127,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.php">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for mcd::vector&lt; C &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d4/d98/a01456.png" border="0" usemap="#amcd_1_1vector_3_01C_01_4_coll__map" alt="Collaboration graph"/></div>
<map name="mcd_1_1vector_3_01C_01_4_coll__map" id="mcd_1_1vector_3_01C_01_4_coll__map">
<area shape="rect" title="Add some features to std::vector." alt="" coords="5,171,131,197"/>
<area shape="rect" title="STL class." alt="" coords="9,95,127,121"/>
<area shape="rect" title=" " alt="" coords="49,5,87,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.php">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a92e814868c4f4b6f3d0969b200b35c91"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a92e814868c4f4b6f3d0969b200b35c91">vector</a> ()</td></tr>
<tr class="separator:a92e814868c4f4b6f3d0969b200b35c91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85632a3c79899e1a5a75f7fa6b959815"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a85632a3c79899e1a5a75f7fa6b959815">vector</a> (const std::initializer_list&lt; C &gt; &amp;v)</td></tr>
<tr class="separator:a85632a3c79899e1a5a75f7fa6b959815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea718ab247c60108c5dd591905174a95"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#aea718ab247c60108c5dd591905174a95">vector</a> (const std::vector&lt; C &gt; &amp;v)</td></tr>
<tr class="separator:aea718ab247c60108c5dd591905174a95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a215cad8226c8f949ff27fcd0e606b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a2a215cad8226c8f949ff27fcd0e606b8">operator=</a> (const std::initializer_list&lt; C &gt; &amp;v)</td></tr>
<tr class="separator:a2a215cad8226c8f949ff27fcd0e606b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41342ef4979ab35b4daecfd7ad8c837f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a41342ef4979ab35b4daecfd7ad8c837f">operator=</a> (const std::vector&lt; C &gt; &amp;v)</td></tr>
<tr class="separator:a41342ef4979ab35b4daecfd7ad8c837f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ac9b9f19baf217c291e37a190b3e68c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a0ac9b9f19baf217c291e37a190b3e68c">operator+=</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:a0ac9b9f19baf217c291e37a190b3e68c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the += operator to add the content of a vector into another.  <a href="../../d7/dd1/a01458.php#a0ac9b9f19baf217c291e37a190b3e68c">More...</a><br /></td></tr>
<tr class="separator:a0ac9b9f19baf217c291e37a190b3e68c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78502b560831d092c0eaaca67e79d4f4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a78502b560831d092c0eaaca67e79d4f4">operator-=</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:a78502b560831d092c0eaaca67e79d4f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the -= operator to erase in a vector the values of another one.  <a href="../../d7/dd1/a01458.php#a78502b560831d092c0eaaca67e79d4f4">More...</a><br /></td></tr>
<tr class="separator:a78502b560831d092c0eaaca67e79d4f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acef3e5f0cf617a16de3d05045f6a21ed"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#acef3e5f0cf617a16de3d05045f6a21ed">operator&amp;=</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:acef3e5f0cf617a16de3d05045f6a21ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the &amp;= operator to get the values that are in the two vectors.  <a href="../../d7/dd1/a01458.php#acef3e5f0cf617a16de3d05045f6a21ed">More...</a><br /></td></tr>
<tr class="separator:acef3e5f0cf617a16de3d05045f6a21ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf021f04fbc720705d300f638b8f2de1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#acf021f04fbc720705d300f638b8f2de1">operator|=</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:acf021f04fbc720705d300f638b8f2de1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the |= operator to get only the values that are in one of the vector but not in twice.  <a href="../../d7/dd1/a01458.php#acf021f04fbc720705d300f638b8f2de1">More...</a><br /></td></tr>
<tr class="separator:acf021f04fbc720705d300f638b8f2de1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bccad40e32efad3b685320434e65201"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a5bccad40e32efad3b685320434e65201">operator^=</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:a5bccad40e32efad3b685320434e65201"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the ^= operator to add the values of another vector without doubling them.  <a href="../../d7/dd1/a01458.php#a5bccad40e32efad3b685320434e65201">More...</a><br /></td></tr>
<tr class="separator:a5bccad40e32efad3b685320434e65201"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58c2e9df00704c786bfcfcca5a383a0e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a58c2e9df00704c786bfcfcca5a383a0e">pop</a> (size_t pos=0)</td></tr>
<tr class="memdesc:a58c2e9df00704c786bfcfcca5a383a0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase an element in a vector at pos.  <a href="../../d7/dd1/a01458.php#a58c2e9df00704c786bfcfcca5a383a0e">More...</a><br /></td></tr>
<tr class="separator:a58c2e9df00704c786bfcfcca5a383a0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb5d16922f908bf0ae4422d89c728e90"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#abb5d16922f908bf0ae4422d89c728e90">push</a> (const C &amp;obj, size_t pos=0)</td></tr>
<tr class="memdesc:abb5d16922f908bf0ae4422d89c728e90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an element in a vector at pos.  <a href="../../d7/dd1/a01458.php#abb5d16922f908bf0ae4422d89c728e90">More...</a><br /></td></tr>
<tr class="separator:abb5d16922f908bf0ae4422d89c728e90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83393673767b1c3cde0242f7147effbc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a83393673767b1c3cde0242f7147effbc">push_top</a> (const C &amp;obj)</td></tr>
<tr class="memdesc:a83393673767b1c3cde0242f7147effbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an element in a vector on the top.  <a href="../../d7/dd1/a01458.php#a83393673767b1c3cde0242f7147effbc">More...</a><br /></td></tr>
<tr class="separator:a83393673767b1c3cde0242f7147effbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a974122831853dd91af1da065a7c39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a43a974122831853dd91af1da065a7c39">shuffle</a> ()</td></tr>
<tr class="memdesc:a43a974122831853dd91af1da065a7c39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the std::random_shuffle function to shuffle the vector.  <a href="../../d7/dd1/a01458.php#a43a974122831853dd91af1da065a7c39">More...</a><br /></td></tr>
<tr class="separator:a43a974122831853dd91af1da065a7c39"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a8f261f2319c479f4e714b269bbbbdfa9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a8f261f2319c479f4e714b269bbbbdfa9">operator+</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;a, const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:a8f261f2319c479f4e714b269bbbbdfa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the + operator to add the content of a vector into another.  <a href="../../d7/dd1/a01458.php#a8f261f2319c479f4e714b269bbbbdfa9">More...</a><br /></td></tr>
<tr class="separator:a8f261f2319c479f4e714b269bbbbdfa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee068ab7887e20606e98299c3671c34a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#aee068ab7887e20606e98299c3671c34a">operator-</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;a, const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:aee068ab7887e20606e98299c3671c34a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the - operator to erase in a vector the values of another one.  <a href="../../d7/dd1/a01458.php#aee068ab7887e20606e98299c3671c34a">More...</a><br /></td></tr>
<tr class="separator:aee068ab7887e20606e98299c3671c34a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1552117c5c07498294173619e4ca5836"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a1552117c5c07498294173619e4ca5836">operator&amp;</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;a, const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:a1552117c5c07498294173619e4ca5836"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the &amp; operator to get the values that are in the two vectors.  <a href="../../d7/dd1/a01458.php#a1552117c5c07498294173619e4ca5836">More...</a><br /></td></tr>
<tr class="separator:a1552117c5c07498294173619e4ca5836"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1db1d552fd452960ac62c3d796c0649a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a1db1d552fd452960ac62c3d796c0649a">operator|</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;a, const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:a1db1d552fd452960ac62c3d796c0649a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the | operator to get only the values that are in one of the vector but not in twice.  <a href="../../d7/dd1/a01458.php#a1db1d552fd452960ac62c3d796c0649a">More...</a><br /></td></tr>
<tr class="separator:a1db1d552fd452960ac62c3d796c0649a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af87e40dfdbf6844cacdd3fc5873018b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#af87e40dfdbf6844cacdd3fc5873018b0">operator^</a> (const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;a, const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;b)</td></tr>
<tr class="memdesc:af87e40dfdbf6844cacdd3fc5873018b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the ^ operator to add the values of another vector without doubling.  <a href="../../d7/dd1/a01458.php#af87e40dfdbf6844cacdd3fc5873018b0">More...</a><br /></td></tr>
<tr class="separator:af87e40dfdbf6844cacdd3fc5873018b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a809579a337d6d0419a28bff79eb2597b"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a809579a337d6d0419a28bff79eb2597b">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="../../d7/dd1/a01458.php">vector</a> &amp;other)</td></tr>
<tr class="memdesc:a809579a337d6d0419a28bff79eb2597b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the &lt;&lt; operator to write a vector in an output stream (std::ostream)  <a href="../../d7/dd1/a01458.php#a809579a337d6d0419a28bff79eb2597b">More...</a><br /></td></tr>
<tr class="separator:a809579a337d6d0419a28bff79eb2597b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b06b20625099b2c7cdd5ac2c7290558"><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dd1/a01458.php#a3b06b20625099b2c7cdd5ac2c7290558">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="../../d7/dd1/a01458.php">vector</a> &amp;other)</td></tr>
<tr class="memdesc:a3b06b20625099b2c7cdd5ac2c7290558"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the &gt;&gt; operator to read a vector from an input stream (std::istream)  <a href="../../d7/dd1/a01458.php#a3b06b20625099b2c7cdd5ac2c7290558">More...</a><br /></td></tr>
<tr class="separator:a3b06b20625099b2c7cdd5ac2c7290558"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class C&gt;<br />
class mcd::vector&lt; C &gt;</h3>

<p>Add some features to std::vector. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a92e814868c4f4b6f3d0969b200b35c91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92e814868c4f4b6f3d0969b200b35c91">&#9670;&nbsp;</a></span>vector() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::<a class="el" href="../../d7/dd1/a01458.php">vector</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a85632a3c79899e1a5a75f7fa6b959815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85632a3c79899e1a5a75f7fa6b959815">&#9670;&nbsp;</a></span>vector() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::<a class="el" href="../../d7/dd1/a01458.php">vector</a> </td>
          <td>(</td>
          <td class="paramtype">const std::initializer_list&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aea718ab247c60108c5dd591905174a95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea718ab247c60108c5dd591905174a95">&#9670;&nbsp;</a></span>vector() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::<a class="el" href="../../d7/dd1/a01458.php">vector</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acef3e5f0cf617a16de3d05045f6a21ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acef3e5f0cf617a16de3d05045f6a21ed">&#9670;&nbsp;</a></span>operator&amp;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator&amp;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the &amp;= operator to get the values that are in the two vectors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a0ac9b9f19baf217c291e37a190b3e68c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ac9b9f19baf217c291e37a190b3e68c">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the += operator to add the content of a vector into another. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a78502b560831d092c0eaaca67e79d4f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78502b560831d092c0eaaca67e79d4f4">&#9670;&nbsp;</a></span>operator-=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the -= operator to erase in a vector the values of another one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a2a215cad8226c8f949ff27fcd0e606b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a215cad8226c8f949ff27fcd0e606b8">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const std::initializer_list&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a41342ef4979ab35b4daecfd7ad8c837f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41342ef4979ab35b4daecfd7ad8c837f">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5bccad40e32efad3b685320434e65201"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bccad40e32efad3b685320434e65201">&#9670;&nbsp;</a></span>operator^=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator^= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the ^= operator to add the values of another vector without doubling them. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="acf021f04fbc720705d300f638b8f2de1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf021f04fbc720705d300f638b8f2de1">&#9670;&nbsp;</a></span>operator|=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt;&amp; <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::operator|= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the |= operator to get only the values that are in one of the vector but not in twice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a58c2e9df00704c786bfcfcca5a383a0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58c2e9df00704c786bfcfcca5a383a0e">&#9670;&nbsp;</a></span>pop()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::pop </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erase an element in a vector at pos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>The position to erase </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abb5d16922f908bf0ae4422d89c728e90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb5d16922f908bf0ae4422d89c728e90">&#9670;&nbsp;</a></span>push()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::push </td>
          <td>(</td>
          <td class="paramtype">const C &amp;&#160;</td>
          <td class="paramname"><em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add an element in a vector at pos. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">obj</td><td>The object to add </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>The position of the object </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a83393673767b1c3cde0242f7147effbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83393673767b1c3cde0242f7147effbc">&#9670;&nbsp;</a></span>push_top()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::push_top </td>
          <td>(</td>
          <td class="paramtype">const C &amp;&#160;</td>
          <td class="paramname"><em>obj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add an element in a vector on the top. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">obj</td><td>The object to add </td></tr>
  </table>
  </dd>
</dl>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../d7/dd1/a01458_a83393673767b1c3cde0242f7147effbc_cgraph.png" border="0" usemap="#ad7/dd1/a01458_a83393673767b1c3cde0242f7147effbc_cgraph" alt=""/></div>
<map name="d7/dd1/a01458_a83393673767b1c3cde0242f7147effbc_cgraph" id="d7/dd1/a01458_a83393673767b1c3cde0242f7147effbc_cgraph">
<area shape="rect" title="Add an element in a vector on the top." alt="" coords="5,5,157,32"/>
<area shape="rect" href="../../d7/dd1/a01458.php#abb5d16922f908bf0ae4422d89c728e90" title="Add an element in a vector at pos." alt="" coords="205,5,332,32"/>
</map>
</div>

</div>
</div>
<a id="a43a974122831853dd91af1da065a7c39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43a974122831853dd91af1da065a7c39">&#9670;&nbsp;</a></span>shuffle()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d7/dd1/a01458.php">mcd::vector</a>&lt; C &gt;::shuffle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use the std::random_shuffle function to shuffle the vector. </p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a1552117c5c07498294173619e4ca5836"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1552117c5c07498294173619e4ca5836">&#9670;&nbsp;</a></span>operator&amp;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the &amp; operator to get the values that are in the two vectors. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The first vector to use in the computation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a8f261f2319c479f4e714b269bbbbdfa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f261f2319c479f4e714b269bbbbdfa9">&#9670;&nbsp;</a></span>operator+</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the + operator to add the content of a vector into another. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The first vector to use in the computation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="aee068ab7887e20606e98299c3671c34a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee068ab7887e20606e98299c3671c34a">&#9670;&nbsp;</a></span>operator-</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the - operator to erase in a vector the values of another one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The first vector to use in the computation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a809579a337d6d0419a28bff79eb2597b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a809579a337d6d0419a28bff79eb2597b">&#9670;&nbsp;</a></span>operator&lt;&lt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the &lt;&lt; operator to write a vector in an output stream (std::ostream) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">[in|out]</td><td>os The output stream variable </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>The vector to write </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a reference to the std::ostream variable </dd></dl>

</div>
</div>
<a id="a3b06b20625099b2c7cdd5ac2c7290558"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b06b20625099b2c7cdd5ac2c7290558">&#9670;&nbsp;</a></span>operator&gt;&gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the &gt;&gt; operator to read a vector from an input stream (std::istream) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir"></td><td class="paramname">[in|out]</td><td>is The input stream variable </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">other</td><td>The vector to write in </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a reference to the std::istream variable </dd></dl>

</div>
</div>
<a id="af87e40dfdbf6844cacdd3fc5873018b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af87e40dfdbf6844cacdd3fc5873018b0">&#9670;&nbsp;</a></span>operator^</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; operator^ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the ^ operator to add the values of another vector without doubling. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The first vector to use in the computation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<a id="a1db1d552fd452960ac62c3d796c0649a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1db1d552fd452960ac62c3d796c0649a">&#9670;&nbsp;</a></span>operator|</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dd1/a01458.php">vector</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Overload of the | operator to get only the values that are in one of the vector but not in twice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>The first vector to use in the computation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">b</td><td>The second vector to use in the computation </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the computed vector </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="../../d9/d39/a00257.php">vector.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.11-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
	<ul>
		<li class="navelem"><a class="el" href="../../db/d12/a00268.php">mcd</a></li><li class="navelem"><a class="el" href="../../d7/dd1/a01458.php">vector</a></li>
		<li class="footer">
			<?php
				echo $text;
			?>
		</li>
	</ul>
</div>
</body>
</html>
