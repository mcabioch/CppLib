<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>C++: array.hpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">C++
   &#160;<span id="projectnumber">2.0</span>
   </div>
   <div id="projectbrief">My own C++ features</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.php"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.php"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.php"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('de/de1/a00065_source.php','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">array.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../de/de1/a00065.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef HEADER_CPP_ARRAY</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define HEADER_CPP_ARRAY</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/da5/a00075.php">C++/check.hpp</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/d1e/a00103.php">C++/sorting.hpp</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#a5090547d046a342ba3ac573e8248f628">   24</a></span>&#160;std::string <a class="code" href="../../de/de1/a00065.php#a5090547d046a342ba3ac573e8248f628">implode</a>(std::vector&lt;T&gt; a, std::string glue = <span class="stringliteral">&quot;&quot;</span>){</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    std::string out{<span class="stringliteral">&quot;&quot;</span>};</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">size_t</span> size = a.size();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordtype">size_t</span> index = 0;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; elem : a){</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        std::stringstream tmp;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        tmp &lt;&lt; elem;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        out += tmp.str();</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">if</span>(index+1 &lt; size){</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            out += glue;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        index ++;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#ifdef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Array&gt;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#aac0759458c145572c122af7a6cff118c">print_r</a>(Array a);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#aac0759458c145572c122af7a6cff118c">print_r</a>(std::vector&lt;T&gt; a){</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">size_t</span> index{0};</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; elem : a){</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            std::cout &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; : &#39;&quot;</span> &lt;&lt; elem &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            index++;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">typename</span> std::enable_if_t&lt;std::is_array&lt;T&gt;::value &amp;&amp; !<a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a>&gt;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="../../de/de1/a00065.php#aac0759458c145572c122af7a6cff118c">print_r</a>(T a){</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordtype">size_t</span> index{0};</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; elem : a){</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            std::cout &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; : &#39;&quot;</span> &lt;&lt; elem &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            index++;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#addfa691004e6d94461994bb7eccadf19">   96</a></span>&#160;std::vector&lt;V&gt; <a class="code" href="../../de/de1/a00065.php#addfa691004e6d94461994bb7eccadf19">rewrite</a>(std::vector&lt;V&gt; table, <span class="keywordtype">unsigned</span> index) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::vector&lt;V&gt; out;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i{0}; i &lt; index; ++i){</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        out.push_back(table[i]);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i{index+1}; i &lt; table.size(); ++i){</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        out.push_back(table[i]);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#a54f668e0211381d2d15ca45dcf3c55d0">  117</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../de/de1/a00065.php#a54f668e0211381d2d15ca45dcf3c55d0">contains</a>(std::vector&lt;T&gt; table, T value){</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">/*std::cout &lt;&lt; &quot;Contains ;&quot; &lt;&lt; std::endl;</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">    std::cout &lt;&lt; &quot;\t- value : &#39;&quot; &lt;&lt; value &lt;&lt; &quot;&#39;&quot; &lt;&lt; std::endl;</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">    std::cout &lt;&lt; &quot;\t- table.size() = &quot; &lt;&lt; table.size() &lt;&lt; std::endl;</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">    std::cout &lt;&lt; &quot;\t- table ;&quot; &lt;&lt; std::endl;</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">    for(size_t i{0}; i &lt; table.size(); ++i){</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">        std::cout &lt;&lt; &quot;\t\t- table[&quot; &lt;&lt; i &lt;&lt; &quot;] = &#39;&quot; &lt;&lt; table[i] &lt;&lt; &quot;&#39;&quot; &lt;&lt; std::endl;</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    }*/</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span>(table.empty()){ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span>(std::find(table.begin(), table.end(), value) == table.end()){ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#ifdef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    T <a class="code" href="../../de/de1/a00065.php#a4b73faece12295541488cb9e1c5396d6">concate</a>(T table);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">typename</span> std::enable_if_t&lt;Check::is_array&lt;T&gt;::value, T&gt;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="../../de/de1/a00065.php#a4b73faece12295541488cb9e1c5396d6">concate</a>(T table){</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;It&#39;s an array&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">auto</span>&amp; line : table){</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        </div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span> table;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">typename</span> std::enable_if_t&lt;!Check::is_array&lt;T&gt;::value, T&gt;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="../../de/de1/a00065.php#a4b73faece12295541488cb9e1c5396d6">concate</a>(T table){</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;It isn&#39;t an array&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">return</span> table;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#ifdef DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Something&gt;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(Something data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">/* print_all function */</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                <a class="code" href="../../dc/d3c/a00028.php">Check::is_object&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                !<a class="code" href="../../d0/dc0/a00033.php">Check::is_special_struct&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                !<a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                &gt;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T, <span class="keywordtype">bool</span> = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                <a class="code" href="../../dc/d3c/a00028.php">Check::is_object&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                !<a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                &gt;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T* data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                <a class="code" href="../../dc/d3c/a00028.php">Check::is_object&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                <a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                <a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                &gt;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                (</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                    std::is_fundamental&lt;T&gt;::value ||</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                    <a class="code" href="../../db/df3/a00034.php">Check::is_string&lt;T&gt;::value</a></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                ) &amp;&amp;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                <a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                &gt;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span> = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                !std::is_fundamental&lt;T&gt;::value &amp;&amp;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                !<a class="code" href="../../db/df3/a00034.php">Check::is_string&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                <a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                &gt;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span> = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(std::smatch data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                <a class="code" href="../../d3/dfe/a00025.php">Check::is_array&lt;T&gt;::value</a></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                &gt;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T* data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                <a class="code" href="../../d3/dfe/a00025.php">Check::is_array&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                !<a class="code" href="../../de/d8c/a00036.php">Check::is_vector&lt;T&gt;::value</a></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                &gt;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(std::vector&lt;T&gt; data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(std::pair&lt;T, U&gt; data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(<a class="code" href="../../d6/d2d/a00047.php#d9/d4b/a00117">trio&lt;T, U, V&gt;</a> data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V, <span class="keyword">typename</span> W&gt;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(<a class="code" href="../../d6/d2d/a00047.php#d2/da3/a00115">quatuor&lt;T, U, V, W&gt;</a> data, <span class="keywordtype">bool</span> change = <span class="keyword">false</span>, std::string decal = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="comment">/* End */</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                    <a class="code" href="../../dc/d3c/a00028.php">Check::is_object&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                    !<a class="code" href="../../d0/dc0/a00033.php">Check::is_special_struct&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                    !<a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                    !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                    &gt;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T, <span class="keywordtype">bool</span>, std::string decal){</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;Object&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                    <a class="code" href="../../dc/d3c/a00028.php">Check::is_object&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                    !<a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                    !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                    &gt;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T* data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keywordflow">if</span>(change){</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; data &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(*data, change, decal);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                    <a class="code" href="../../dc/d3c/a00028.php">Check::is_object&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                    <a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                    <a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                    &gt;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keywordflow">if</span>(change){</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; data &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(*data, change, decal);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                    (</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                        std::is_fundamental&lt;T&gt;::value ||</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                        <a class="code" href="../../db/df3/a00034.php">Check::is_string&lt;T&gt;::value</a></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                    ) &amp;&amp;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                    <a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                    !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                    &gt;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span>, std::string decal){</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; data &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                    !std::is_fundamental&lt;T&gt;::value &amp;&amp;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                    !<a class="code" href="../../db/df3/a00034.php">Check::is_string&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                    <a class="code" href="../../d5/d79/a00030.php">Check::is_printable&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                    !<a class="code" href="../../d0/d33/a00027.php">Check::is_minded_ptr&lt;T&gt;::value</a></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                    &gt;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span>, std::string decal){</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                std::cout &lt;&lt; decal &lt;&lt; data &lt;&lt; std::endl;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="comment">/*******/</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(std::pair&lt;T, U&gt; data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;pair&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a2bf6e0bae9df9d4f84bab8087aa1dd1a">first</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a2e139f090204cfbf8f6bad9e3f260a73">second</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V&gt;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(<a class="code" href="../../d6/d2d/a00047.php#d9/d4b/a00117">trio&lt;T, U, V&gt;</a> data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;trio&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#afd5c9afd87ec0afa9280b0e623350125">first</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a875a876ca0878b4e0e20237f031545e6">second</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#af8bab1b2edaafe2be7b53c7479e5417a">ter</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U, <span class="keyword">typename</span> V, <span class="keyword">typename</span> W&gt;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(<a class="code" href="../../d6/d2d/a00047.php#d2/da3/a00115">quatuor&lt;T, U, V, W&gt;</a> data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;quatuor&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a2bf6e0bae9df9d4f84bab8087aa1dd1a">first</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a2e139f090204cfbf8f6bad9e3f260a73">second</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a9ea07cc03504e756f1b8f0b00643d806">ter</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(data.<a class="code" href="../../d6/d2d/a00047.php#a45867a79f808a4b8317a9592d6f9df5b">quad</a>, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                <a class="code" href="../../d3/dfe/a00025.php">Check::is_array&lt;T&gt;::value</a></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                &gt;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T* data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <span class="keywordflow">if</span>(change){</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; data &lt;&lt; <span class="stringliteral">&quot;)[&quot;</span> &lt;&lt; data-&gt;size() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(*data, change, decal);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keyword">typename</span> std::enable_if_t&lt;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                <a class="code" href="../../d3/dfe/a00025.php">Check::is_array&lt;T&gt;::value</a> &amp;&amp;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                !<a class="code" href="../../de/d8c/a00036.php">Check::is_vector&lt;T&gt;::value</a></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                &gt;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(T data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;array[&quot;</span> &lt;&lt; data.size() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordtype">size_t</span> i{0};</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> d : data){</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(d, change, decal + <span class="stringliteral">&quot;--&quot;</span>);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                ++i;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(std::vector&lt;T&gt; data, <span class="keywordtype">bool</span> change, std::string decal){</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            std::cout &lt;&lt; decal &lt;&lt; <span class="stringliteral">&quot;vector[&quot;</span> &lt;&lt; data.size() &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordtype">size_t</span> i{0};</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> d : data){</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                std::string size = <span class="stringliteral">&quot;[&quot;</span> + std::to_string(i) + <span class="stringliteral">&quot;] :&quot;</span>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                std::string addDecal = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> j{0}; j &lt; size.size(); ++j){</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    addDecal += <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                std::cout &lt;&lt; decal &lt;&lt; size &lt;&lt; std::endl;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <a class="code" href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a>(d, change, decal + addDecal);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                ++i;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="comment">/**********************/</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">/* Some std::vector operators */</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#a0de5dca1e8d2e9a9c106a8c4b861e0be">  391</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a0de5dca1e8d2e9a9c106a8c4b861e0be">operator+=</a>(std::vector&lt;T&gt;&amp; a, <span class="keyword">const</span> std::vector&lt;T&gt;&amp; b){</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : b){</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            a.push_back(val);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#af3dd873a961cbff7c1524add89469140">  398</a></span>&#160;    std::vector&lt;T&gt; <a class="code" href="../../de/de1/a00065.php#af3dd873a961cbff7c1524add89469140">operator+</a>(<span class="keyword">const</span> std::vector&lt;T&gt;&amp; a, <span class="keyword">const</span> std::vector&lt;T&gt;&amp; b){</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        std::vector&lt;T&gt; c = a;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        c += b;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#a72657fb961ec7b79362bc04d2516621e">  405</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a72657fb961ec7b79362bc04d2516621e">operator-=</a>(std::vector&lt;T&gt;&amp; a, <span class="keyword">const</span> std::vector&lt;T&gt;&amp; b){</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; val : b){</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keyword">auto</span> it_pos = std::find(a.begin(), a.end(), val);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="keywordflow">if</span>(it_pos != a.end()){</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                a.erase(it_pos);</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                a.shrink_to_fit();</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        }</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    }</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#aaf00ffb32776bdb3501a7e7dacbd3992">  416</a></span>&#160;    std::vector&lt;T&gt; <a class="code" href="../../de/de1/a00065.php#aaf00ffb32776bdb3501a7e7dacbd3992">operator-</a>(<span class="keyword">const</span> std::vector&lt;T&gt;&amp; a, <span class="keyword">const</span> std::vector&lt;T&gt;&amp; b){</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        std::vector&lt;T&gt; c = a;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        c -= b;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    }</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#a4ea5f5fe68709a70535f1d9097b4c5e3">  423</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#a4ea5f5fe68709a70535f1d9097b4c5e3">operator%=</a>(std::vector&lt;T&gt;&amp; a, <span class="keyword">const</span> std::vector&lt;T&gt;&amp; b){</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        a -= (a - b);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#aaff2e93f8a7ffc3e84a3e14a584392fd">  428</a></span>&#160;    std::vector&lt;T&gt; <a class="code" href="../../de/de1/a00065.php#aaff2e93f8a7ffc3e84a3e14a584392fd">operator%</a>(<span class="keyword">const</span> std::vector&lt;T&gt;&amp; a, <span class="keyword">const</span> std::vector&lt;T&gt;&amp; b){</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        std::vector&lt;T&gt; c = a;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        c %= b;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">/******************************/</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">/* Some std::vector features */</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">    * \brief    Erase an element from a vector on the position pos</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">    *       \param      a           The array</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">    *       \param      pos         The position to erase</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#af0b00d73c5298e0e46ed92f4d699d5f1">  441</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/de1/a00065.php#af0b00d73c5298e0e46ed92f4d699d5f1">pop</a>(std::vector&lt;T&gt;&amp; a, <span class="keywordtype">size_t</span> pos = 0){</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">if</span>(pos &gt;= a.size()){ <span class="keywordflow">return</span>; }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        a.erase(a.begin() + pos);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">/*****************************/</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">* \brief    Convert 2D coords to 1D coords</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">*       \param      x           The x coord</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">*       \param      y           The y coord</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">*       \param      maxX        The maximum length of a line</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">*       \return     Return the 1D coord</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="../../de/de1/a00065.php#a290ab1227a622c80b64a2ba918f707ff">  455</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">size_t</span> <a class="code" href="../../de/de1/a00065.php#a290ab1227a622c80b64a2ba918f707ff">array2Dto1D</a>(<span class="keywordtype">size_t</span> x, <span class="keywordtype">size_t</span> y, <span class="keywordtype">size_t</span> maxX){</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keywordflow">return</span> y * maxX + x;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">* \brief    Convert 1D coords to 2D coords</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">*       \param      index           The 1D coord</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">*       \param      maxX            The maximum length of a line</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">*       \return     Return a std::pair containing the 2D coords</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;std::pair&lt;size_t, size_t&gt; <a class="code" href="../../de/de1/a00065.php#a3d4d62df9dc3a6a2461bc63d7cbd85d0">array1Dto2D</a>(<span class="keywordtype">size_t</span> index, <span class="keywordtype">size_t</span> maxX);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Container = std::deque&lt;T&gt;&gt;</div><div class="line"><a name="l00471"></a><span class="lineno"><a class="line" href="../../d1/dea/a00054.php">  471</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/dea/a00054.php">stack</a> : <span class="keyword">public</span> std::stack&lt;T, Container&gt; {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="comment">/* Constructor */</span></div><div class="line"><a name="l00474"></a><span class="lineno"><a class="line" href="../../d1/dea/a00054.php#ac85c097cb0cf23a5c56210bf60c7e83c">  474</a></span>&#160;        <a class="code" href="../../d1/dea/a00054.php#ac85c097cb0cf23a5c56210bf60c7e83c">stack</a>() :</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <a class="code" href="../../db/d57/a00112.php">std</a>::<a class="code" href="../../d1/dea/a00054.php">stack</a>&lt;T, Container&gt;()</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        {}</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="comment">/* Getters */</span></div><div class="line"><a name="l00480"></a><span class="lineno"><a class="line" href="../../d1/dea/a00054.php#a256eae2c3a3bfe8e1a589dc19fc1bc37">  480</a></span>&#160;            T <span class="keyword">get</span>(){</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                T el = this-&gt;top();</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                this-&gt;<a class="code" href="../../de/de1/a00065.php#af0b00d73c5298e0e46ed92f4d699d5f1">pop</a>();</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <span class="keywordflow">return</span> el;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            }</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;};</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno"><a class="line" href="../../d1/dc6/a00037.php">  492</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d1/dc6/a00037.php">jumble</a> {</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="comment">/* Constructor et Destroyer */</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <a class="code" href="../../d1/dc6/a00037.php">jumble</a>();</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        ~<a class="code" href="../../d1/dc6/a00037.php">jumble</a>();</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="comment">/* Setters */</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="comment">/* Others */</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; contents;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;};</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor">#endif //HEADER_CPP_ARRAY</span></div><div class="ttc" id="a00036_php"><div class="ttname"><a href="../../de/d8c/a00036.php">Check::is_vector</a></div><div class="ttdoc">A template class to test if T is a vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00050">check.hpp:50</a></div></div>
<div class="ttc" id="a00065_php_a290ab1227a622c80b64a2ba918f707ff"><div class="ttname"><a href="../../de/de1/a00065.php#a290ab1227a622c80b64a2ba918f707ff">array2Dto1D</a></div><div class="ttdeci">size_t array2Dto1D(size_t x, size_t y, size_t maxX)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00455">array.hpp:455</a></div></div>
<div class="ttc" id="a00065_php_aac0759458c145572c122af7a6cff118c"><div class="ttname"><a href="../../de/de1/a00065.php#aac0759458c145572c122af7a6cff118c">print_r</a></div><div class="ttdeci">void print_r(Array a)</div><div class="ttdoc">Print the content of an array. </div></div>
<div class="ttc" id="a00065_php_af0b00d73c5298e0e46ed92f4d699d5f1"><div class="ttname"><a href="../../de/de1/a00065.php#af0b00d73c5298e0e46ed92f4d699d5f1">pop</a></div><div class="ttdeci">void pop(std::vector&lt; T &gt; &amp;a, size_t pos=0)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00441">array.hpp:441</a></div></div>
<div class="ttc" id="a00047_php_d9/d4b/a00117"><div class="ttname"><a href="../../d6/d2d/a00047.php#d9/d4b/a00117">trio</a></div><div class="ttdoc">A container for three values. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00020">types.hpp:20</a></div></div>
<div class="ttc" id="a00065_php_a5090547d046a342ba3ac573e8248f628"><div class="ttname"><a href="../../de/de1/a00065.php#a5090547d046a342ba3ac573e8248f628">implode</a></div><div class="ttdeci">std::string implode(std::vector&lt; T &gt; a, std::string glue=&quot;&quot;)</div><div class="ttdoc">Stick the a vector with the glue given. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00024">array.hpp:24</a></div></div>
<div class="ttc" id="a00034_php"><div class="ttname"><a href="../../db/df3/a00034.php">Check::is_string</a></div><div class="ttdoc">A template class to test if T is a std::string. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00110">check.hpp:110</a></div></div>
<div class="ttc" id="a00065_php_a72657fb961ec7b79362bc04d2516621e"><div class="ttname"><a href="../../de/de1/a00065.php#a72657fb961ec7b79362bc04d2516621e">operator-=</a></div><div class="ttdeci">void operator-=(std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00405">array.hpp:405</a></div></div>
<div class="ttc" id="a00028_php"><div class="ttname"><a href="../../dc/d3c/a00028.php">Check::is_object</a></div><div class="ttdoc">A template class to test if T is an unknown object. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00287">check.hpp:287</a></div></div>
<div class="ttc" id="a00065_php_a37317d7bf62b3a11e70c60b5760d61d2"><div class="ttname"><a href="../../de/de1/a00065.php#a37317d7bf62b3a11e70c60b5760d61d2">print_all</a></div><div class="ttdeci">void print_all(Something data, bool change=false)</div><div class="ttdoc">Prints approximately everything. </div></div>
<div class="ttc" id="a00065_php_a4b73faece12295541488cb9e1c5396d6"><div class="ttname"><a href="../../de/de1/a00065.php#a4b73faece12295541488cb9e1c5396d6">concate</a></div><div class="ttdeci">T concate(T table)</div><div class="ttdoc">Concate an array when it only contains an array in a field. </div></div>
<div class="ttc" id="a00065_php_aaf00ffb32776bdb3501a7e7dacbd3992"><div class="ttname"><a href="../../de/de1/a00065.php#aaf00ffb32776bdb3501a7e7dacbd3992">operator-</a></div><div class="ttdeci">std::vector&lt; T &gt; operator-(const std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00416">array.hpp:416</a></div></div>
<div class="ttc" id="a00047_php_d2/da3/a00115"><div class="ttname"><a href="../../d6/d2d/a00047.php#d2/da3/a00115">quatuor</a></div><div class="ttdoc">A container for four values. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00061">types.hpp:61</a></div></div>
<div class="ttc" id="a00047_php_afd5c9afd87ec0afa9280b0e623350125"><div class="ttname"><a href="../../d6/d2d/a00047.php#afd5c9afd87ec0afa9280b0e623350125">trio::first</a></div><div class="ttdeci">T first</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00022">types.hpp:22</a></div></div>
<div class="ttc" id="a00054_php_ac85c097cb0cf23a5c56210bf60c7e83c"><div class="ttname"><a href="../../d1/dea/a00054.php#ac85c097cb0cf23a5c56210bf60c7e83c">stack::stack</a></div><div class="ttdeci">stack()</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00474">array.hpp:474</a></div></div>
<div class="ttc" id="a00037_php"><div class="ttname"><a href="../../d1/dc6/a00037.php">jumble</a></div><div class="ttdoc">A dynamic array to store any type of variable. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00492">array.hpp:492</a></div></div>
<div class="ttc" id="a00047_php_a2bf6e0bae9df9d4f84bab8087aa1dd1a"><div class="ttname"><a href="../../d6/d2d/a00047.php#a2bf6e0bae9df9d4f84bab8087aa1dd1a">quatuor::first</a></div><div class="ttdeci">T first</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00063">types.hpp:63</a></div></div>
<div class="ttc" id="a00112_php"><div class="ttname"><a href="../../db/d57/a00112.php">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="a00047_php_a9ea07cc03504e756f1b8f0b00643d806"><div class="ttname"><a href="../../d6/d2d/a00047.php#a9ea07cc03504e756f1b8f0b00643d806">quatuor::ter</a></div><div class="ttdeci">V ter</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00065">types.hpp:65</a></div></div>
<div class="ttc" id="a00030_php"><div class="ttname"><a href="../../d5/d79/a00030.php">Check::is_printable</a></div><div class="ttdoc">A template class to test if T is printable. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00240">check.hpp:240</a></div></div>
<div class="ttc" id="a00033_php"><div class="ttname"><a href="../../d0/dc0/a00033.php">Check::is_special_struct</a></div><div class="ttdoc">A template class to test if T is a special struct. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00297">check.hpp:297</a></div></div>
<div class="ttc" id="a00065_php_addfa691004e6d94461994bb7eccadf19"><div class="ttname"><a href="../../de/de1/a00065.php#addfa691004e6d94461994bb7eccadf19">rewrite</a></div><div class="ttdeci">std::vector&lt; V &gt; rewrite(std::vector&lt; V &gt; table, unsigned index)</div><div class="ttdoc">Rewrite a vector array without the value at the given index. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00096">array.hpp:96</a></div></div>
<div class="ttc" id="a00027_php"><div class="ttname"><a href="../../d0/d33/a00027.php">Check::is_minded_ptr</a></div><div class="ttdoc">A template class to test if T is a std::shared_ptr, a std::unique_ptr or a std::weak_ptr. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00125">check.hpp:125</a></div></div>
<div class="ttc" id="a00075_php"><div class="ttname"><a href="../../d9/da5/a00075.php">check.hpp</a></div></div>
<div class="ttc" id="a00054_php"><div class="ttname"><a href="../../d1/dea/a00054.php">stack</a></div><div class="ttdoc">An implementation of std::stack. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00471">array.hpp:471</a></div></div>
<div class="ttc" id="a00025_php"><div class="ttname"><a href="../../d3/dfe/a00025.php">Check::is_array</a></div><div class="ttdoc">A template class to test if T is an array, a vector or a map. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/da5/a00075_source.php#l00023">check.hpp:23</a></div></div>
<div class="ttc" id="a00065_php_a54f668e0211381d2d15ca45dcf3c55d0"><div class="ttname"><a href="../../de/de1/a00065.php#a54f668e0211381d2d15ca45dcf3c55d0">contains</a></div><div class="ttdeci">bool contains(std::vector&lt; T &gt; table, T value)</div><div class="ttdoc">Verify if a vector contains or not something. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00117">array.hpp:117</a></div></div>
<div class="ttc" id="a00047_php_a875a876ca0878b4e0e20237f031545e6"><div class="ttname"><a href="../../d6/d2d/a00047.php#a875a876ca0878b4e0e20237f031545e6">trio::second</a></div><div class="ttdeci">U second</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00023">types.hpp:23</a></div></div>
<div class="ttc" id="a00103_php"><div class="ttname"><a href="../../d5/d1e/a00103.php">sorting.hpp</a></div></div>
<div class="ttc" id="a00065_php_a0de5dca1e8d2e9a9c106a8c4b861e0be"><div class="ttname"><a href="../../de/de1/a00065.php#a0de5dca1e8d2e9a9c106a8c4b861e0be">operator+=</a></div><div class="ttdeci">void operator+=(std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00391">array.hpp:391</a></div></div>
<div class="ttc" id="a00047_php_a45867a79f808a4b8317a9592d6f9df5b"><div class="ttname"><a href="../../d6/d2d/a00047.php#a45867a79f808a4b8317a9592d6f9df5b">quatuor::quad</a></div><div class="ttdeci">W quad</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00066">types.hpp:66</a></div></div>
<div class="ttc" id="a00065_php_aaff2e93f8a7ffc3e84a3e14a584392fd"><div class="ttname"><a href="../../de/de1/a00065.php#aaff2e93f8a7ffc3e84a3e14a584392fd">operator%</a></div><div class="ttdeci">std::vector&lt; T &gt; operator%(const std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00428">array.hpp:428</a></div></div>
<div class="ttc" id="a00047_php_a2e139f090204cfbf8f6bad9e3f260a73"><div class="ttname"><a href="../../d6/d2d/a00047.php#a2e139f090204cfbf8f6bad9e3f260a73">quatuor::second</a></div><div class="ttdeci">U second</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00064">types.hpp:64</a></div></div>
<div class="ttc" id="a00047_php_af8bab1b2edaafe2be7b53c7479e5417a"><div class="ttname"><a href="../../d6/d2d/a00047.php#af8bab1b2edaafe2be7b53c7479e5417a">trio::ter</a></div><div class="ttdeci">V ter</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d2d/a00047_source.php#l00024">types.hpp:24</a></div></div>
<div class="ttc" id="a00065_php_af3dd873a961cbff7c1524add89469140"><div class="ttname"><a href="../../de/de1/a00065.php#af3dd873a961cbff7c1524add89469140">operator+</a></div><div class="ttdeci">std::vector&lt; T &gt; operator+(const std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00398">array.hpp:398</a></div></div>
<div class="ttc" id="a00065_php_a3d4d62df9dc3a6a2461bc63d7cbd85d0"><div class="ttname"><a href="../../de/de1/a00065.php#a3d4d62df9dc3a6a2461bc63d7cbd85d0">array1Dto2D</a></div><div class="ttdeci">std::pair&lt; size_t, size_t &gt; array1Dto2D(size_t index, size_t maxX)</div></div>
<div class="ttc" id="a00065_php_a4ea5f5fe68709a70535f1d9097b4c5e3"><div class="ttname"><a href="../../de/de1/a00065.php#a4ea5f5fe68709a70535f1d9097b4c5e3">operator%=</a></div><div class="ttdeci">void operator%=(std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de1/a00065_source.php#l00423">array.hpp:423</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_badfd550b617ce52cc73ed1c8c9513f6.php">Algo</a></li><li class="navelem"><a class="el" href="../../dir_1788504ec76a4dda5464562bc560d0b5.php">C++Tests</a></li><li class="navelem"><a class="el" href="../../dir_2e741febc7df97747a68d36c1b3be5f0.php">C++</a></li><li class="navelem"><a class="el" href="../../dir_220287e732b97f08f66e5f221c69df74.php">inc</a></li><li class="navelem"><a class="el" href="../../dir_75b0389167f46f79a101ef8c4434cec4.php">C++</a></li><li class="navelem"><a class="el" href="../../de/de1/a00065.php">array.hpp</a></li>
    <li class="footer">Generated on Mon Aug 6 2018 11:36:13 for C++ by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
