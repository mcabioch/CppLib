<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
		<meta http-equiv="X-UA-Compatible" content="IE=9"/>
		<meta name="generator" content="Doxygen 1.8.11"/>
		<title>C++: mcd::BDD Class Reference</title>
		<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
		<script type="text/javascript" src="../../jquery.js"></script>
		<script type="text/javascript" src="../../dynsections.js"></script>
		<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
		<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
		<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
		<link href="../../doxystyle.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
			<div id="titlearea">
				<table cellspacing="0" cellpadding="0">
					<tbody>
						<tr style="height: 56px;">
							<td id="projectalign" style="padding-left: 0.5em;">
								<div id="projectname">C++
									&#160;<span id="projectnumber">2.0</span>
								</div>
								<div id="projectbrief">My own C++ features</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<?php
				$text = "Generated on Sun Apr 28 2019 10:55:01 for C++ by";
				$text = substr($text, 0, sizeof($text) - 4);
				$tmp = substr($text, 17);
				$tmp = substr($tmp, 0, strpos($tmp, " for"));
				$lastModif = date("l jS \of F Y \a\\t H:i:s", strtotime($tmp));
			?>
		<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.php"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.php"><span>Classes</span></a></li>
      <li><a href="../../files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('de/d21/a00006.php','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="../../d9/dd6/a00272.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">mcd::BDD Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class to connect to a <a class="el" href="../../de/d21/a00006.php" title="A class to connect to a BDD. ">BDD</a>.  
 <a href="../../de/d21/a00006.php#details">More...</a></p>

<p><code>#include &lt;bdd.hpp&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad053e8d34bf92a8af895c9d82153444a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#ad053e8d34bf92a8af895c9d82153444a">BDD</a> (bool fatal_error=true)</td></tr>
<tr class="memdesc:ad053e8d34bf92a8af895c9d82153444a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor of the class.  <a href="#ad053e8d34bf92a8af895c9d82153444a">More...</a><br /></td></tr>
<tr class="separator:ad053e8d34bf92a8af895c9d82153444a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a1269a1feb26d43f2c4db192bccb819"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a0a1269a1feb26d43f2c4db192bccb819">~BDD</a> ()</td></tr>
<tr class="separator:a0a1269a1feb26d43f2c4db192bccb819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4833d446f062a38e2622aa74e1a1572c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a4833d446f062a38e2622aa74e1a1572c">BDD</a> (const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;other)</td></tr>
<tr class="memdesc:a4833d446f062a38e2622aa74e1a1572c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The copy constructor of the class.  <a href="#a4833d446f062a38e2622aa74e1a1572c">More...</a><br /></td></tr>
<tr class="separator:a4833d446f062a38e2622aa74e1a1572c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91c1279e32ba4102c427ac1f2b80a888"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a91c1279e32ba4102c427ac1f2b80a888">BDD</a> (const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&amp;other)</td></tr>
<tr class="memdesc:a91c1279e32ba4102c427ac1f2b80a888"><td class="mdescLeft">&#160;</td><td class="mdescRight">The move constructor of the class.  <a href="#a91c1279e32ba4102c427ac1f2b80a888">More...</a><br /></td></tr>
<tr class="separator:a91c1279e32ba4102c427ac1f2b80a888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dc19941a536fc687f6b3a2dbdb6a70a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a1dc19941a536fc687f6b3a2dbdb6a70a">operator=</a> (const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;other) noexcept</td></tr>
<tr class="memdesc:a1dc19941a536fc687f6b3a2dbdb6a70a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The copy operator of the class.  <a href="#a1dc19941a536fc687f6b3a2dbdb6a70a">More...</a><br /></td></tr>
<tr class="separator:a1dc19941a536fc687f6b3a2dbdb6a70a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeac6ec5c90ca4638d5f5ba3ef77f1ddc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#aeac6ec5c90ca4638d5f5ba3ef77f1ddc">operator=</a> (const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&amp;other) noexcept</td></tr>
<tr class="memdesc:aeac6ec5c90ca4638d5f5ba3ef77f1ddc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The move operator of the class.  <a href="#aeac6ec5c90ca4638d5f5ba3ef77f1ddc">More...</a><br /></td></tr>
<tr class="separator:aeac6ec5c90ca4638d5f5ba3ef77f1ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7580a56e647ef779dd13e1e565b1ba60"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a7580a56e647ef779dd13e1e565b1ba60">setDatabase</a> (std::string database)</td></tr>
<tr class="memdesc:a7580a56e647ef779dd13e1e565b1ba60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Connection to the database.  <a href="#a7580a56e647ef779dd13e1e565b1ba60">More...</a><br /></td></tr>
<tr class="separator:a7580a56e647ef779dd13e1e565b1ba60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a739407f6b74900bcce605f82367a304d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a739407f6b74900bcce605f82367a304d">try_database</a> (std::string database)</td></tr>
<tr class="memdesc:a739407f6b74900bcce605f82367a304d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try a connection to the database.  <a href="#a739407f6b74900bcce605f82367a304d">More...</a><br /></td></tr>
<tr class="separator:a739407f6b74900bcce605f82367a304d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1969b4ae3eabae388e4807c55a9b6158"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a1969b4ae3eabae388e4807c55a9b6158">setTable</a> (std::string table)</td></tr>
<tr class="memdesc:a1969b4ae3eabae388e4807c55a9b6158"><td class="mdescLeft">&#160;</td><td class="mdescRight">Choose the table to simplify the others functions.  <a href="#a1969b4ae3eabae388e4807c55a9b6158">More...</a><br /></td></tr>
<tr class="separator:a1969b4ae3eabae388e4807c55a9b6158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e7bd7cc1a4c5692d01fcb843b3ef274"><td class="memItemLeft" align="right" valign="top">sql::ResultSet *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a2e7bd7cc1a4c5692d01fcb843b3ef274">query</a> (std::string task)</td></tr>
<tr class="memdesc:a2e7bd7cc1a4c5692d01fcb843b3ef274"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the task to the database.  <a href="#a2e7bd7cc1a4c5692d01fcb843b3ef274">More...</a><br /></td></tr>
<tr class="separator:a2e7bd7cc1a4c5692d01fcb843b3ef274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70ed9eb11c95d2237a991cd08e5f5622"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d1b/a00015.php#a43ad23cf0f5fa9e480a23a7da6eff1f9">ListArray</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a70ed9eb11c95d2237a991cd08e5f5622">list</a> (std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:a70ed9eb11c95d2237a991cd08e5f5622"><td class="mdescLeft">&#160;</td><td class="mdescRight">List the content of the given table.  <a href="#a70ed9eb11c95d2237a991cd08e5f5622">More...</a><br /></td></tr>
<tr class="separator:a70ed9eb11c95d2237a991cd08e5f5622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31d41a7c427748c8460bc9344f0fb085"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a31d41a7c427748c8460bc9344f0fb085">insert</a> (std::string values, std::string args=&quot;&quot;, std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:a31d41a7c427748c8460bc9344f0fb085"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use of the INSERT in SQL.  <a href="#a31d41a7c427748c8460bc9344f0fb085">More...</a><br /></td></tr>
<tr class="separator:a31d41a7c427748c8460bc9344f0fb085"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8b708c9bd3e4034f6d49090dc2a56c6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#aa8b708c9bd3e4034f6d49090dc2a56c6">update</a> (std::string values, std::string conditions, std::string args=&quot;&quot;, std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:aa8b708c9bd3e4034f6d49090dc2a56c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use of the UPDATE in SQL.  <a href="#aa8b708c9bd3e4034f6d49090dc2a56c6">More...</a><br /></td></tr>
<tr class="separator:aa8b708c9bd3e4034f6d49090dc2a56c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b70f810a87a180774b925a619e5e2b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#ad4b70f810a87a180774b925a619e5e2b">update</a> (std::vector&lt; std::string &gt; values, std::string conditions, std::string args=&quot;&quot;, std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:ad4b70f810a87a180774b925a619e5e2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use of the UPDATE in SQL.  <a href="#ad4b70f810a87a180774b925a619e5e2b">More...</a><br /></td></tr>
<tr class="separator:ad4b70f810a87a180774b925a619e5e2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53b2440949d664c4bfe6c3ad36301cfd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a53b2440949d664c4bfe6c3ad36301cfd">remove</a> (std::string condition, std::string args=&quot;&quot;, std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:a53b2440949d664c4bfe6c3ad36301cfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use of the DELETE in SQL.  <a href="#a53b2440949d664c4bfe6c3ad36301cfd">More...</a><br /></td></tr>
<tr class="separator:a53b2440949d664c4bfe6c3ad36301cfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5dfd590e2c10679d337de53feb1a032"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#ad5dfd590e2c10679d337de53feb1a032">exists</a> (std::string task)</td></tr>
<tr class="memdesc:ad5dfd590e2c10679d337de53feb1a032"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verify if something exist in the bdd.  <a href="#ad5dfd590e2c10679d337de53feb1a032">More...</a><br /></td></tr>
<tr class="separator:ad5dfd590e2c10679d337de53feb1a032"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cc12dcdc2a8c762b6ef6009d8dd755d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a2cc12dcdc2a8c762b6ef6009d8dd755d">connect</a> (std::string url, std::string user, std::string pass)</td></tr>
<tr class="memdesc:a2cc12dcdc2a8c762b6ef6009d8dd755d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Connection to a bdd.  <a href="#a2cc12dcdc2a8c762b6ef6009d8dd755d">More...</a><br /></td></tr>
<tr class="separator:a2cc12dcdc2a8c762b6ef6009d8dd755d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78f28d7977f972ecba1bb47fa2fc6b13"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a78f28d7977f972ecba1bb47fa2fc6b13">try_connect</a> (std::string url, std::string user, std::string pass)</td></tr>
<tr class="memdesc:a78f28d7977f972ecba1bb47fa2fc6b13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Try a connection to a bdd.  <a href="#a78f28d7977f972ecba1bb47fa2fc6b13">More...</a><br /></td></tr>
<tr class="separator:a78f28d7977f972ecba1bb47fa2fc6b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d24d70145c08c1d601ece77a39827a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a9d24d70145c08c1d601ece77a39827a9">reset</a> ()</td></tr>
<tr class="memdesc:a9d24d70145c08c1d601ece77a39827a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the object.  <a href="#a9d24d70145c08c1d601ece77a39827a9">More...</a><br /></td></tr>
<tr class="separator:a9d24d70145c08c1d601ece77a39827a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab265e13d6466220916457c44905ae23f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#ab265e13d6466220916457c44905ae23f">debug</a> ()</td></tr>
<tr class="memdesc:ab265e13d6466220916457c44905ae23f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start the debug for the class.  <a href="#ab265e13d6466220916457c44905ae23f">More...</a><br /></td></tr>
<tr class="separator:ab265e13d6466220916457c44905ae23f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dfd62fe6ad32cb99ea710829cd6f0c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a8dfd62fe6ad32cb99ea710829cd6f0c8">undebug</a> ()</td></tr>
<tr class="memdesc:a8dfd62fe6ad32cb99ea710829cd6f0c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop the debug for the class.  <a href="#a8dfd62fe6ad32cb99ea710829cd6f0c8">More...</a><br /></td></tr>
<tr class="separator:a8dfd62fe6ad32cb99ea710829cd6f0c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaa6ffe0e76f80fce06afc6b914e56fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d1b/a00015.php#a27879f482853a2a062c50568eb480898">ColsArray</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#afaa6ffe0e76f80fce06afc6b914e56fc">getColumns</a> (std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:afaa6ffe0e76f80fce06afc6b914e56fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all the columns of a table with their attributes.  <a href="#afaa6ffe0e76f80fce06afc6b914e56fc">More...</a><br /></td></tr>
<tr class="separator:afaa6ffe0e76f80fce06afc6b914e56fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76d9ee7bb1183b2a524d03a49fd5b6f9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a76d9ee7bb1183b2a524d03a49fd5b6f9">hasAutoincrement</a> (std::string table=&quot;&quot;)</td></tr>
<tr class="memdesc:a76d9ee7bb1183b2a524d03a49fd5b6f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verify if a table contains an autoincremented column.  <a href="#a76d9ee7bb1183b2a524d03a49fd5b6f9">More...</a><br /></td></tr>
<tr class="separator:a76d9ee7bb1183b2a524d03a49fd5b6f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10adb3234bd843d49771fdf135d9d1df"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a10adb3234bd843d49771fdf135d9d1df">getCount</a> (std::string table=&quot;&quot;, std::string conditions=&quot;&quot;)</td></tr>
<tr class="memdesc:a10adb3234bd843d49771fdf135d9d1df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of lines with the conditions.  <a href="#a10adb3234bd843d49771fdf135d9d1df">More...</a><br /></td></tr>
<tr class="separator:a10adb3234bd843d49771fdf135d9d1df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc849e1567062c32a5ab6ff83c1005dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d1b/a00015.php#a43ad23cf0f5fa9e480a23a7da6eff1f9">ListArray</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#afc849e1567062c32a5ab6ff83c1005dd">tables</a> ()</td></tr>
<tr class="memdesc:afc849e1567062c32a5ab6ff83c1005dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all the tables of the database.  <a href="#afc849e1567062c32a5ab6ff83c1005dd">More...</a><br /></td></tr>
<tr class="separator:afc849e1567062c32a5ab6ff83c1005dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2af8494da2ae649370116bcb1d52347a"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a2af8494da2ae649370116bcb1d52347a">lastId</a> ()</td></tr>
<tr class="memdesc:a2af8494da2ae649370116bcb1d52347a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the last created id in the table.  <a href="#a2af8494da2ae649370116bcb1d52347a">More...</a><br /></td></tr>
<tr class="separator:a2af8494da2ae649370116bcb1d52347a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c3ca5cd7be5fba08faa47a1e3fcee70"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a3c3ca5cd7be5fba08faa47a1e3fcee70">setFatal</a> (bool state)</td></tr>
<tr class="memdesc:a3c3ca5cd7be5fba08faa47a1e3fcee70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set if an error is fatal or just like a warning.  <a href="#a3c3ca5cd7be5fba08faa47a1e3fcee70">More...</a><br /></td></tr>
<tr class="separator:a3c3ca5cd7be5fba08faa47a1e3fcee70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1b57ea1c6efd2db0fd0965e6e51f714"><td class="memTemplParams" colspan="2">template&lt;typename Func , class C , typename... Args&gt; </td></tr>
<tr class="memitem:aa1b57ea1c6efd2db0fd0965e6e51f714"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#aa1b57ea1c6efd2db0fd0965e6e51f714">applyForEach</a> (Func &amp;&amp;f, C obj, std::string table, Args &amp;&amp;...args)</td></tr>
<tr class="memdesc:aa1b57ea1c6efd2db0fd0965e6e51f714"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run an object method for each column of the <em>table</em>.  <a href="#aa1b57ea1c6efd2db0fd0965e6e51f714">More...</a><br /></td></tr>
<tr class="separator:aa1b57ea1c6efd2db0fd0965e6e51f714"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cb4d14ca11458ed9a7e97b399914bb6"><td class="memTemplParams" colspan="2">template&lt;typename Func , typename... Args&gt; </td></tr>
<tr class="memitem:a9cb4d14ca11458ed9a7e97b399914bb6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a9cb4d14ca11458ed9a7e97b399914bb6">applyForEach</a> (Func &amp;&amp;f, std::string table, Args &amp;&amp;...args)</td></tr>
<tr class="memdesc:a9cb4d14ca11458ed9a7e97b399914bb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run a function for each column of the <em>table</em>.  <a href="#a9cb4d14ca11458ed9a7e97b399914bb6">More...</a><br /></td></tr>
<tr class="separator:a9cb4d14ca11458ed9a7e97b399914bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a85f42e3b392de864a33bc7dbd357d02a"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a85f42e3b392de864a33bc7dbd357d02a">formatColumn</a> (std::string name)</td></tr>
<tr class="memdesc:a85f42e3b392de864a33bc7dbd357d02a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format a column name for text.  <a href="#a85f42e3b392de864a33bc7dbd357d02a">More...</a><br /></td></tr>
<tr class="separator:a85f42e3b392de864a33bc7dbd357d02a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a00133efd5df6057d0b4490caf3860f3b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a00133efd5df6057d0b4490caf3860f3b">formatValues</a> (std::string &amp;values, std::string table)</td></tr>
<tr class="memdesc:a00133efd5df6057d0b4490caf3860f3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format the values string.  <a href="#a00133efd5df6057d0b4490caf3860f3b">More...</a><br /></td></tr>
<tr class="separator:a00133efd5df6057d0b4490caf3860f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e45e19e9942001e5a46e0e3586b869f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a1e45e19e9942001e5a46e0e3586b869f">formatConditions</a> (std::string &amp;conditions, std::string table)</td></tr>
<tr class="memdesc:a1e45e19e9942001e5a46e0e3586b869f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format the conditions string.  <a href="#a1e45e19e9942001e5a46e0e3586b869f">More...</a><br /></td></tr>
<tr class="separator:a1e45e19e9942001e5a46e0e3586b869f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1462638a412851e385fee49dce16738e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d21/a00006.php#a1462638a412851e385fee49dce16738e">formatBdd</a> (std::vector&lt; std::string &gt; &amp;args)</td></tr>
<tr class="memdesc:a1462638a412851e385fee49dce16738e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Format values for the bdd.  <a href="#a1462638a412851e385fee49dce16738e">More...</a><br /></td></tr>
<tr class="separator:a1462638a412851e385fee49dce16738e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class to connect to a <a class="el" href="../../de/d21/a00006.php" title="A class to connect to a BDD. ">BDD</a>. </p>
<dl class="todo"><dt><b><a class="el" href="../../d8/d84/a00001.php#_todo000001">Todo:</a></b></dt><dd>Be carefull on additions in an update </dd></dl>
<ul>
<li>Usefull commands with a query answer<br />
<ul>
<li>sql::ResultSet* rep = bdd.query(...);<br />
</li>
<li>auto meta = rep-&gt;getMetaData() : return the answer's meta-datas<br />
<ul>
<li>meta-&gt;getColumnCount() : return the answer's column's number<br />
</li>
</ul>
</li>
<li>rep-&gt;next() : return the next datas (to get something after a query you must use next() at least once<br />
</li>
<li>For each answers' lines,<br />
<ul>
<li>meta-&gt;getColumnLabel(numLine) : return the column's name<br />
</li>
<li>meta-&gt;getColumnName(numLine) : return the column's name<br />
</li>
<li>meta-&gt;getColumnType(numLine)<br />
</li>
<li>meta-&gt;getColumnTypeName(numLine) : return the column's type in capital<br />
</li>
<li>meta-&gt;isAutoIncrement(numLine) : return true if the column is autoincrement, false either<br />
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad053e8d34bf92a8af895c9d82153444a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">mcd::BDD::BDD </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>fatal_error</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor of the class. </p>

</div>
</div>
<a class="anchor" id="a0a1269a1feb26d43f2c4db192bccb819"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual mcd::BDD::~BDD </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a4833d446f062a38e2622aa74e1a1572c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">mcd::BDD::BDD </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The copy constructor of the class. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>The class' instance for copying </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a91c1279e32ba4102c427ac1f2b80a888"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">mcd::BDD::BDD </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The move constructor of the class. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>The class' instance for moving </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aa1b57ea1c6efd2db0fd0965e6e51f714"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Func , class C , typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::applyForEach </td>
          <td>(</td>
          <td class="paramtype">Func &amp;&amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">C&#160;</td>
          <td class="paramname"><em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run an object method for each column of the <em>table</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>The function to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">obj</td><td>The object on which to use the method </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table name </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>The other arguments </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

<p><div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../de/d21/a00006_aa1b57ea1c6efd2db0fd0965e6e51f714_cgraph.png" border="0" usemap="#de/d21/a00006_aa1b57ea1c6efd2db0fd0965e6e51f714_cgraph" alt=""/></div>
<map name="de/d21/a00006_aa1b57ea1c6efd2db0fd0965e6e51f714_cgraph" id="de/d21/a00006_aa1b57ea1c6efd2db0fd0965e6e51f714_cgraph">
<area shape="rect" id="node2" href="../../de/d21/a00006.php#afaa6ffe0e76f80fce06afc6b914e56fc" title="Get all the columns of a table with their attributes. " alt="" coords="225,5,388,32"/>
</map>
</div>
</p>

</div>
</div>
<a class="anchor" id="a9cb4d14ca11458ed9a7e97b399914bb6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Func , typename... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::applyForEach </td>
          <td>(</td>
          <td class="paramtype">Func &amp;&amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run a function for each column of the <em>table</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">f</td><td>The function to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table name </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>The other arguments </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

<p><div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../de/d21/a00006_a9cb4d14ca11458ed9a7e97b399914bb6_cgraph.png" border="0" usemap="#de/d21/a00006_a9cb4d14ca11458ed9a7e97b399914bb6_cgraph" alt=""/></div>
<map name="de/d21/a00006_a9cb4d14ca11458ed9a7e97b399914bb6_cgraph" id="de/d21/a00006_a9cb4d14ca11458ed9a7e97b399914bb6_cgraph">
<area shape="rect" id="node2" href="../../de/d21/a00006.php#afaa6ffe0e76f80fce06afc6b914e56fc" title="Get all the columns of a table with their attributes. " alt="" coords="239,5,402,32"/>
<area shape="rect" id="node3" href="../../de/d21/a00006.php#a00133efd5df6057d0b4490caf3860f3b" title="Format the values string. " alt="" coords="236,56,405,83"/>
<area shape="rect" id="node4" href="../../de/d21/a00006.php#a1e45e19e9942001e5a46e0e3586b869f" title="Format the conditions string. " alt="" coords="225,107,416,133"/>
<area shape="rect" id="node5" href="../../de/d21/a00006.php#a1462638a412851e385fee49dce16738e" title="Format values for the bdd. " alt="" coords="245,157,397,184"/>
</map>
</div>
</p>

</div>
</div>
<a class="anchor" id="a2cc12dcdc2a8c762b6ef6009d8dd755d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::connect </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>user</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>pass</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Connection to a bdd. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">url</td><td>The url to connect to the database </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">user</td><td>The user for the database </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pass</td><td>The password for this user</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="ab265e13d6466220916457c44905ae23f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::debug </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start the debug for the class. </p>

</div>
</div>
<a class="anchor" id="ad5dfd590e2c10679d337de53feb1a032"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::exists </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>task</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verify if something exist in the bdd. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">task</td><td>The task to verify</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="a1462638a412851e385fee49dce16738e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::formatBdd </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Format values for the bdd. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">args</td><td>The arguments to format</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a class="anchor" id="a85f42e3b392de864a33bc7dbd357d02a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string mcd::BDD::formatColumn </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Format a column name for text. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">name</td><td>The column name </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the formatted name </dd></dl>

</div>
</div>
<a class="anchor" id="a1e45e19e9942001e5a46e0e3586b869f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::formatConditions </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>conditions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Format the conditions string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">conditions</td><td>The conditions to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table where are the values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a class="anchor" id="a00133efd5df6057d0b4490caf3860f3b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::formatValues </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Format the values string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">values</td><td>The values to send </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table where are the values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a class="anchor" id="afaa6ffe0e76f80fce06afc6b914e56fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d1b/a00015.php#a27879f482853a2a062c50568eb480898">ColsArray</a> mcd::BDD::getColumns </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all the columns of a table with their attributes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table where to search</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a vector containing the attributes</dd></dl>
<ul>
<li>Each column contains the listed fields<br />
<ul>
<li>name : The column name<br />
</li>
<li>type : The column type in uppercase<br />
</li>
<li>autoincrement : 1 if the column is autoincremented, 0 otherwise<br />
</li>
<li>null : 1 if the column can be set to NULL, 0 otherwise<br />
</li>
<li>numeric : 1 if the column type is a numeric type, 0 otherwise<br />
</li>
<li>default : 1 if the column has a default value, 0 otherwise<br />
</li>
<li>default value (only if <b>default</b> = 1) : The default value of the column<br />
</li>
</ul>
</li>
</ul>

</div>
</div>
<a class="anchor" id="a10adb3234bd843d49771fdf135d9d1df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::BDD::getCount </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>conditions</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the number of lines with the conditions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table where to search </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conditions</td><td>The conditions for the search</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the number of lines </dd></dl>

</div>
</div>
<a class="anchor" id="a76d9ee7bb1183b2a524d03a49fd5b6f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::hasAutoincrement </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Verify if a table contains an autoincremented column. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table where to search</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="a31d41a7c427748c8460bc9344f0fb085"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::BDD::insert </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>args</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use of the INSERT in SQL. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>The values to insert in the database </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Other arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table in which to do the action</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The new created index or 0 </dd></dl>

</div>
</div>
<a class="anchor" id="a2af8494da2ae649370116bcb1d52347a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t mcd::BDD::lastId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the last created id in the table. </p>

</div>
</div>
<a class="anchor" id="a70ed9eb11c95d2237a991cd08e5f5622"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d1b/a00015.php#a43ad23cf0f5fa9e480a23a7da6eff1f9">ListArray</a> mcd::BDD::list </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List the content of the given table. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table in which to do the action</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a vector of a vector of the content in strings </dd></dl>

</div>
</div>
<a class="anchor" id="a1dc19941a536fc687f6b3a2dbdb6a70a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d21/a00006.php">BDD</a>&amp; mcd::BDD::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The copy operator of the class. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>The class' instance for copying </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeac6ec5c90ca4638d5f5ba3ef77f1ddc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d21/a00006.php">BDD</a>&amp; mcd::BDD::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d21/a00006.php">BDD</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The move operator of the class. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>The class' instance for moving </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2e7bd7cc1a4c5692d01fcb843b3ef274"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sql::ResultSet* mcd::BDD::query </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>task</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Query the task to the database. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">task</td><td>The task to query</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return the result of the query </dd></dl>

</div>
</div>
<a class="anchor" id="a53b2440949d664c4bfe6c3ad36301cfd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::remove </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>condition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>args</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use of the DELETE in SQL. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">condition</td><td>The condition to delete datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Other arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table in which to do the action</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="a9d24d70145c08c1d601ece77a39827a9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::reset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reset the object. </p>

</div>
</div>
<a class="anchor" id="a7580a56e647ef779dd13e1e565b1ba60"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::setDatabase </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>database</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Connection to the database. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">database</td><td>The database to connect to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="a3c3ca5cd7be5fba08faa47a1e3fcee70"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::setFatal </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set if an error is fatal or just like a warning. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">state</td><td><b>true</b> or <b>false</b> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void </dd></dl>

</div>
</div>
<a class="anchor" id="a1969b4ae3eabae388e4807c55a9b6158"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::setTable </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Choose the table to simplify the others functions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table in which to do the actions</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="afc849e1567062c32a5ab6ff83c1005dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d1b/a00015.php#a43ad23cf0f5fa9e480a23a7da6eff1f9">ListArray</a> mcd::BDD::tables </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get all the tables of the database. </p>
<dl class="section return"><dt>Returns</dt><dd>Return all the tables </dd></dl>

</div>
</div>
<a class="anchor" id="a78f28d7977f972ecba1bb47fa2fc6b13"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::try_connect </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>user</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>pass</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Try a connection to a bdd. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">url</td><td>The url to connect to the database </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">user</td><td>The user for the database </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pass</td><td>The password for this user</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="a739407f6b74900bcce605f82367a304d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::try_database </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>database</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Try a connection to the database. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">database</td><td>The database to connect to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="a8dfd62fe6ad32cb99ea710829cd6f0c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void mcd::BDD::undebug </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stop the debug for the class. </p>

<p><div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><img src="../../de/d21/a00006_a8dfd62fe6ad32cb99ea710829cd6f0c8_cgraph.png" border="0" usemap="#de/d21/a00006_a8dfd62fe6ad32cb99ea710829cd6f0c8_cgraph" alt=""/></div>
<map name="de/d21/a00006_a8dfd62fe6ad32cb99ea710829cd6f0c8_cgraph" id="de/d21/a00006_a8dfd62fe6ad32cb99ea710829cd6f0c8_cgraph">
<area shape="rect" id="node2" href="../../de/d21/a00006.php#afaa6ffe0e76f80fce06afc6b914e56fc" title="Get all the columns of a table with their attributes. " alt="" coords="212,5,375,32"/>
<area shape="rect" id="node3" href="../../de/d21/a00006.php#a76d9ee7bb1183b2a524d03a49fd5b6f9" title="Verify if a table contains an autoincremented column. " alt="" coords="195,56,392,83"/>
<area shape="rect" id="node4" href="../../de/d21/a00006.php#a10adb3234bd843d49771fdf135d9d1df" title="Get the number of lines with the conditions. " alt="" coords="221,107,366,133"/>
<area shape="rect" id="node5" href="../../de/d21/a00006.php#afc849e1567062c32a5ab6ff83c1005dd" title="Get all the tables of the database. " alt="" coords="230,157,357,184"/>
<area shape="rect" id="node6" href="../../de/d21/a00006.php#a2af8494da2ae649370116bcb1d52347a" title="Get the last created id in the table. " alt="" coords="231,208,355,235"/>
<area shape="rect" id="node7" href="../../de/d21/a00006.php#a85f42e3b392de864a33bc7dbd357d02a" title="Format a column name for text. " alt="" coords="206,259,381,285"/>
</map>
</div>
</p>

</div>
</div>
<a class="anchor" id="aa8b708c9bd3e4034f6d49090dc2a56c6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::update </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>conditions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>args</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use of the UPDATE in SQL. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>The new values of the datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conditions</td><td>The conditions to update datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Other arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table in which to do the action</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<a class="anchor" id="ad4b70f810a87a180774b925a619e5e2b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mcd::BDD::update </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt;&#160;</td>
          <td class="paramname"><em>values</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>conditions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>args</em> = <code>&quot;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>table</em> = <code>&quot;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use of the UPDATE in SQL. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>The new values of the datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conditions</td><td>The conditions to update datas </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Other arguments </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">table</td><td>The table in which to do the action</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><b>true</b> or <b>false</b> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="../../d1/d09/a00077.php">bdd.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.11-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
	<ul>
		<li class="navelem"><a class="el" href="../../dd/d1b/a00015.php">mcd</a></li><li class="navelem"><a class="el" href="../../de/d21/a00006.php">BDD</a></li>
		<li class="footer">
			<?php
				echo $text;
			?>
		</li>
	</ul>
</div>
</body>
</html>
