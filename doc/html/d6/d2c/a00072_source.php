<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
		<meta http-equiv="X-UA-Compatible" content="IE=9"/>
		<meta name="generator" content="Doxygen 1.8.11"/>
		<title>C++: Big.hpp Source File</title>
		<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
		<script type="text/javascript" src="../../jquery.js"></script>
		<script type="text/javascript" src="../../dynsections.js"></script>
		<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
		<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
		<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
		<link href="../../doxystyle.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
			<div id="titlearea">
				<table cellspacing="0" cellpadding="0">
					<tbody>
						<tr style="height: 56px;">
							<td id="projectalign" style="padding-left: 0.5em;">
								<div id="projectname">C++
									&#160;<span id="projectnumber">2.0</span>
								</div>
								<div id="projectbrief">My own C++ features</div>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<?php
				$text = "Generated on Wed Aug 8 2018 09:57:28 for C++ by";
				$text = substr($text, 0, sizeof($text) - 4);
				$tmp = substr($text, 17);
				$tmp = substr($tmp, 0, strpos($tmp, " for"));
				$lastModif = date("l jS \of F Y \a\\t H:i:s", strtotime($tmp));
			?>
		<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.php"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.php"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.php"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d6/d2c/a00072_source.php','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Big.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d6/d2c/a00072.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#ifndef HEADER_BIG</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define HEADER_BIG</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;regex&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">class </span><a class="code" href="../../de/d5e/a00007.php">Big</a>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">inline</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d6/d2c/a00072.php#a8ddcbf3fd6be0f42c96653bff6dd98c1">   35</a></span>&#160;std::string <a class="code" href="../../d6/d2c/a00072.php#a8ddcbf3fd6be0f42c96653bff6dd98c1">toBigVal</a>(T in){</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    std::stringstream out;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    out &lt;&lt; in;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> out.str();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="../../d6/d2c/a00072.php#a37cb35a4cd9b6f429cb689acbe47ae63">   45</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="../../d6/d2c/a00072.php#a37cb35a4cd9b6f429cb689acbe47ae63">fromBigVal</a>(<span class="keywordtype">char</span> in){</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::stringstream tmp;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordtype">int</span> out;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    tmp &lt;&lt; in;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    tmp &gt;&gt; out;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../d6/d2c/a00072.php#a87795f3e246d8eeb83a496491e1e3e15">   58</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="../../d6/d2c/a00072.php#a37cb35a4cd9b6f429cb689acbe47ae63">fromBigVal</a>(std::string in){</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::stringstream tmp;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">int</span> out;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    tmp &lt;&lt; in;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    tmp &gt;&gt; out;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../de/d5e/a00007.php">   73</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../de/d5e/a00007.php">Big</a> {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">/* Usefull or required defines */</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        </div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">/* Members of Big */</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="comment">/* Internal enums of Big */</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            </div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">/* Constructors &amp; Destructor of Big */</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            template&lt;typename T, class = std::enable_if_t&lt;std::is_arithmetic&lt;T&gt;::value&gt; &gt;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="../../de/d5e/a00007.php#a9e3d0d8c5f1729e3fbb3996b4c3c589d">Big</a>(T val);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <a class="code" href="../../de/d5e/a00007.php#a9e3d0d8c5f1729e3fbb3996b4c3c589d">Big</a>(std::string val);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="../../de/d5e/a00007.php#a9e3d0d8c5f1729e3fbb3996b4c3c589d">Big</a>();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">virtual</span> <a class="code" href="../../de/d5e/a00007.php#a1cbc94bd3fe5f63ea23c9d4feef6bc82">~Big</a>();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="../../de/d5e/a00007.php#a9e3d0d8c5f1729e3fbb3996b4c3c589d">Big</a>(<span class="keyword">const</span> Big&amp; other);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <a class="code" href="../../de/d5e/a00007.php#a9e3d0d8c5f1729e3fbb3996b4c3c589d">Big</a>(<span class="keyword">const</span> Big&amp;&amp; other);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment">/* Getters of Big */</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            </div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">/* Setters of Big */</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            </div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">/* Statics of Big */</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            </div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">/* Operators of Big */</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#a4955126f4af91d3a66e615eb4d183df4">operator=</a>(<span class="keyword">const</span> Big&amp; other) noexcept;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#a4955126f4af91d3a66e615eb4d183df4">operator=</a>(<span class="keyword">const</span> Big&amp;&amp; other) noexcept;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#af62222b4c7617f3e083faa9791c4358d">operator+=</a>(<span class="keyword">const</span> Big&amp; other) noexcept;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#a95b72b322bdd5d6de45c3b4f9e587d4a">operator-=</a>(<span class="keyword">const</span> Big&amp; other) noexcept;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#ab6efe526ce133c1d8faab4c6c1030a20">operator*=</a>(<span class="keyword">const</span> Big&amp; other) noexcept;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#ae9d4bb05ec679184419914b8e2de13f6">operator/=</a>(<span class="keyword">const</span> Big&amp; other);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            Big&amp; <a class="code" href="../../de/d5e/a00007.php#a4c54efc3d3e0678e3c5df17582dd3474">operator%=</a>(<span class="keyword">const</span> Big&amp; other);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keyword">operator</span> std::string()<span class="keyword">const</span> noexcept;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">/* Friends of Big */</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="../../de/d5e/a00007.php#a6d1ae6342e0dd6f689535b21fd46a023">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> Big&amp; other) noexcept;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">friend</span> std::istream&amp; <a class="code" href="../../de/d5e/a00007.php#a91ce80d3959e1d2a891e58c940c8631b">operator&gt;&gt;</a>(std::istream&amp; is, Big&amp; other) noexcept;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> Big <a class="code" href="../../de/d5e/a00007.php#ad475b8459ee2ea450eecbc0b2a49f221">operator+</a>(<span class="keyword">const</span> Big&amp; in) noexcept;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> Big <a class="code" href="../../de/d5e/a00007.php#a8d411571b65ece2daacc12f0293850e8">operator-</a>(<span class="keyword">const</span> Big&amp; in) noexcept;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#ad475b8459ee2ea450eecbc0b2a49f221">operator+</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#a8d411571b65ece2daacc12f0293850e8">operator-</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#aef65b2815526a32f3da7094648cb5ef7">operator*</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#aa0213bc63f03a5db6ec4d081b9320a96">operator/</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#a8082f5075921a15bedfa304ddc5f0bfa">operator%</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> Big <a class="code" href="../../de/d5e/a00007.php#aa74d80c3933bcb0736cd466c4e040daa">operator++</a>(Big&amp; in) noexcept;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> Big&amp; <a class="code" href="../../de/d5e/a00007.php#aa74d80c3933bcb0736cd466c4e040daa">operator++</a>(Big&amp; in, <span class="keywordtype">int</span>) noexcept;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> Big <a class="code" href="../../de/d5e/a00007.php#ac81326310b387979cb8976c802059fda">operator--</a>(Big&amp; in) noexcept;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> Big&amp; <a class="code" href="../../de/d5e/a00007.php#ac81326310b387979cb8976c802059fda">operator--</a>(Big&amp; in, <span class="keywordtype">int</span>) noexcept;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#a5eed09966f2142f9d979e7be4643c06a">operator==</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#a9c625348272715ed4dad2c1420fb5bd0">operator&lt;</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#ac75c3d550acaece7444e1d3373e0ced6">operator&gt;</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#ad9c55799e64051a79feb72642bacc2bd">operator!=</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../de/d5e/a00007.php#aaeca4e372966fe2b3b857d52880ca210">  157</a></span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#aaeca4e372966fe2b3b857d52880ca210">operator!</a>(<span class="keyword">const</span> Big&amp; a) noexcept{ <span class="keywordflow">return</span> (a == 0); }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#a74e55e1a85a44b255d0f8e1158e02658">operator&lt;=</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#adf83d734f0c4b777bb675bf327996987">operator&gt;=</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b) noexcept;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#a9d40406ec9457a1565a2b0c60585ae9b">pow</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; exp);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#aa3f0bc97d7c74a25af25962aa2bec33f">nroot</a>(<span class="keyword">const</span> Big&amp; a, uint64_t exp);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#aa6a7af66a5c239b2b46979e998c43679">pgcd</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keyword">friend</span> Big <a class="code" href="../../de/d5e/a00007.php#a2ed0b910c5ed7ec9875836082c63baa8">mod</a>(<span class="keyword">const</span> Big&amp; a, <span class="keyword">const</span> Big&amp; b);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">/* Others members of Big */</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../de/d5e/a00007.php#a90940d0adee92ed5b045d685acedbee1">prime</a>()<span class="keyword">const</span>;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="../../de/d5e/a00007.php#aef4befbad12a6f89a500349b0f3f0fe7">  192</a></span>&#160;            <span class="keywordtype">size_t</span> <a class="code" href="../../de/d5e/a00007.php#aef4befbad12a6f89a500349b0f3f0fe7">size</a>()<span class="keyword">const </span>{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">return</span> std::string(*this).size();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">/* Getters of Big */</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            </div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">/* Setters of Big */</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            </div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">/* Statics of Big */</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            </div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">/* Friends of Big */</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            </div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="comment">/* Others members of Big */</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            </div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> equalize(std::string&amp; val, <span class="keyword">const</span> std::string&amp; shape);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment">/* Compute a nth-root */</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../de/d5e/a00007.php#aa3f0bc97d7c74a25af25962aa2bec33f">nroot</a>(std::string val, uint64_t exp, Big&amp; r);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">void</span> nthroot(std::string val, uint64_t exp, Big&amp; r, std::vector&lt;std::vector&lt;Big&gt; &gt;&amp; array, std::vector&lt;std::string&gt;&amp; slices);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">size_t</span> notNull(std::vector&lt;std::vector&lt;Big&gt; &gt;&amp; array, uint64_t column);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">bool</span> addZeros(std::vector&lt;std::vector&lt;Big&gt; &gt;&amp; array, std::string val, std::vector&lt;std::string&gt;&amp; slices);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">/**********************/</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordtype">void</span> <span class="keyword">set</span>(std::string val);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordtype">void</span> minusDivide(Big&amp; val, <span class="keyword">const</span> Big&amp; other, Big&amp; increment, <span class="keywordtype">long</span> <span class="keywordtype">int</span> factor);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        Big division(std::string val, <span class="keyword">const</span> Big&amp; dividend, Big&amp; quotient);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordtype">void</span> divide(std::string val, <span class="keyword">const</span> Big&amp; dividend, Big&amp; quotient, Big&amp; rest);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        Big invert()<span class="keyword">const</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="comment">/* Atttributes of Big */</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">/* Global */</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            </div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">/* Local */</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            </div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="comment">/* Global */</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            </div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="comment">/* Local */</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            </div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">/* Global */</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            </div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="comment">/* Local */</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            std::string _val;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordtype">bool</span> _neg;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;};</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/db6/a00074.php">C++/Big_Constructor.hpp</a>&quot;</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/df8/a00076.php">C++/Big_Operator.hpp</a>&quot;</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d6e/a00073.php">C++/Big_Comparison.hpp</a>&quot;</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/da5/a00075.php">C++/Big_Maths.hpp</a>&quot;</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#endif //HEADER_BIG</span></div><div class="ttc" id="a00007_php"><div class="ttname"><a href="../../de/d5e/a00007.php">Big</a></div><div class="ttdoc">A new huge arithmetic variable. </div><div class="ttdef"><b>Definition:</b> Big.hpp:73</div></div>
<div class="ttc" id="a00007_php_ac81326310b387979cb8976c802059fda"><div class="ttname"><a href="../../de/d5e/a00007.php#ac81326310b387979cb8976c802059fda">Big::operator--</a></div><div class="ttdeci">friend Big operator--(Big &amp;in) noexcept</div><div class="ttdoc">Big–. </div><div class="ttdef"><b>Definition:</b> Big_Operator.hpp:15</div></div>
<div class="ttc" id="a00007_php_aef65b2815526a32f3da7094648cb5ef7"><div class="ttname"><a href="../../de/d5e/a00007.php#aef65b2815526a32f3da7094648cb5ef7">Big::operator*</a></div><div class="ttdeci">friend Big operator*(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big * Big. </div></div>
<div class="ttc" id="a00007_php_a9e3d0d8c5f1729e3fbb3996b4c3c589d"><div class="ttname"><a href="../../de/d5e/a00007.php#a9e3d0d8c5f1729e3fbb3996b4c3c589d">Big::Big</a></div><div class="ttdeci">Big()</div></div>
<div class="ttc" id="a00072_php_a8ddcbf3fd6be0f42c96653bff6dd98c1"><div class="ttname"><a href="../../d6/d2c/a00072.php#a8ddcbf3fd6be0f42c96653bff6dd98c1">toBigVal</a></div><div class="ttdeci">std::string toBigVal(T in)</div><div class="ttdoc">Convert a value from something to std::string. </div><div class="ttdef"><b>Definition:</b> Big.hpp:35</div></div>
<div class="ttc" id="a00007_php_aaeca4e372966fe2b3b857d52880ca210"><div class="ttname"><a href="../../de/d5e/a00007.php#aaeca4e372966fe2b3b857d52880ca210">Big::operator!</a></div><div class="ttdeci">friend bool operator!(const Big &amp;a) noexcept</div><div class="ttdoc">Big ! Big. </div><div class="ttdef"><b>Definition:</b> Big.hpp:157</div></div>
<div class="ttc" id="a00007_php_aa0213bc63f03a5db6ec4d081b9320a96"><div class="ttname"><a href="../../de/d5e/a00007.php#aa0213bc63f03a5db6ec4d081b9320a96">Big::operator/</a></div><div class="ttdeci">friend Big operator/(const Big &amp;a, const Big &amp;b)</div><div class="ttdoc">Big / Big. </div></div>
<div class="ttc" id="a00007_php_a8d411571b65ece2daacc12f0293850e8"><div class="ttname"><a href="../../de/d5e/a00007.php#a8d411571b65ece2daacc12f0293850e8">Big::operator-</a></div><div class="ttdeci">friend Big operator-(const Big &amp;in) noexcept</div><div class="ttdoc">-Big </div><div class="ttdef"><b>Definition:</b> Big_Operator.hpp:33</div></div>
<div class="ttc" id="a00076_php"><div class="ttname"><a href="../../db/df8/a00076.php">Big_Operator.hpp</a></div></div>
<div class="ttc" id="a00007_php_a4955126f4af91d3a66e615eb4d183df4"><div class="ttname"><a href="../../de/d5e/a00007.php#a4955126f4af91d3a66e615eb4d183df4">Big::operator=</a></div><div class="ttdeci">Big &amp; operator=(const Big &amp;other) noexcept</div><div class="ttdoc">The copy operator of the class. </div></div>
<div class="ttc" id="a00007_php_aef4befbad12a6f89a500349b0f3f0fe7"><div class="ttname"><a href="../../de/d5e/a00007.php#aef4befbad12a6f89a500349b0f3f0fe7">Big::size</a></div><div class="ttdeci">size_t size() const </div><div class="ttdoc">Return the size of the number. </div><div class="ttdef"><b>Definition:</b> Big.hpp:192</div></div>
<div class="ttc" id="a00074_php"><div class="ttname"><a href="../../db/db6/a00074.php">Big_Constructor.hpp</a></div></div>
<div class="ttc" id="a00007_php_aa74d80c3933bcb0736cd466c4e040daa"><div class="ttname"><a href="../../de/d5e/a00007.php#aa74d80c3933bcb0736cd466c4e040daa">Big::operator++</a></div><div class="ttdeci">friend Big operator++(Big &amp;in) noexcept</div><div class="ttdoc">Big++. </div><div class="ttdef"><b>Definition:</b> Big_Operator.hpp:2</div></div>
<div class="ttc" id="a00007_php_a9c625348272715ed4dad2c1420fb5bd0"><div class="ttname"><a href="../../de/d5e/a00007.php#a9c625348272715ed4dad2c1420fb5bd0">Big::operator&lt;</a></div><div class="ttdeci">friend bool operator&lt;(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big &lt; Big. </div><div class="ttdef"><b>Definition:</b> Big_Comparison.hpp:7</div></div>
<div class="ttc" id="a00007_php_a6d1ae6342e0dd6f689535b21fd46a023"><div class="ttname"><a href="../../de/d5e/a00007.php#a6d1ae6342e0dd6f689535b21fd46a023">Big::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Big &amp;other) noexcept</div></div>
<div class="ttc" id="a00007_php_a2ed0b910c5ed7ec9875836082c63baa8"><div class="ttname"><a href="../../de/d5e/a00007.php#a2ed0b910c5ed7ec9875836082c63baa8">Big::mod</a></div><div class="ttdeci">friend Big mod(const Big &amp;a, const Big &amp;b)</div><div class="ttdoc">Compute the invert of the modulo. </div></div>
<div class="ttc" id="a00007_php_aa3f0bc97d7c74a25af25962aa2bec33f"><div class="ttname"><a href="../../de/d5e/a00007.php#aa3f0bc97d7c74a25af25962aa2bec33f">Big::nroot</a></div><div class="ttdeci">friend Big nroot(const Big &amp;a, uint64_t exp)</div><div class="ttdoc">Compute a nth root. </div></div>
<div class="ttc" id="a00007_php_a4c54efc3d3e0678e3c5df17582dd3474"><div class="ttname"><a href="../../de/d5e/a00007.php#a4c54efc3d3e0678e3c5df17582dd3474">Big::operator%=</a></div><div class="ttdeci">Big &amp; operator%=(const Big &amp;other)</div></div>
<div class="ttc" id="a00007_php_ae9d4bb05ec679184419914b8e2de13f6"><div class="ttname"><a href="../../de/d5e/a00007.php#ae9d4bb05ec679184419914b8e2de13f6">Big::operator/=</a></div><div class="ttdeci">Big &amp; operator/=(const Big &amp;other)</div></div>
<div class="ttc" id="a00075_php"><div class="ttname"><a href="../../d9/da5/a00075.php">Big_Maths.hpp</a></div></div>
<div class="ttc" id="a00007_php_a1cbc94bd3fe5f63ea23c9d4feef6bc82"><div class="ttname"><a href="../../de/d5e/a00007.php#a1cbc94bd3fe5f63ea23c9d4feef6bc82">Big::~Big</a></div><div class="ttdeci">virtual ~Big()</div></div>
<div class="ttc" id="a00007_php_a8082f5075921a15bedfa304ddc5f0bfa"><div class="ttname"><a href="../../de/d5e/a00007.php#a8082f5075921a15bedfa304ddc5f0bfa">Big::operator%</a></div><div class="ttdeci">friend Big operator%(const Big &amp;a, const Big &amp;b)</div><div class="ttdoc">Big % Big. </div></div>
<div class="ttc" id="a00007_php_ad475b8459ee2ea450eecbc0b2a49f221"><div class="ttname"><a href="../../de/d5e/a00007.php#ad475b8459ee2ea450eecbc0b2a49f221">Big::operator+</a></div><div class="ttdeci">friend Big operator+(const Big &amp;in) noexcept</div><div class="ttdoc">+Big </div><div class="ttdef"><b>Definition:</b> Big_Operator.hpp:28</div></div>
<div class="ttc" id="a00007_php_a74e55e1a85a44b255d0f8e1158e02658"><div class="ttname"><a href="../../de/d5e/a00007.php#a74e55e1a85a44b255d0f8e1158e02658">Big::operator&lt;=</a></div><div class="ttdeci">friend bool operator&lt;=(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big &lt;= Big. </div><div class="ttdef"><b>Definition:</b> Big_Comparison.hpp:17</div></div>
<div class="ttc" id="a00007_php_a95b72b322bdd5d6de45c3b4f9e587d4a"><div class="ttname"><a href="../../de/d5e/a00007.php#a95b72b322bdd5d6de45c3b4f9e587d4a">Big::operator-=</a></div><div class="ttdeci">Big &amp; operator-=(const Big &amp;other) noexcept</div></div>
<div class="ttc" id="a00073_php"><div class="ttname"><a href="../../d1/d6e/a00073.php">Big_Comparison.hpp</a></div></div>
<div class="ttc" id="a00007_php_ad9c55799e64051a79feb72642bacc2bd"><div class="ttname"><a href="../../de/d5e/a00007.php#ad9c55799e64051a79feb72642bacc2bd">Big::operator!=</a></div><div class="ttdeci">friend bool operator!=(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big != Big. </div><div class="ttdef"><b>Definition:</b> Big_Comparison.hpp:12</div></div>
<div class="ttc" id="a00007_php_adf83d734f0c4b777bb675bf327996987"><div class="ttname"><a href="../../de/d5e/a00007.php#adf83d734f0c4b777bb675bf327996987">Big::operator&gt;=</a></div><div class="ttdeci">friend bool operator&gt;=(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big &gt;= Big. </div><div class="ttdef"><b>Definition:</b> Big_Comparison.hpp:22</div></div>
<div class="ttc" id="a00007_php_a90940d0adee92ed5b045d685acedbee1"><div class="ttname"><a href="../../de/d5e/a00007.php#a90940d0adee92ed5b045d685acedbee1">Big::prime</a></div><div class="ttdeci">bool prime() const </div><div class="ttdoc">Return true if the number is a prime number. </div></div>
<div class="ttc" id="a00072_php_a37cb35a4cd9b6f429cb689acbe47ae63"><div class="ttname"><a href="../../d6/d2c/a00072.php#a37cb35a4cd9b6f429cb689acbe47ae63">fromBigVal</a></div><div class="ttdeci">int fromBigVal(char in)</div><div class="ttdoc">Convert a char in an int. </div><div class="ttdef"><b>Definition:</b> Big.hpp:45</div></div>
<div class="ttc" id="a00007_php_af62222b4c7617f3e083faa9791c4358d"><div class="ttname"><a href="../../de/d5e/a00007.php#af62222b4c7617f3e083faa9791c4358d">Big::operator+=</a></div><div class="ttdeci">Big &amp; operator+=(const Big &amp;other) noexcept</div></div>
<div class="ttc" id="a00007_php_aa6a7af66a5c239b2b46979e998c43679"><div class="ttname"><a href="../../de/d5e/a00007.php#aa6a7af66a5c239b2b46979e998c43679">Big::pgcd</a></div><div class="ttdeci">friend Big pgcd(const Big &amp;a, const Big &amp;b)</div><div class="ttdoc">Compute the pgcd of a and b. </div></div>
<div class="ttc" id="a00007_php_a91ce80d3959e1d2a891e58c940c8631b"><div class="ttname"><a href="../../de/d5e/a00007.php#a91ce80d3959e1d2a891e58c940c8631b">Big::operator&gt;&gt;</a></div><div class="ttdeci">friend std::istream &amp; operator&gt;&gt;(std::istream &amp;is, Big &amp;other) noexcept</div></div>
<div class="ttc" id="a00007_php_a9d40406ec9457a1565a2b0c60585ae9b"><div class="ttname"><a href="../../de/d5e/a00007.php#a9d40406ec9457a1565a2b0c60585ae9b">Big::pow</a></div><div class="ttdeci">friend Big pow(const Big &amp;a, const Big &amp;exp)</div><div class="ttdoc">Compute a to the power of exp. </div></div>
<div class="ttc" id="a00007_php_a5eed09966f2142f9d979e7be4643c06a"><div class="ttname"><a href="../../de/d5e/a00007.php#a5eed09966f2142f9d979e7be4643c06a">Big::operator==</a></div><div class="ttdeci">friend bool operator==(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big == Big. </div><div class="ttdef"><b>Definition:</b> Big_Comparison.hpp:2</div></div>
<div class="ttc" id="a00007_php_ac75c3d550acaece7444e1d3373e0ced6"><div class="ttname"><a href="../../de/d5e/a00007.php#ac75c3d550acaece7444e1d3373e0ced6">Big::operator&gt;</a></div><div class="ttdeci">friend bool operator&gt;(const Big &amp;a, const Big &amp;b) noexcept</div><div class="ttdoc">Big &gt; Big. </div></div>
<div class="ttc" id="a00007_php_ab6efe526ce133c1d8faab4c6c1030a20"><div class="ttname"><a href="../../de/d5e/a00007.php#ab6efe526ce133c1d8faab4c6c1030a20">Big::operator*=</a></div><div class="ttdeci">Big &amp; operator*=(const Big &amp;other) noexcept</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.11-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
	<ul>
		<li class="navelem"><a class="el" href="../../dir_badfd550b617ce52cc73ed1c8c9513f6.php">Algo</a></li><li class="navelem"><a class="el" href="../../dir_1788504ec76a4dda5464562bc560d0b5.php">C++Tests</a></li><li class="navelem"><a class="el" href="../../dir_2e741febc7df97747a68d36c1b3be5f0.php">C++</a></li><li class="navelem"><a class="el" href="../../dir_220287e732b97f08f66e5f221c69df74.php">inc</a></li><li class="navelem"><a class="el" href="../../dir_75b0389167f46f79a101ef8c4434cec4.php">C++</a></li><li class="navelem"><a class="el" href="../../d6/d2c/a00072.php">Big.hpp</a></li>
		<li class="footer">
			<?php
				echo $text;
			?>
		</li>
	</ul>
</div>
</body>
</html>
